# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:07:41+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    AccessDeniedException,
    AccountAwsAccountIdPostRequest,
    AccountsAwsAccountIdAnalysesAnalysisIdPermissionsPutRequest,
    AccountsAwsAccountIdAnalysesAnalysisIdPostRequest,
    AccountsAwsAccountIdAnalysesAnalysisIdPutRequest,
    AccountsAwsAccountIdCustomizationsPostRequest,
    AccountsAwsAccountIdCustomizationsPutRequest,
    AccountsAwsAccountIdDashboardsDashboardIdPermissionsPutRequest,
    AccountsAwsAccountIdDashboardsDashboardIdPostRequest,
    AccountsAwsAccountIdDashboardsDashboardIdPutRequest,
    AccountsAwsAccountIdDataSetsDataSetIdIngestionsIngestionIdPutRequest,
    AccountsAwsAccountIdDataSetsDataSetIdPermissionsPostRequest,
    AccountsAwsAccountIdDataSetsDataSetIdPutRequest,
    AccountsAwsAccountIdDataSetsDataSetIdRefreshPropertiesPutRequest,
    AccountsAwsAccountIdDataSetsDataSetIdRefreshSchedulesPostRequest,
    AccountsAwsAccountIdDataSetsDataSetIdRefreshSchedulesPutRequest,
    AccountsAwsAccountIdDataSetsPostRequest,
    AccountsAwsAccountIdDataSourcesDataSourceIdPermissionsPostRequest,
    AccountsAwsAccountIdDataSourcesDataSourceIdPutRequest,
    AccountsAwsAccountIdDataSourcesPostRequest,
    AccountsAwsAccountIdEmbedUrlAnonymousUserPostRequest,
    AccountsAwsAccountIdEmbedUrlRegisteredUserPostRequest,
    AccountsAwsAccountIdFoldersFolderIdPermissionsPutRequest,
    AccountsAwsAccountIdFoldersFolderIdPostRequest,
    AccountsAwsAccountIdFoldersFolderIdPutRequest,
    AccountsAwsAccountIdIpRestrictionPostRequest,
    AccountsAwsAccountIdNamespacesNamespaceGroupsGroupNamePutRequest,
    AccountsAwsAccountIdNamespacesNamespaceGroupsPostRequest,
    AccountsAwsAccountIdNamespacesNamespaceGroupsSearchPostRequest,
    AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsAssignmentNamePutRequest,
    AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsGetRequest,
    AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsPostRequest,
    AccountsAwsAccountIdNamespacesNamespaceUsersPostRequest,
    AccountsAwsAccountIdNamespacesNamespaceUsersUserNamePutRequest,
    AccountsAwsAccountIdPostRequest,
    AccountsAwsAccountIdPublicSharingSettingsPutRequest,
    AccountsAwsAccountIdSearchAnalysesPostRequest,
    AccountsAwsAccountIdSearchDashboardsPostRequest,
    AccountsAwsAccountIdSearchDataSetsPostRequest,
    AccountsAwsAccountIdSearchDataSourcesPostRequest,
    AccountsAwsAccountIdSearchFoldersPostRequest,
    AccountsAwsAccountIdSettingsPutRequest,
    AccountsAwsAccountIdTemplatesTemplateIdAliasesAliasNamePostRequest,
    AccountsAwsAccountIdTemplatesTemplateIdAliasesAliasNamePutRequest,
    AccountsAwsAccountIdTemplatesTemplateIdPermissionsPutRequest,
    AccountsAwsAccountIdTemplatesTemplateIdPostRequest,
    AccountsAwsAccountIdTemplatesTemplateIdPutRequest,
    AccountsAwsAccountIdThemesThemeIdAliasesAliasNamePostRequest,
    AccountsAwsAccountIdThemesThemeIdAliasesAliasNamePutRequest,
    AccountsAwsAccountIdThemesThemeIdPermissionsPutRequest,
    AccountsAwsAccountIdThemesThemeIdPostRequest,
    AccountsAwsAccountIdThemesThemeIdPutRequest,
    AdditionalDashboardIds,
    CancelIngestionResponse,
    ConcurrentUpdatingException,
    ConflictException,
    CreateAccountCustomizationResponse,
    CreateAccountSubscriptionResponse,
    CreateAnalysisResponse,
    CreateDashboardResponse,
    CreateDataSetResponse,
    CreateDataSourceResponse,
    CreateFolderMembershipResponse,
    CreateFolderResponse,
    CreateGroupMembershipResponse,
    CreateGroupResponse,
    CreateIAMPolicyAssignmentResponse,
    CreateIngestionResponse,
    CreateNamespaceResponse,
    CreateRefreshScheduleResponse,
    CreateTemplateAliasResponse,
    CreateTemplateResponse,
    CreateThemeAliasResponse,
    CreateThemeResponse,
    CredsType,
    DeleteAccountCustomizationResponse,
    DeleteAccountSubscriptionResponse,
    DeleteAnalysisResponse,
    DeleteDashboardResponse,
    DeleteDataSetRefreshPropertiesResponse,
    DeleteDataSetResponse,
    DeleteDataSourceResponse,
    DeleteFolderMembershipResponse,
    DeleteFolderResponse,
    DeleteGroupMembershipResponse,
    DeleteGroupResponse,
    DeleteIAMPolicyAssignmentResponse,
    DeleteNamespaceResponse,
    DeleteRefreshScheduleResponse,
    DeleteTemplateAliasResponse,
    DeleteTemplateResponse,
    DeleteThemeAliasResponse,
    DeleteThemeResponse,
    DeleteUserByPrincipalIdResponse,
    DeleteUserResponse,
    DescribeAccountCustomizationResponse,
    DescribeAccountSettingsResponse,
    DescribeAccountSubscriptionResponse,
    DescribeAnalysisDefinitionResponse,
    DescribeAnalysisPermissionsResponse,
    DescribeAnalysisResponse,
    DescribeDashboardDefinitionResponse,
    DescribeDashboardPermissionsResponse,
    DescribeDashboardResponse,
    DescribeDataSetPermissionsResponse,
    DescribeDataSetRefreshPropertiesResponse,
    DescribeDataSetResponse,
    DescribeDataSourcePermissionsResponse,
    DescribeDataSourceResponse,
    DescribeFolderPermissionsResponse,
    DescribeFolderResolvedPermissionsResponse,
    DescribeFolderResponse,
    DescribeGroupMembershipResponse,
    DescribeGroupResponse,
    DescribeIAMPolicyAssignmentResponse,
    DescribeIngestionResponse,
    DescribeIpRestrictionResponse,
    DescribeNamespaceResponse,
    DescribeRefreshScheduleResponse,
    DescribeTemplateAliasResponse,
    DescribeTemplateDefinitionResponse,
    DescribeTemplatePermissionsResponse,
    DescribeTemplateResponse,
    DescribeThemeAliasResponse,
    DescribeThemePermissionsResponse,
    DescribeThemeResponse,
    DescribeUserResponse,
    DomainNotWhitelistedException,
    GenerateEmbedUrlForAnonymousUserResponse,
    GenerateEmbedUrlForRegisteredUserResponse,
    GetDashboardEmbedUrlResponse,
    GetSessionEmbedUrlResponse,
    IdentityTypeNotSupportedException,
    InternalFailureException,
    InvalidNextTokenException,
    InvalidParameterValueException,
    InvalidRequestException,
    Keys,
    LimitExceededException,
    ListAnalysesResponse,
    ListDashboardsResponse,
    ListDashboardVersionsResponse,
    ListDataSetsResponse,
    ListDataSourcesResponse,
    ListFolderMembersResponse,
    ListFoldersResponse,
    ListGroupMembershipsResponse,
    ListGroupsResponse,
    ListIAMPolicyAssignmentsForUserResponse,
    ListIAMPolicyAssignmentsResponse,
    ListIngestionsResponse,
    ListNamespacesResponse,
    ListRefreshSchedulesResponse,
    ListTagsForResourceResponse,
    ListTemplateAliasesResponse,
    ListTemplatesResponse,
    ListTemplateVersionsResponse,
    ListThemeAliasesResponse,
    ListThemesResponse,
    ListThemeVersionsResponse,
    ListUserGroupsResponse,
    ListUsersResponse,
    MemberType,
    PreconditionNotMetException,
    PutDataSetRefreshPropertiesResponse,
    QuickSightUserNotFoundException,
    RegisterUserResponse,
    ResourceExistsException,
    ResourceNotFoundException,
    ResourcesResourceArnTagsPostRequest,
    ResourceUnavailableException,
    RestoreAnalysisResponse,
    SearchAnalysesResponse,
    SearchDashboardsResponse,
    SearchDataSetsResponse,
    SearchDataSourcesResponse,
    SearchFoldersResponse,
    SearchGroupsResponse,
    SessionLifetimeInMinutesInvalidException,
    TagResourceResponse,
    ThrottlingException,
    Type1,
    UnsupportedPricingPlanException,
    UnsupportedUserEditionException,
    UntagResourceResponse,
    UpdateAccountCustomizationResponse,
    UpdateAccountSettingsResponse,
    UpdateAnalysisPermissionsResponse,
    UpdateAnalysisResponse,
    UpdateDashboardPermissionsResponse,
    UpdateDashboardPublishedVersionResponse,
    UpdateDashboardResponse,
    UpdateDataSetPermissionsResponse,
    UpdateDataSetResponse,
    UpdateDataSourcePermissionsResponse,
    UpdateDataSourceResponse,
    UpdateFolderPermissionsResponse,
    UpdateFolderResponse,
    UpdateGroupResponse,
    UpdateIAMPolicyAssignmentResponse,
    UpdateIpRestrictionResponse,
    UpdatePublicSharingSettingsResponse,
    UpdateRefreshScheduleResponse,
    UpdateTemplateAliasResponse,
    UpdateTemplatePermissionsResponse,
    UpdateTemplateResponse,
    UpdateThemeAliasResponse,
    UpdateThemePermissionsResponse,
    UpdateThemeResponse,
    UpdateUserResponse,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<fullname>Amazon QuickSight API Reference</fullname> <p>Amazon QuickSight is a fully managed, serverless business intelligence service for the Amazon Web Services Cloud that makes it easy to extend data and insights to every user in your organization. This API reference contains documentation for a programming interface that you can use to manage Amazon QuickSight. </p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon QuickSight',
    version='2018-04-01',
    servers=[
        {
            'description': 'The Amazon QuickSight multi-region endpoint',
            'url': 'http://quicksight.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon QuickSight multi-region endpoint',
            'url': 'https://quicksight.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon QuickSight endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://quicksight.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon QuickSight endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://quicksight.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.delete(
    '/account/{AwsAccountId}',
    description=""" Use the <code>DeleteAccountSubscription</code> operation to delete an Amazon QuickSight account. This operation will result in an error message if you have configured your account termination protection settings to <code>True</code>. To change this setting and delete your account, call the <code>UpdateAccountSettings</code> API and set the value of the <code>TerminationProtectionEnabled</code> parameter to <code>False</code>, then make another call to the <code>DeleteAccountSubscription</code> API. """,
    tags=['ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_account_subscription(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/account/{AwsAccountId}',
    description=""" Use the DescribeAccountSubscription operation to receive a description of an Amazon QuickSight account's subscription. A successful API call returns an <code>AccountInfo</code> object that includes an account's name, subscription status, authentication type, edition, and notification email address. """,
    tags=['ip_restriction_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_account_subscription(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/{AwsAccountId}',
    description=""" <p>Creates an Amazon QuickSight account, or subscribes to Amazon QuickSight Q.</p> <p>The Amazon Web Services Region for the account is derived from what is configured in the CLI or SDK. This operation isn't supported in the US East (Ohio) Region, South America (Sao Paulo) Region, or Asia Pacific (Singapore) Region. </p> <p>Before you use this operation, make sure that you can connect to an existing Amazon Web Services account. If you don't have an Amazon Web Services account, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/setting-up-aws-sign-up.html">Sign up for Amazon Web Services</a> in the <i>Amazon QuickSight User Guide</i>. The person who signs up for Amazon QuickSight needs to have the correct Identity and Access Management (IAM) permissions. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/iam-policy-examples.html">IAM Policy Examples for Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>If your IAM policy includes both the <code>Subscribe</code> and <code>CreateAccountSubscription</code> actions, make sure that both actions are set to <code>Allow</code>. If either action is set to <code>Deny</code>, the <code>Deny</code> action prevails and your API call fails.</p> <p>You can't pass an existing IAM role to access other Amazon Web Services services using this API operation. To pass your existing IAM role to Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html#security-create-iam-role">Passing IAM roles to Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>You can't set default resource access on the new account from the Amazon QuickSight API. Instead, add default resource access from the Amazon QuickSight console. For more information about setting default resource access to Amazon Web Services services, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/scoping-policies-defaults.html">Setting default resource access to Amazon Web Services services</a> in the <i>Amazon QuickSight User Guide</i>.</p> """,
    tags=['account_settings_management', 'ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_account_subscription(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountAwsAccountIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}',
    description=""" <p>(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight.</p> <p>A namespace allows you to isolate the Amazon QuickSight users and groups that are registered for that namespace. Users that access the namespace can share assets only with other users or groups in the same namespace. They can't see users and groups in other namespaces. You can create a namespace after your Amazon Web Services account is subscribed to Amazon QuickSight. The namespace must be unique within the Amazon Web Services account. By default, there is a limit of 100 namespaces per Amazon Web Services account. To increase your limit, create a ticket with Amazon Web Services Support. </p> """,
    tags=['ip_restriction_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_namespace(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/analyses',
    description=""" Lists Amazon QuickSight analyses that exist in the specified Amazon Web Services account. """,
    tags=['account_settings_management', 'ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_analyses(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}',
    description=""" <p>Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window during which you can restore the analysis. If you don't specify a recovery window value, the operation defaults to 30 days. Amazon QuickSight attaches a <code>DeletionTime</code> stamp to the response that specifies the end of the recovery window. At the end of the recovery window, Amazon QuickSight deletes the analysis permanently.</p> <p>At any time before recovery window ends, you can use the <code>RestoreAnalysis</code> API operation to remove the <code>DeletionTime</code> stamp and cancel the deletion of the analysis. The analysis remains visible in the API until it's deleted, so you can describe it but you can't make a template from it.</p> <p>An analysis that's scheduled for deletion isn't accessible in the Amazon QuickSight console. To access it in the console, restore it. Deleting an analysis doesn't delete the dashboards that you publish from it.</p> """,
    tags=['account_subscription_management', 'analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_analysis(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    recovery_window_in_days: Optional[conint(ge=7, le=30)] = Query(
        None, alias='recovery-window-in-days'
    ),
    force_delete_without_recovery: Optional[bool] = Query(
        None, alias='force-delete-without-recovery'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}',
    description=""" Provides a summary of the metadata for an analysis. """,
    tags=['analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_analysis(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}',
    description=""" Creates an analysis in Amazon QuickSight. Analyses can be created either from a template or from an <code>AnalysisDefinition</code>. """,
    tags=[
        'analysis_management',
        'account_subscription_management',
        'ip_restriction_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_analysis(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdAnalysesAnalysisIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}',
    description=""" Updates an analysis in Amazon QuickSight """,
    tags=['analysis_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_analysis(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdAnalysesAnalysisIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}/definition',
    description=""" <p>Provides a detailed description of the definition of an analysis.</p> <note> <p>If you do not need to know details about the content of an Analysis, for instance if you are trying to check the status of a recently created or updated Analysis, use the <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeAnalysis.html"> <code>DescribeAnalysis</code> </a> instead. </p> </note> """,
    tags=['analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_analysis_definition(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions',
    description=""" Provides the read and write permissions for an analysis. """,
    tags=['analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_analysis_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions',
    description=""" Updates the read and write permissions for an analysis. """,
    tags=['analysis_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_analysis_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdAnalysesAnalysisIdPermissionsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/customizations',
    description=""" Deletes all Amazon QuickSight customizations in this Amazon Web Services Region for the specified Amazon Web Services account and Amazon QuickSight namespace. """,
    tags=[
        'namespace_management',
        'account_settings_management',
        'ip_restriction_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_account_customization(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: Optional[constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/customizations',
    description=""" <p>Describes the customizations associated with the provided Amazon Web Services account and Amazon Amazon QuickSight namespace in an Amazon Web Services Region. The Amazon QuickSight console evaluates which customizations to apply by running this API operation with the <code>Resolved</code> flag included. </p> <p>To determine what customizations display when you run this command, it can help to visualize the relationship of the entities involved. </p> <ul> <li> <p> <code>Amazon Web Services account</code> - The Amazon Web Services account exists at the top of the hierarchy. It has the potential to use all of the Amazon Web Services Regions and Amazon Web Services Services. When you subscribe to Amazon QuickSight, you choose one Amazon Web Services Region to use as your home Region. That's where your free SPICE capacity is located. You can use Amazon QuickSight in any supported Amazon Web Services Region. </p> </li> <li> <p> <code>Amazon Web Services Region</code> - In each Amazon Web Services Region where you sign in to Amazon QuickSight at least once, Amazon QuickSight acts as a separate instance of the same service. If you have a user directory, it resides in us-east-1, which is the US East (N. Virginia). Generally speaking, these users have access to Amazon QuickSight in any Amazon Web Services Region, unless they are constrained to a namespace. </p> <p>To run the command in a different Amazon Web Services Region, you change your Region settings. If you're using the CLI, you can use one of the following options:</p> <ul> <li> <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-options.html">command line options</a>. </p> </li> <li> <p>Use <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html">named profiles</a>. </p> </li> <li> <p>Run <code>aws configure</code> to change your default Amazon Web Services Region. Use Enter to key the same settings for your keys. For more information, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html">Configuring the CLI</a>.</p> </li> </ul> </li> <li> <p> <code>Namespace</code> - A QuickSight namespace is a partition that contains users and assets (data sources, datasets, dashboards, and so on). To access assets that are in a specific namespace, users and groups must also be part of the same namespace. People who share a namespace are completely isolated from users and assets in other namespaces, even if they are in the same Amazon Web Services account and Amazon Web Services Region.</p> </li> <li> <p> <code>Applied customizations</code> - Within an Amazon Web Services Region, a set of Amazon QuickSight customizations can apply to an Amazon Web Services account or to a namespace. Settings that you apply to a namespace override settings that you apply to an Amazon Web Services account. All settings are isolated to a single Amazon Web Services Region. To apply them in other Amazon Web Services Regions, run the <code>CreateAccountCustomization</code> command in each Amazon Web Services Region where you want to apply the same customizations. </p> </li> </ul> """,
    tags=[
        'account_settings_management',
        'account_customization_management',
        'namespace_management',
        'ip_restriction_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_account_customization(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: Optional[constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)] = None,
    resolved: Optional[bool] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/customizations',
    description=""" <p>Creates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, you can add a custom default theme by using the <code>CreateAccountCustomization</code> or <code>UpdateAccountCustomization</code> API operation. To further customize Amazon QuickSight by removing Amazon QuickSight sample assets and videos for all new users, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-quicksight.html">Customizing Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide.</i> </p> <p>You can create customizations for your Amazon Web Services account or, if you specify a namespace, for a QuickSight namespace instead. Customizations that apply to a namespace always override customizations that apply to an Amazon Web Services account. To find out which customizations apply, use the <code>DescribeAccountCustomization</code> API operation.</p> <p>Before you use the <code>CreateAccountCustomization</code> API operation to add a theme as the namespace default, make sure that you first share the theme with the namespace. If you don't share it with the namespace, the theme isn't visible to your users even if you make it the default theme. To check if the theme is shared, view the current permissions by using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeThemePermissions.html">DescribeThemePermissions</a> </code> API operation. To share the theme, grant permissions by using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateThemePermissions.html">UpdateThemePermissions</a> </code> API operation. </p> """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_account_customization(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: Optional[constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdCustomizationsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/customizations',
    description=""" <p>Updates Amazon QuickSight customizations for the current Amazon Web Services Region. Currently, the only customization that you can use is a theme.</p> <p>You can use customizations for your Amazon Web Services account or, if you specify a namespace, for a Amazon QuickSight namespace instead. Customizations that apply to a namespace override customizations that apply to an Amazon Web Services account. To find out which customizations apply, use the <code>DescribeAccountCustomization</code> API operation. </p> """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'account_settings_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_account_customization(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: Optional[constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdCustomizationsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/dashboards',
    description=""" Lists dashboards in an Amazon Web Services account. """,
    tags=['account_settings_management', 'ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_dashboards(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}',
    description=""" Deletes a dashboard. """,
    tags=['dashboard_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_dashboard(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}',
    description=""" Provides a summary for a dashboard. """,
    tags=['dashboard_management', 'template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_dashboard(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    alias_name: Optional[
        constr(
            pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
        )
    ] = Query(None, alias='alias-name'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}',
    description=""" <p>Creates a dashboard from either a template or directly with a <code>DashboardDefinition</code>. To first create a template, see the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateTemplate.html">CreateTemplate</a> </code> API operation.</p> <p>A dashboard is an entity in Amazon QuickSight that identifies Amazon QuickSight reports, created from analyses. You can share Amazon QuickSight dashboards. With the right permissions, you can create scheduled email reports from them. If you have the correct permissions, you can create a dashboard from a template that exists in a different Amazon Web Services account.</p> """,
    tags=['dashboard_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_dashboard(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDashboardsDashboardIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}',
    description=""" <p>Updates a dashboard in an Amazon Web Services account.</p> <note> <p>Updating a Dashboard creates a new dashboard version but does not immediately publish the new version. You can update the published version of a dashboard by using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateDashboardPublishedVersion.html">UpdateDashboardPublishedVersion</a> </code> API operation.</p> </note> """,
    tags=['dashboard_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_dashboard(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDashboardsDashboardIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}/definition',
    description=""" <p>Provides a detailed description of the definition of a dashboard.</p> <note> <p>If you do not need to know details about the content of a dashboard, for instance if you are trying to check the status of a recently created or updated dashboard, use the <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeDashboard.html"> <code>DescribeDashboard</code> </a> instead. </p> </note> """,
    tags=['dashboard_management', 'template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_dashboard_definition(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    alias_name: Optional[
        constr(
            pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
        )
    ] = Query(None, alias='alias-name'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url#creds-type',
    description=""" <p>Generates a temporary session URL and authorization code(bearer token) that you can use to embed an Amazon QuickSight read-only dashboard in your website or application. Before you use this command, make sure that you have configured the dashboards and permissions. </p> <p>Currently, you can use <code>GetDashboardEmbedURL</code> only from the server, not from the user's browser. The following rules apply to the generated URL:</p> <ul> <li> <p>They must be used together.</p> </li> <li> <p>They can be used one time only.</p> </li> <li> <p>They are valid for 5 minutes after you run this command.</p> </li> <li> <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p> </li> <li> <p>The resulting user session is valid for 15 minutes (default) up to 10 hours (maximum). You can use the optional <code>SessionLifetimeInMinutes</code> parameter to customize session duration.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics-deprecated.html">Embedding Analytics Using GetDashboardEmbedUrl</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p> """,
    tags=['dashboard_management', 'session_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_dashboard_embed_url(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    creds_type: CredsType = Query(..., alias='creds-type'),
    session_lifetime: Optional[conint(ge=15, le=600)] = Query(
        None, alias='session-lifetime'
    ),
    undo_redo_disabled: Optional[bool] = Query(None, alias='undo-redo-disabled'),
    reset_disabled: Optional[bool] = Query(None, alias='reset-disabled'),
    state_persistence_enabled: Optional[bool] = Query(
        None, alias='state-persistence-enabled'
    ),
    user_arn: Optional[str] = Query(None, alias='user-arn'),
    namespace: Optional[constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)] = None,
    additional_dashboard_ids: Optional[AdditionalDashboardIds] = Query(
        None, alias='additional-dashboard-ids'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions',
    description=""" Describes read and write permissions for a dashboard. """,
    tags=['dashboard_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_dashboard_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions',
    description=""" Updates read and write permissions on a dashboard. """,
    tags=[
        'dashboard_management',
        'account_settings_management',
        'iam_policy_assignment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_dashboard_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDashboardsDashboardIdPermissionsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions',
    description=""" Lists all the versions of the dashboards in the Amazon QuickSight subscription. """,
    tags=['dashboard_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_dashboard_versions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}',
    description=""" Updates the published version of a dashboard. """,
    tags=['dashboard_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_dashboard_published_version(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    dashboard_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='DashboardId'
    ),
    version_number: conint(ge=1) = Path(..., alias='VersionNumber'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets',
    description=""" <p>Lists all of the datasets belonging to the current Amazon Web Services account in an Amazon Web Services Region.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/*</code>.</p> """,
    tags=[
        'account_subscription_management',
        'data_source_management',
        'ip_restriction_management',
        'account_settings_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_sets(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/data-sets',
    description=""" Creates a dataset. This operation doesn't support datasets that include uploaded files as a source. """,
    tags=[
        'account_subscription_management',
        'account_customization_management',
        'account_settings_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_data_set(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}',
    description=""" Deletes a dataset. """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_data_set(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}',
    description=""" Describes a dataset. This operation doesn't support datasets that include uploaded files as a source. """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_data_set(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}',
    description=""" Updates a dataset. This operation doesn't support datasets that include uploaded files as a source. Partial updates are not supported by this operation. """,
    tags=['data_set_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_data_set(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsDataSetIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions',
    description=""" Lists the history of SPICE ingestions for a dataset. """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_ingestions(
    data_set_id: str = Path(..., alias='DataSetId'),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}',
    description=""" Cancels an ongoing ingestion of data into SPICE. """,
    tags=['data_ingestion_management', 'data_set_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def cancel_ingestion(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    ingestion_id: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=128
    ) = Path(..., alias='IngestionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}',
    description=""" Describes a SPICE ingestion. """,
    tags=['data_ingestion_management', 'data_set_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_ingestion(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    ingestion_id: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=128
    ) = Path(..., alias='IngestionId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}',
    description=""" <p>Creates and starts a new SPICE ingestion for a dataset. You can manually refresh datasets in an Enterprise edition account 32 times in a 24-hour period. You can manually refresh datasets in a Standard edition account 8 times in a 24-hour period. Each 24-hour period is measured starting 24 hours before the current date and time.</p> <p>Any ingestions operating on tagged datasets inherit the same tags automatically for use in access control. For an example, see <a href="http://aws.amazon.com/premiumsupport/knowledge-center/iam-ec2-resource-tags/">How do I create an IAM policy to control access to Amazon EC2 resources using tags?</a> in the Amazon Web Services Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion resource.</p> """,
    tags=['data_ingestion_management', 'data_set_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_ingestion(
    data_set_id: str = Path(..., alias='DataSetId'),
    ingestion_id: constr(
        pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=128
    ) = Path(..., alias='IngestionId'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsDataSetIdIngestionsIngestionIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions',
    description=""" <p>Describes the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p> """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_data_set_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions',
    description=""" <p>Updates the permissions on a dataset.</p> <p>The permissions resource is <code>arn:aws:quicksight:region:aws-account-id:dataset/data-set-id</code>.</p> """,
    tags=['data_set_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_data_set_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsDataSetIdPermissionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties',
    description=""" Deletes the dataset refresh properties of the dataset. """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_data_set_refresh_properties(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties',
    description=""" Describes the refresh properties of a dataset. """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_data_set_refresh_properties(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties',
    description=""" Creates or updates the dataset refresh properties for the dataset. """,
    tags=['data_set_management', 'refresh_schedule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_data_set_refresh_properties(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsDataSetIdRefreshPropertiesPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules',
    description=""" Lists the refresh schedules of a dataset. Each dataset can have up to 5 schedules.  """,
    tags=['data_set_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_refresh_schedules(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules',
    description=""" Creates a refresh schedule for a dataset. You can create up to 5 different schedules for a single dataset. """,
    tags=['refresh_schedule_management', 'data_set_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_refresh_schedule(
    data_set_id: str = Path(..., alias='DataSetId'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsDataSetIdRefreshSchedulesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules',
    description=""" Updates a refresh schedule for a dataset. """,
    tags=['refresh_schedule_management', 'data_set_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_refresh_schedule(
    data_set_id: str = Path(..., alias='DataSetId'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSetsDataSetIdRefreshSchedulesPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}',
    description=""" Deletes a refresh schedule from a dataset. """,
    tags=['data_set_management', 'refresh_schedule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_refresh_schedule(
    data_set_id: str = Path(..., alias='DataSetId'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    schedule_id: str = Path(..., alias='ScheduleId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}',
    description=""" Provides a summary of a refresh schedule. """,
    tags=['data_set_management', 'refresh_schedule_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_refresh_schedule(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_set_id: str = Path(..., alias='DataSetId'),
    schedule_id: str = Path(..., alias='ScheduleId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sources',
    description=""" Lists data sources in current Amazon Web Services Region that belong to this Amazon Web Services account. """,
    tags=['account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_data_sources(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/data-sources',
    description=""" Creates a data source. """,
    tags=['ip_restriction_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_data_source(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSourcesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/data-sources/{DataSourceId}',
    description=""" Deletes the data source permanently. This operation breaks all the datasets that reference the deleted data source. """,
    tags=['data_source_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_data_source(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_source_id: str = Path(..., alias='DataSourceId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sources/{DataSourceId}',
    description=""" Describes a data source. """,
    tags=['data_source_management', 'data_ingestion_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_data_source(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_source_id: str = Path(..., alias='DataSourceId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/data-sources/{DataSourceId}',
    description=""" Updates a data source. """,
    tags=['data_source_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_data_source(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_source_id: str = Path(..., alias='DataSourceId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSourcesDataSourceIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions',
    description=""" Describes the resource permissions for a data source. """,
    tags=['data_source_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_data_source_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_source_id: str = Path(..., alias='DataSourceId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions',
    description=""" Updates the permissions to a data source. """,
    tags=['data_source_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_data_source_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    data_source_id: str = Path(..., alias='DataSourceId'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdDataSourcesDataSourceIdPermissionsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/embed-url/anonymous-user',
    description=""" <p>Generates an embed URL that you can use to embed an Amazon QuickSight dashboard or visual in your website, without having to register any reader users. Before you use this action, make sure that you have configured the dashboards and permissions.</p> <p>The following rules apply to the generated URL:</p> <ul> <li> <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p> </li> <li> <p>The URL validity period should not be confused with the actual session lifetime that can be customized using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForAnonymousUser.html#QS-GenerateEmbedUrlForAnonymousUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a> </code> parameter. The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p> </li> <li> <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p> """,
    tags=['embed_url_generation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def generate_embed_url_for_anonymous_user(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdEmbedUrlAnonymousUserPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/embed-url/registered-user',
    description=""" <p>Generates an embed URL that you can use to embed an Amazon QuickSight experience in your website. This action can be used for any type of user registered in an Amazon QuickSight account. Before you use this action, make sure that you have configured the relevant Amazon QuickSight resource and permissions.</p> <p>The following rules apply to the generated URL:</p> <ul> <li> <p>It contains a temporary bearer token. It is valid for 5 minutes after it is generated. Once redeemed within this period, it cannot be re-used again.</p> </li> <li> <p>The URL validity period should not be confused with the actual session lifetime that can be customized using the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_GenerateEmbedUrlForRegisteredUser.html#QS-GenerateEmbedUrlForRegisteredUser-request-SessionLifetimeInMinutes">SessionLifetimeInMinutes</a> </code> parameter.</p> <p>The resulting user session is valid for 15 minutes (minimum) to 10 hours (maximum). The default session duration is 10 hours.</p> </li> <li> <p>You are charged only when the URL is used or there is interaction with Amazon QuickSight.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedded Analytics</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>For more information about the high-level steps for embedding and for an interactive demo of the ways you can customize embedding, visit the <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-portal.html">Amazon QuickSight Developer Portal</a>.</p> """,
    tags=['embed_url_generation'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def generate_embed_url_for_registered_user(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdEmbedUrlRegisteredUserPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/folders',
    description=""" Lists all folders in an account. """,
    tags=['account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_folders(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/folders/{FolderId}',
    description=""" Deletes an empty folder. """,
    tags=['folder_management', 'folder_permissions_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_folder(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/folders/{FolderId}',
    description=""" Describes a folder. """,
    tags=[
        'folder_management',
        'folder_permissions_management',
        'ip_restriction_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_folder(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/folders/{FolderId}',
    description=""" Creates an empty shared folder. """,
    tags=[
        'folder_management',
        'folder_permissions_management',
        'folder_membership_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_folder(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdFoldersFolderIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/folders/{FolderId}',
    description=""" Updates the name of a folder. """,
    tags=[
        'folder_management',
        'folder_permissions_management',
        'account_subscription_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_folder(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdFoldersFolderIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/folders/{FolderId}/members',
    description=""" List all assets (<code>DASHBOARD</code>, <code>ANALYSIS</code>, and <code>DATASET</code>) in a folder.  """,
    tags=['folder_management', 'folder_permissions_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_folder_members(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}',
    description=""" Removes an asset, such as a dashboard, analysis, or dataset, from a folder. """,
    tags=['folder_membership_management', 'folder_permissions_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_folder_membership(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    member_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='MemberId'
    ),
    member_type: MemberType = Path(..., alias='MemberType'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}',
    description=""" Adds an asset, such as a dashboard, analysis, or dataset into a folder. """,
    tags=['folder_membership_management', 'folder_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_folder_membership(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    member_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='MemberId'
    ),
    member_type: MemberType = Path(..., alias='MemberType'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/folders/{FolderId}/permissions',
    description=""" Describes permissions for a folder. """,
    tags=[
        'folder_management',
        'folder_permissions_management',
        'folder_membership_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_folder_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/folders/{FolderId}/permissions',
    description=""" Updates permissions of a folder. """,
    tags=['folder_permissions_management', 'folder_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_folder_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdFoldersFolderIdPermissionsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/folders/{FolderId}/resolved-permissions',
    description=""" Describes the folder resolved permissions. Permissions consists of both folder direct permissions and the inherited permissions from the ancestor folders. """,
    tags=[
        'folder_management',
        'folder_permissions_management',
        'folder_membership_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_folder_resolved_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    folder_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048) = Path(
        ..., alias='FolderId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/ip-restriction',
    description=""" Provides a summary and status of IP rules. """,
    tags=['ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_ip_restriction(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/ip-restriction',
    description=""" Updates the content and status of IP rules. To use this operation, you need to provide the entire map of rules. You can use the <code>DescribeIpRestriction</code> operation to get the current rule map. """,
    tags=['ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_ip_restriction(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdIpRestrictionPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}',
    description=""" Deletes an existing IAM policy assignment. """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_i_a_m_policy_assignment(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    assignment_name: constr(
        pattern=r'(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$', min_length=1
    ) = Path(..., alias='AssignmentName'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces',
    description=""" Lists the namespaces for the specified Amazon Web Services account. This operation doesn't list deleted namespaces. """,
    tags=['account_settings_management', 'ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_namespaces(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}',
    description=""" Deletes a namespace and the users and groups that are associated with the namespace. This is an asynchronous process. Assets including dashboards, analyses, datasets and data sources are not deleted. To delete these assets, you use the API operations for the relevant asset.  """,
    tags=[
        'namespace_management',
        'account_settings_management',
        'ip_restriction_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_namespace(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}',
    description=""" Describes the current namespace. """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_namespace(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups',
    description=""" Lists all user groups in Amazon QuickSight.  """,
    tags=['namespace_management', 'account_customization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_groups(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups',
    description=""" <p>Use the <code>CreateGroup</code> operation to create a group in Amazon QuickSight. You can create up to 10,000 groups in a namespace. If you want to create more than 10,000 groups in a namespace, contact AWS Support.</p> <p>The permissions resource is <code>arn:aws:quicksight:&lt;your-region&gt;:<i>&lt;relevant-aws-account-id&gt;</i>:group/default/<i>&lt;group-name&gt;</i> </code>.</p> <p>The response is a group object.</p> """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_group(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceGroupsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups-search',
    description=""" Use the <code>SearchGroups</code> operation to search groups in a specified Amazon QuickSight namespace using the supplied filters. """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_groups(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceGroupsSearchPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}',
    description=""" Removes a user group from Amazon QuickSight.  """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_group(
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}',
    description=""" Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN).  """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_group(
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}',
    description=""" Changes a group description.  """,
    tags=['namespace_management', 'group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_group(
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceGroupsGroupNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members',
    description=""" Lists member users in a group. """,
    tags=[
        'namespace_management',
        'group_management',
        'account_customization_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_group_memberships(
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}',
    description=""" Removes a user from a group so that the user is no longer a member of the group. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'group_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_group_membership(
    member_name: constr(
        pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=256
    ) = Path(..., alias='MemberName'),
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}',
    description=""" Use the <code>DescribeGroupMembership</code> operation to determine if a user is a member of the specified group. If the user exists and is a member of the specified group, an associated <code>GroupMember</code> object is returned. """,
    tags=['group_management', 'user_management', 'iam_policy_assignment_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_group_membership(
    member_name: constr(
        pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=256
    ) = Path(..., alias='MemberName'),
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}',
    description=""" Adds an Amazon QuickSight user to an Amazon QuickSight group.  """,
    tags=['group_management', 'folder_membership_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_group_membership(
    member_name: constr(
        pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=256
    ) = Path(..., alias='MemberName'),
    group_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='GroupName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments',
    description=""" Lists IAM policy assignments in the current Amazon QuickSight account. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'iam_policy_assignment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_i_a_m_policy_assignments(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsGetRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/',
    description=""" Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name (ARN). This policy assignment is attached to the specified groups or users of Amazon QuickSight. Assignment names are unique per Amazon Web Services account. To avoid overwriting rules in other namespaces, use assignment names that are unique. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'iam_policy_assignment_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_i_a_m_policy_assignment(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}',
    description=""" Describes an existing IAM policy assignment, as specified by the assignment name. """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_i_a_m_policy_assignment(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    assignment_name: constr(
        pattern=r'(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$', min_length=1
    ) = Path(..., alias='AssignmentName'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}',
    description=""" Updates an existing IAM policy assignment. This operation updates only the optional parameter or parameters that are specified in the request. This overwrites all of the users included in <code>Identities</code>.  """,
    tags=[
        'iam_policy_assignment_management',
        'namespace_management',
        'account_customization_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_i_a_m_policy_assignment(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    assignment_name: constr(
        pattern=r'(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$', min_length=1
    ) = Path(..., alias='AssignmentName'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsAssignmentNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}',
    description=""" Deletes a user identified by its principal ID.  """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_user_by_principal_id(
    principal_id: str = Path(..., alias='PrincipalId'),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users',
    description=""" Returns a list of all of the Amazon QuickSight users belonging to this account.  """,
    tags=['account_customization_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_users(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users',
    description=""" Creates an Amazon QuickSight user whose identity is associated with the Identity and Access Management (IAM) identity or role specified in the request. When you register a new user from the Amazon QuickSight API, Amazon QuickSight generates a registration URL. The user accesses this registration URL to create their account. Amazon QuickSight doesn't send a registration email to users who are registered from the Amazon QuickSight API. If you want new users to receive a registration email, then add those users in the Amazon QuickSight console. For more information on registering a new user in the Amazon QuickSight console, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/managing-users.html#inviting-users"> Inviting users to access Amazon QuickSight</a>. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'account_settings_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def register_user(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceUsersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}',
    description=""" Deletes the Amazon QuickSight user that is associated with the identity of the IAM user or role that's making the call. The IAM user isn't deleted as a result of this call.  """,
    tags=['user_management', 'namespace_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_user(
    user_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='UserName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}',
    description=""" Returns information about a user, given the user name.  """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_user(
    user_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='UserName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}',
    description=""" Updates an Amazon QuickSight user. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_user(
    user_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='UserName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdNamespacesNamespaceUsersUserNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups',
    description=""" Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_user_groups(
    user_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='UserName'
    ),
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments',
    description=""" Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the IAM policies assigned to the specified user and group or groups that the user belongs to. """,
    tags=[
        'account_customization_management',
        'namespace_management',
        'user_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_i_a_m_policy_assignments_for_user(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    user_name: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Path(
        ..., alias='UserName'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_results: Optional[conint(ge=1, le=100)] = Query(None, alias='max-results'),
    namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Path(
        ..., alias='Namespace'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/public-sharing-settings',
    description=""" <p>Use the <code>UpdatePublicSharingSettings</code> operation to turn on or turn off the public sharing settings of an Amazon QuickSight dashboard.</p> <p>To use this operation, turn on session capacity pricing for your Amazon QuickSight account.</p> <p>Before you can turn on public sharing on your account, make sure to give public sharing permissions to an administrative user in the Identity and Access Management (IAM) console. For more information on using IAM with Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/security_iam_service-with-iam.html">Using Amazon QuickSight with IAM</a> in the <i>Amazon QuickSight User Guide</i>.</p> """,
    tags=['public_sharing_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_public_sharing_settings(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdPublicSharingSettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}',
    description=""" Restores an analysis. """,
    tags=['analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def restore_analysis(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    analysis_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='AnalysisId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/search/analyses',
    description=""" <p>Searches for analyses that belong to the user specified in the filter.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p> </note> """,
    tags=['analysis_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_analyses(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdSearchAnalysesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/search/dashboards',
    description=""" <p>Searches for dashboards that belong to a user. </p> <note> <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p> </note> """,
    tags=[
        'account_settings_management',
        'account_subscription_management',
        'ip_restriction_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_dashboards(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdSearchDashboardsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/search/data-sets',
    description=""" Use the <code>SearchDataSets</code> operation to search for datasets that belong to an account. """,
    tags=[
        'account_subscription_management',
        'ip_restriction_management',
        'account_settings_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_data_sets(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdSearchDataSetsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/search/data-sources',
    description=""" Use the <code>SearchDataSources</code> operation to search for data sources that belong to an account. """,
    tags=['account_settings_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_data_sources(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    next_token: Optional[str] = Query(None, alias='NextToken'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdSearchDataSourcesPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/search/folders',
    description=""" Searches the subfolders in a folder. """,
    tags=['account_settings_management', 'ip_restriction_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_folders(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdSearchFoldersPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/session-embed-url',
    description=""" <p>Generates a session URL and authorization code that you can use to embed the Amazon Amazon QuickSight console in your web server code. Use <code>GetSessionEmbedUrl</code> where you want to provide an authoring portal that allows users to create data sources, datasets, analyses, and dashboards. The users who access an embedded Amazon QuickSight console need belong to the author or admin security cohort. If you want to restrict permissions to some of these features, add a custom permissions profile to the user with the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> API operation. Use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_RegisterUser.html">RegisterUser</a> </code> API operation to add a new user with a custom permission profile attached. For more information, see the following sections in the <i>Amazon QuickSight User Guide</i>:</p> <ul> <li> <p> <a href="https://docs.aws.amazon.com/quicksight/latest/user/embedded-analytics.html">Embedding Analytics</a> </p> </li> <li> <p> <a href="https://docs.aws.amazon.com/quicksight/latest/user/customizing-permissions-to-the-quicksight-console.html">Customizing Access to the Amazon QuickSight Console</a> </p> </li> </ul> """,
    tags=['session_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_session_embed_url(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    entry_point: Optional[constr(min_length=1, max_length=1000)] = Query(
        None, alias='entry-point'
    ),
    session_lifetime: Optional[conint(ge=15, le=600)] = Query(
        None, alias='session-lifetime'
    ),
    user_arn: Optional[str] = Query(None, alias='user-arn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/settings',
    description=""" Describes the settings that were used when your Amazon QuickSight subscription was first created in this Amazon Web Services account. """,
    tags=['ip_restriction_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_account_settings(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/settings',
    description=""" Updates the Amazon QuickSight settings in your Amazon Web Services account. """,
    tags=['ip_restriction_management', 'account_settings_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_account_settings(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdSettingsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates',
    description=""" Lists all the templates in the current Amazon QuickSight account. """,
    tags=[
        'account_subscription_management',
        'account_settings_management',
        'resource_tagging',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_templates(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_result: Optional[conint(ge=1, le=100)] = Query(None, alias='max-result'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/templates/{TemplateId}',
    description=""" Deletes a template. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_template(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates/{TemplateId}',
    description=""" Describes a template's metadata. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_template(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    alias_name: Optional[
        constr(
            pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
        )
    ] = Query(None, alias='alias-name'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/templates/{TemplateId}',
    description=""" <p>Creates a template either from a <code>TemplateDefinition</code> or from an existing Amazon QuickSight analysis or template. You can use the resulting template to create additional dashboards, templates, or analyses.</p> <p>A <i>template</i> is an entity in Amazon QuickSight that encapsulates the metadata required to create an analysis and that you can use to create s dashboard. A template adds a layer of abstraction by using placeholders to replace the dataset associated with the analysis. You can use templates to create dashboards by replacing dataset placeholders with datasets that follow the same schema that was used to create the source analysis and template.</p> """,
    tags=['account_subscription_management', 'template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_template(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdTemplatesTemplateIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/templates/{TemplateId}',
    description=""" Updates a template from an existing Amazon QuickSight analysis or another template. """,
    tags=['template_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_template(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdTemplatesTemplateIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/aliases',
    description=""" Lists all the aliases of a template. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_template_aliases(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_result: Optional[conint(ge=1, le=100)] = Query(None, alias='max-result'),
    max_results: Optional[str] = Query(None, alias='MaxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}',
    description=""" Deletes the item that the specified template alias points to. If you provide a specific alias, you delete the version of the template that the alias points to. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_template_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}',
    description=""" Describes the template alias for a template. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_template_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}',
    description=""" Creates a template alias for a template. """,
    tags=['template_management', 'account_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_template_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdTemplatesTemplateIdAliasesAliasNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}',
    description=""" Updates the template alias of a template. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_template_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdTemplatesTemplateIdAliasesAliasNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/definition',
    description=""" <p>Provides a detailed description of the definition of a template.</p> <note> <p>If you do not need to know details about the content of a template, for instance if you are trying to check the status of a recently created or updated template, use the <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeTemplate.html"> <code>DescribeTemplate</code> </a> instead. </p> </note> """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_template_definition(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    alias_name: Optional[
        constr(
            pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
        )
    ] = Query(None, alias='alias-name'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/permissions',
    description=""" Describes read and write permissions on a template. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_template_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/permissions',
    description=""" Updates the resource permissions for a template. """,
    tags=[
        'account_subscription_management',
        'account_customization_management',
        'template_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_template_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdTemplatesTemplateIdPermissionsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/templates/{TemplateId}/versions',
    description=""" Lists all the versions of the templates in the current Amazon QuickSight account. """,
    tags=['template_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_template_versions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    template_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='TemplateId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/themes',
    description=""" Lists all the themes in the current Amazon Web Services account. """,
    tags=[
        'account_subscription_management',
        'ip_restriction_management',
        'account_settings_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_themes(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    type: Optional[Type1] = None,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/themes/{ThemeId}',
    description=""" Deletes a theme. """,
    tags=[
        'theme_management',
        'theme_version_management',
        'theme_permissions_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_theme(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/themes/{ThemeId}',
    description=""" Describes a theme. """,
    tags=[
        'theme_management',
        'theme_alias_management',
        'theme_version_management',
        'theme_permissions_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_theme(
    aws_account_id: constr(pattern=r'^(aws|[0-9]{12})$') = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    version_number: Optional[conint(ge=1)] = Query(None, alias='version-number'),
    alias_name: Optional[
        constr(
            pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
        )
    ] = Query(None, alias='alias-name'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/themes/{ThemeId}',
    description=""" <p>Creates a theme.</p> <p>A <i>theme</i> is set of configuration options for color and layout. Themes apply to analyses and dashboards. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/themes-in-quicksight.html">Using Themes in Amazon QuickSight</a> in the <i>Amazon QuickSight User Guide</i>.</p> """,
    tags=['theme_management', 'theme_alias_management', 'theme_permissions_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_theme(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdThemesThemeIdPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/themes/{ThemeId}',
    description=""" Updates a theme. """,
    tags=[
        'theme_management',
        'theme_alias_management',
        'theme_permissions_management',
        'theme_version_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_theme(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdThemesThemeIdPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/aliases',
    description=""" Lists all the aliases of a theme. """,
    tags=[
        'theme_management',
        'theme_permissions_management',
        'theme_version_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_theme_aliases(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    next_token: Optional[str] = Query(None, alias='next-token'),
    max_result: Optional[conint(ge=1, le=100)] = Query(None, alias='max-result'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}',
    description=""" Deletes the version of the theme that the specified theme alias points to. If you provide a specific alias, you delete the version of the theme that the alias points to. """,
    tags=['theme_alias_management', 'theme_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_theme_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}',
    description=""" Describes the alias for a theme. """,
    tags=['theme_management', 'theme_alias_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_theme_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}',
    description=""" Creates a theme alias for a theme. """,
    tags=['theme_management', 'theme_alias_management', 'theme_permissions_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_theme_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdThemesThemeIdAliasesAliasNamePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}',
    description=""" Updates an alias of a theme. """,
    tags=['theme_alias_management', 'theme_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_theme_alias(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    alias_name: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    ) = Path(..., alias='AliasName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdThemesThemeIdAliasesAliasNamePutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/permissions',
    description=""" Describes the read and write permissions for a theme. """,
    tags=[
        'theme_management',
        'theme_alias_management',
        'theme_version_management',
        'theme_permissions_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_theme_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/permissions',
    description=""" <p>Updates the resource permissions for a theme. Permissions apply to the action to grant or revoke permissions on, for example <code>"quicksight:DescribeTheme"</code>.</p> <p>Theme permissions apply in groupings. Valid groupings include the following for the three levels of permissions, which are user, owner, or no permissions: </p> <ul> <li> <p>User</p> <ul> <li> <p> <code>"quicksight:DescribeTheme"</code> </p> </li> <li> <p> <code>"quicksight:DescribeThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeAliases"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeVersions"</code> </p> </li> </ul> </li> <li> <p>Owner</p> <ul> <li> <p> <code>"quicksight:DescribeTheme"</code> </p> </li> <li> <p> <code>"quicksight:DescribeThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeAliases"</code> </p> </li> <li> <p> <code>"quicksight:ListThemeVersions"</code> </p> </li> <li> <p> <code>"quicksight:DeleteTheme"</code> </p> </li> <li> <p> <code>"quicksight:UpdateTheme"</code> </p> </li> <li> <p> <code>"quicksight:CreateThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:DeleteThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:UpdateThemeAlias"</code> </p> </li> <li> <p> <code>"quicksight:UpdateThemePermissions"</code> </p> </li> <li> <p> <code>"quicksight:DescribeThemePermissions"</code> </p> </li> </ul> </li> <li> <p>To specify no permissions, omit the permissions list.</p> </li> </ul> """,
    tags=['theme_management', 'theme_permissions_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_theme_permissions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: AccountsAwsAccountIdThemesThemeIdPermissionsPutRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/accounts/{AwsAccountId}/themes/{ThemeId}/versions',
    description=""" Lists all the versions of the themes in the current Amazon Web Services account. """,
    tags=[
        'theme_management',
        'theme_permissions_management',
        'theme_version_management',
        'theme_alias_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_theme_versions(
    aws_account_id: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12) = Path(
        ..., alias='AwsAccountId'
    ),
    theme_id: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Path(
        ..., alias='ThemeId'
    ),
    next_token: Union[
        Optional[str], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='next-token'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='max-results'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/resources/{ResourceArn}/tags',
    description=""" Lists the tags assigned to a resource. """,
    tags=['resource_tagging'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    resource_arn: str = Path(..., alias='ResourceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/resources/{ResourceArn}/tags',
    description=""" <p>Assigns one or more tags (key-value pairs) to the specified Amazon QuickSight resource. </p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values. You can use the <code>TagResource</code> operation with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource. Amazon QuickSight supports tagging on data set, data source, dashboard, and template. </p> <p>Tagging for Amazon QuickSight works in a similar way to tagging for other Amazon Web Services services, except for the following:</p> <ul> <li> <p>You can't use tags to track costs for Amazon QuickSight. This isn't possible because you can't tag the resources that Amazon QuickSight costs are based on, for example Amazon QuickSight storage capacity (SPICE), number of users, type of users, and usage metrics.</p> </li> <li> <p>Amazon QuickSight doesn't currently support the tag editor for Resource Groups.</p> </li> </ul> """,
    tags=['resource_tagging'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    resource_arn: str = Path(..., alias='ResourceArn'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: ResourcesResourceArnTagsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/resources/{ResourceArn}/tags#keys',
    description=""" Removes a tag or tags from a resource. """,
    tags=['resource_tagging'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    resource_arn: str = Path(..., alias='ResourceArn'),
    keys: Keys = ...,
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
