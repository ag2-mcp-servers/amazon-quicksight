# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:07:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class AccessDeniedException(RootModel[Any]):
    root: Any


class AliasName(
    RootModel[
        constr(
            pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'[\w\-]+|(\$LATEST)|(\$PUBLISHED)', min_length=1, max_length=2048
    )


class AnalysisErrorType(Enum):
    ACCESS_DENIED = 'ACCESS_DENIED'
    SOURCE_NOT_FOUND = 'SOURCE_NOT_FOUND'
    DATA_SET_NOT_FOUND = 'DATA_SET_NOT_FOUND'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    PARAMETER_VALUE_INCOMPATIBLE = 'PARAMETER_VALUE_INCOMPATIBLE'
    PARAMETER_TYPE_INVALID = 'PARAMETER_TYPE_INVALID'
    PARAMETER_NOT_FOUND = 'PARAMETER_NOT_FOUND'
    COLUMN_TYPE_MISMATCH = 'COLUMN_TYPE_MISMATCH'
    COLUMN_GEOGRAPHIC_ROLE_MISMATCH = 'COLUMN_GEOGRAPHIC_ROLE_MISMATCH'
    COLUMN_REPLACEMENT_MISSING = 'COLUMN_REPLACEMENT_MISSING'


class AnalysisFilterAttribute(Enum):
    QUICKSIGHT_USER = 'QUICKSIGHT_USER'
    QUICKSIGHT_VIEWER_OR_OWNER = 'QUICKSIGHT_VIEWER_OR_OWNER'
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 'DIRECT_QUICKSIGHT_VIEWER_OR_OWNER'
    QUICKSIGHT_OWNER = 'QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_OWNER = 'DIRECT_QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_SOLE_OWNER = 'DIRECT_QUICKSIGHT_SOLE_OWNER'
    ANALYSIS_NAME = 'ANALYSIS_NAME'


class AnalysisName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class AnchorOption(Enum):
    NOW = 'NOW'


class ArcThickness(Enum):
    SMALL = 'SMALL'
    MEDIUM = 'MEDIUM'
    LARGE = 'LARGE'
    WHOLE = 'WHOLE'


class ArcThicknessOptions(Enum):
    SMALL = 'SMALL'
    MEDIUM = 'MEDIUM'
    LARGE = 'LARGE'


class Arn(RootModel[str]):
    root: str


class ArnList(RootModel[List[Arn]]):
    root: List[Arn]


class AssignmentStatus(Enum):
    ENABLED = 'ENABLED'
    DRAFT = 'DRAFT'
    DISABLED = 'DISABLED'


class AuthenticationMethodOption(Enum):
    IAM_AND_QUICKSIGHT = 'IAM_AND_QUICKSIGHT'
    IAM_ONLY = 'IAM_ONLY'
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'


class AwsAccountId(
    RootModel[constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)


class AwsAndAccountId(RootModel[constr(pattern=r'^(aws|[0-9]{12})$')]):
    root: constr(pattern=r'^(aws|[0-9]{12})$')


class AxisBinding(Enum):
    PRIMARY_YAXIS = 'PRIMARY_YAXIS'
    SECONDARY_YAXIS = 'SECONDARY_YAXIS'


class AxisDisplayDataDrivenRange(BaseModel):
    pass


class BarChartOrientation(Enum):
    HORIZONTAL = 'HORIZONTAL'
    VERTICAL = 'VERTICAL'


class BarsArrangement(Enum):
    CLUSTERED = 'CLUSTERED'
    STACKED = 'STACKED'
    STACKED_PERCENT = 'STACKED_PERCENT'


class BaseMapStyleType(Enum):
    LIGHT_GRAY = 'LIGHT_GRAY'
    DARK_GRAY = 'DARK_GRAY'
    STREET = 'STREET'
    IMAGERY = 'IMAGERY'


class BinCountLimit(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class BinCountValue(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class BinWidthValue(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class Boolean(RootModel[bool]):
    root: bool


class BooleanObject(RootModel[bool]):
    root: bool


class BorderStyle(BaseModel):
    Show: Optional[Boolean] = None


class BoxPlotFillStyle(Enum):
    SOLID = 'SOLID'
    TRANSPARENT = 'TRANSPARENT'


class BoxPlotStyleOptions(BaseModel):
    FillStyle: Optional[BoxPlotFillStyle] = None


class CIDR(
    RootModel[
        constr(
            pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[1-9]))$'
        )
    ]
):
    root: constr(
        pattern=r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[1-9]))$'
    )


class CancelIngestionRequest(BaseModel):
    pass


class Catalog(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class CategoricalAggregationFunction(Enum):
    COUNT = 'COUNT'
    DISTINCT_COUNT = 'DISTINCT_COUNT'


class CategoryFilterMatchOperator(Enum):
    EQUALS = 'EQUALS'
    DOES_NOT_EQUAL = 'DOES_NOT_EQUAL'
    CONTAINS = 'CONTAINS'
    DOES_NOT_CONTAIN = 'DOES_NOT_CONTAIN'
    STARTS_WITH = 'STARTS_WITH'
    ENDS_WITH = 'ENDS_WITH'


class CategoryFilterSelectAllOptions(Enum):
    FILTER_ALL_VALUES = 'FILTER_ALL_VALUES'


class CategoryValue(RootModel[constr(max_length=512)]):
    root: constr(max_length=512)


class CategoryValueList(RootModel[List[CategoryValue]]):
    root: List[CategoryValue] = Field(..., max_length=100000)


class ClusterId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ColorFillType(Enum):
    DISCRETE = 'DISCRETE'
    GRADIENT = 'GRADIENT'


class ColumnDataType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    DECIMAL = 'DECIMAL'
    DATETIME = 'DATETIME'


class ColumnDescriptiveText(RootModel[constr(min_length=0, max_length=500)]):
    root: constr(min_length=0, max_length=500)


class ColumnGroupName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ColumnId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ColumnName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class ColumnRole(Enum):
    DIMENSION = 'DIMENSION'
    MEASURE = 'MEASURE'


class ColumnTagName(Enum):
    COLUMN_GEOGRAPHIC_ROLE = 'COLUMN_GEOGRAPHIC_ROLE'
    COLUMN_DESCRIPTION = 'COLUMN_DESCRIPTION'


class ColumnTagNames(RootModel[List[ColumnTagName]]):
    root: List[ColumnTagName]


class ComparisonMethod(Enum):
    DIFFERENCE = 'DIFFERENCE'
    PERCENT_DIFFERENCE = 'PERCENT_DIFFERENCE'
    PERCENT = 'PERCENT'


class ConcurrentUpdatingException(RootModel[Any]):
    root: Any


class ConditionalFormattingIconDisplayOption(Enum):
    ICON_ONLY = 'ICON_ONLY'


class ConditionalFormattingIconSetType(Enum):
    PLUS_MINUS = 'PLUS_MINUS'
    CHECK_X = 'CHECK_X'
    THREE_COLOR_ARROW = 'THREE_COLOR_ARROW'
    THREE_GRAY_ARROW = 'THREE_GRAY_ARROW'
    CARET_UP_MINUS_DOWN = 'CARET_UP_MINUS_DOWN'
    THREE_SHAPE = 'THREE_SHAPE'
    THREE_CIRCLE = 'THREE_CIRCLE'
    FLAGS = 'FLAGS'
    BARS = 'BARS'
    FOUR_COLOR_ARROW = 'FOUR_COLOR_ARROW'
    FOUR_GRAY_ARROW = 'FOUR_GRAY_ARROW'


class ConflictException(RootModel[Any]):
    root: Any


class CopySourceArn(
    RootModel[
        constr(pattern=r'^arn:[-a-z0-9]*:quicksight:[-a-z0-9]*:[0-9]{12}:datasource/.+')
    ]
):
    root: constr(
        pattern=r'^arn:[-a-z0-9]*:quicksight:[-a-z0-9]*:[0-9]{12}:datasource/.+'
    )


class CreateFolderMembershipRequest(BaseModel):
    pass


class CreateGroupMembershipRequest(BaseModel):
    pass


class CrossDatasetTypes(Enum):
    ALL_DATASETS = 'ALL_DATASETS'
    SINGLE_DATASET = 'SINGLE_DATASET'


class CurrencyCode(RootModel[constr(pattern=r'[A-Z]{3}')]):
    root: constr(pattern=r'[A-Z]{3}')


class CustomContentImageScalingConfiguration(Enum):
    FIT_TO_HEIGHT = 'FIT_TO_HEIGHT'
    FIT_TO_WIDTH = 'FIT_TO_WIDTH'
    DO_NOT_SCALE = 'DO_NOT_SCALE'
    SCALE_TO_VISUAL = 'SCALE_TO_VISUAL'


class CustomContentType(Enum):
    IMAGE = 'IMAGE'
    OTHER_EMBEDDED_CONTENT = 'OTHER_EMBEDDED_CONTENT'


class CustomLabel(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class CustomSqlName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class DashboardBehavior(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class DashboardErrorType(Enum):
    ACCESS_DENIED = 'ACCESS_DENIED'
    SOURCE_NOT_FOUND = 'SOURCE_NOT_FOUND'
    DATA_SET_NOT_FOUND = 'DATA_SET_NOT_FOUND'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    PARAMETER_VALUE_INCOMPATIBLE = 'PARAMETER_VALUE_INCOMPATIBLE'
    PARAMETER_TYPE_INVALID = 'PARAMETER_TYPE_INVALID'
    PARAMETER_NOT_FOUND = 'PARAMETER_NOT_FOUND'
    COLUMN_TYPE_MISMATCH = 'COLUMN_TYPE_MISMATCH'
    COLUMN_GEOGRAPHIC_ROLE_MISMATCH = 'COLUMN_GEOGRAPHIC_ROLE_MISMATCH'
    COLUMN_REPLACEMENT_MISSING = 'COLUMN_REPLACEMENT_MISSING'


class DashboardFilterAttribute(Enum):
    QUICKSIGHT_USER = 'QUICKSIGHT_USER'
    QUICKSIGHT_VIEWER_OR_OWNER = 'QUICKSIGHT_VIEWER_OR_OWNER'
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 'DIRECT_QUICKSIGHT_VIEWER_OR_OWNER'
    QUICKSIGHT_OWNER = 'QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_OWNER = 'DIRECT_QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_SOLE_OWNER = 'DIRECT_QUICKSIGHT_SOLE_OWNER'
    DASHBOARD_NAME = 'DASHBOARD_NAME'


class DashboardName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class DashboardUIState(Enum):
    EXPANDED = 'EXPANDED'
    COLLAPSED = 'COLLAPSED'


class DataLabelContent(Enum):
    VALUE = 'VALUE'
    PERCENT = 'PERCENT'
    VALUE_AND_PERCENT = 'VALUE_AND_PERCENT'


class DataLabelOverlap(Enum):
    DISABLE_OVERLAP = 'DISABLE_OVERLAP'
    ENABLE_OVERLAP = 'ENABLE_OVERLAP'


class DataLabelPosition(Enum):
    INSIDE = 'INSIDE'
    OUTSIDE = 'OUTSIDE'
    LEFT = 'LEFT'
    TOP = 'TOP'
    BOTTOM = 'BOTTOM'
    RIGHT = 'RIGHT'


class DataPointDrillUpDownOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class DataPointMenuLabelOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class DataPointTooltipOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class DataSetArnsList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=100)


class DataSetFilterAttribute(Enum):
    QUICKSIGHT_VIEWER_OR_OWNER = 'QUICKSIGHT_VIEWER_OR_OWNER'
    QUICKSIGHT_OWNER = 'QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 'DIRECT_QUICKSIGHT_VIEWER_OR_OWNER'
    DIRECT_QUICKSIGHT_OWNER = 'DIRECT_QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_SOLE_OWNER = 'DIRECT_QUICKSIGHT_SOLE_OWNER'
    DATASET_NAME = 'DATASET_NAME'


class DataSetIdentifier(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class DataSetIdentifierDeclaration(BaseModel):
    DataSetArn: Arn
    Identifier: DataSetIdentifier


class DataSetIdentifierDeclarationList(RootModel[List[DataSetIdentifierDeclaration]]):
    root: List[DataSetIdentifierDeclaration] = Field(..., max_length=50, min_length=1)


class DataSetImportMode(Enum):
    SPICE = 'SPICE'
    DIRECT_QUERY = 'DIRECT_QUERY'


class DataSetName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DataSetUsageConfiguration(BaseModel):
    DisableUseAsDirectQuerySource: Optional[Boolean] = None
    DisableUseAsImportedSource: Optional[Boolean] = None


class DataSourceErrorInfoType(Enum):
    ACCESS_DENIED = 'ACCESS_DENIED'
    COPY_SOURCE_NOT_FOUND = 'COPY_SOURCE_NOT_FOUND'
    TIMEOUT = 'TIMEOUT'
    ENGINE_VERSION_NOT_SUPPORTED = 'ENGINE_VERSION_NOT_SUPPORTED'
    UNKNOWN_HOST = 'UNKNOWN_HOST'
    GENERIC_SQL_FAILURE = 'GENERIC_SQL_FAILURE'
    CONFLICT = 'CONFLICT'
    UNKNOWN = 'UNKNOWN'


class DataSourceFilterAttribute(Enum):
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 'DIRECT_QUICKSIGHT_VIEWER_OR_OWNER'
    DIRECT_QUICKSIGHT_OWNER = 'DIRECT_QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_SOLE_OWNER = 'DIRECT_QUICKSIGHT_SOLE_OWNER'
    DATASOURCE_NAME = 'DATASOURCE_NAME'


class DataSourceType(Enum):
    ADOBE_ANALYTICS = 'ADOBE_ANALYTICS'
    AMAZON_ELASTICSEARCH = 'AMAZON_ELASTICSEARCH'
    ATHENA = 'ATHENA'
    AURORA = 'AURORA'
    AURORA_POSTGRESQL = 'AURORA_POSTGRESQL'
    AWS_IOT_ANALYTICS = 'AWS_IOT_ANALYTICS'
    GITHUB = 'GITHUB'
    JIRA = 'JIRA'
    MARIADB = 'MARIADB'
    MYSQL = 'MYSQL'
    ORACLE = 'ORACLE'
    POSTGRESQL = 'POSTGRESQL'
    PRESTO = 'PRESTO'
    REDSHIFT = 'REDSHIFT'
    S3 = 'S3'
    SALESFORCE = 'SALESFORCE'
    SERVICENOW = 'SERVICENOW'
    SNOWFLAKE = 'SNOWFLAKE'
    SPARK = 'SPARK'
    SQLSERVER = 'SQLSERVER'
    TERADATA = 'TERADATA'
    TWITTER = 'TWITTER'
    TIMESTREAM = 'TIMESTREAM'
    AMAZON_OPENSEARCH = 'AMAZON_OPENSEARCH'
    EXASOL = 'EXASOL'
    DATABRICKS = 'DATABRICKS'


class Database(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DateAggregationFunction(Enum):
    COUNT = 'COUNT'
    DISTINCT_COUNT = 'DISTINCT_COUNT'
    MIN = 'MIN'
    MAX = 'MAX'


class DateTimeFormat(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class DayOfMonth(
    RootModel[
        constr(
            pattern=r'^(?:LAST_DAY_OF_MONTH|1[0-9]|2[0-8]|[12]|[3-9])$',
            min_length=1,
            max_length=17,
        )
    ]
):
    root: constr(
        pattern=r'^(?:LAST_DAY_OF_MONTH|1[0-9]|2[0-8]|[12]|[3-9])$',
        min_length=1,
        max_length=17,
    )


class DayOfWeek(Enum):
    SUNDAY = 'SUNDAY'
    MONDAY = 'MONDAY'
    TUESDAY = 'TUESDAY'
    WEDNESDAY = 'WEDNESDAY'
    THURSDAY = 'THURSDAY'
    FRIDAY = 'FRIDAY'
    SATURDAY = 'SATURDAY'


class DecimalPlaces(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20)


class DecimalPlacesConfiguration(BaseModel):
    DecimalPlaces_1: DecimalPlaces = Field(..., alias='DecimalPlaces')


class DeleteAccountCustomizationRequest(BaseModel):
    pass


class DeleteAccountSubscriptionRequest(BaseModel):
    pass


class DeleteAnalysisRequest(BaseModel):
    pass


class DeleteDashboardRequest(BaseModel):
    pass


class DeleteDataSetRefreshPropertiesRequest(BaseModel):
    pass


class DeleteDataSetRequest(BaseModel):
    pass


class DeleteDataSourceRequest(BaseModel):
    pass


class DeleteFolderMembershipRequest(BaseModel):
    pass


class DeleteFolderRequest(BaseModel):
    pass


class DeleteGroupMembershipRequest(BaseModel):
    pass


class DeleteGroupRequest(BaseModel):
    pass


class DeleteIAMPolicyAssignmentRequest(BaseModel):
    pass


class DeleteNamespaceRequest(BaseModel):
    pass


class DeleteRefreshScheduleRequest(BaseModel):
    pass


class DeleteTemplateAliasRequest(BaseModel):
    pass


class DeleteTemplateRequest(BaseModel):
    pass


class DeleteThemeAliasRequest(BaseModel):
    pass


class DeleteThemeRequest(BaseModel):
    pass


class DeleteUserByPrincipalIdRequest(BaseModel):
    pass


class DeleteUserRequest(BaseModel):
    pass


class Delimiter(RootModel[constr(min_length=1, max_length=1)]):
    root: constr(min_length=1, max_length=1)


class DescribeAccountCustomizationRequest(BaseModel):
    pass


class DescribeAccountSettingsRequest(BaseModel):
    pass


class DescribeAccountSubscriptionRequest(BaseModel):
    pass


class DescribeAnalysisDefinitionRequest(BaseModel):
    pass


class DescribeAnalysisPermissionsRequest(BaseModel):
    pass


class DescribeAnalysisRequest(BaseModel):
    pass


class DescribeDashboardDefinitionRequest(BaseModel):
    pass


class DescribeDashboardPermissionsRequest(BaseModel):
    pass


class DescribeDashboardRequest(BaseModel):
    pass


class DescribeDataSetPermissionsRequest(BaseModel):
    pass


class DescribeDataSetRefreshPropertiesRequest(BaseModel):
    pass


class DescribeDataSetRequest(BaseModel):
    pass


class DescribeDataSourcePermissionsRequest(BaseModel):
    pass


class DescribeDataSourceRequest(BaseModel):
    pass


class DescribeFolderPermissionsRequest(BaseModel):
    pass


class DescribeFolderRequest(BaseModel):
    pass


class DescribeFolderResolvedPermissionsRequest(BaseModel):
    pass


class DescribeGroupMembershipRequest(BaseModel):
    pass


class DescribeGroupRequest(BaseModel):
    pass


class DescribeIAMPolicyAssignmentRequest(BaseModel):
    pass


class DescribeIngestionRequest(BaseModel):
    pass


class DescribeIpRestrictionRequest(BaseModel):
    pass


class DescribeNamespaceRequest(BaseModel):
    pass


class DescribeRefreshScheduleRequest(BaseModel):
    pass


class DescribeTemplateAliasRequest(BaseModel):
    pass


class DescribeTemplateDefinitionRequest(BaseModel):
    pass


class DescribeTemplatePermissionsRequest(BaseModel):
    pass


class DescribeTemplateRequest(BaseModel):
    pass


class DescribeThemeAliasRequest(BaseModel):
    pass


class DescribeThemePermissionsRequest(BaseModel):
    pass


class DescribeThemeRequest(BaseModel):
    pass


class DescribeUserRequest(BaseModel):
    pass


class Domain(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class DomainNotWhitelistedException(RootModel[Any]):
    root: Any


class Double(RootModel[float]):
    root: float


class Edition(Enum):
    STANDARD = 'STANDARD'
    ENTERPRISE = 'ENTERPRISE'
    ENTERPRISE_AND_Q = 'ENTERPRISE_AND_Q'


class EmbeddingIdentityType(Enum):
    IAM = 'IAM'
    QUICKSIGHT = 'QUICKSIGHT'
    ANONYMOUS = 'ANONYMOUS'


class EmbeddingUrl(RootModel[SecretStr]):
    root: SecretStr


class EntryPath(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class EntryPoint(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class ExportHiddenFieldsOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class ExportToCSVOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class ExportWithHiddenFieldsOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class Expression(RootModel[SecretStr]):
    root: SecretStr


class FieldFolderDescription(RootModel[constr(max_length=500)]):
    root: constr(max_length=500)


class FieldFolderPath(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class FieldId(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class FieldOrderList(RootModel[List[FieldId]]):
    root: List[FieldId] = Field(..., max_length=100)


class FieldValue(RootModel[SecretStr]):
    root: SecretStr


class FileFormat(Enum):
    CSV = 'CSV'
    TSV = 'TSV'
    CLF = 'CLF'
    ELF = 'ELF'
    XLSX = 'XLSX'
    JSON = 'JSON'


class FilterListConfiguration(BaseModel):
    CategoryValues: Optional[CategoryValueList] = None
    MatchOperator: CategoryFilterMatchOperator
    SelectAllOptions: Optional[CategoryFilterSelectAllOptions] = None


class FilterNullOption(Enum):
    ALL_VALUES = 'ALL_VALUES'
    NULLS_ONLY = 'NULLS_ONLY'
    NON_NULLS_ONLY = 'NON_NULLS_ONLY'


class FilterOperation(BaseModel):
    ConditionExpression: Expression


class FilterOperator(Enum):
    StringEquals = 'StringEquals'
    StringLike = 'StringLike'


class FilterVisualScope(Enum):
    ALL_VISUALS = 'ALL_VISUALS'
    SELECTED_VISUALS = 'SELECTED_VISUALS'


class FolderFilterAttribute(Enum):
    PARENT_FOLDER_ARN = 'PARENT_FOLDER_ARN'
    DIRECT_QUICKSIGHT_OWNER = 'DIRECT_QUICKSIGHT_OWNER'
    DIRECT_QUICKSIGHT_SOLE_OWNER = 'DIRECT_QUICKSIGHT_SOLE_OWNER'
    DIRECT_QUICKSIGHT_VIEWER_OR_OWNER = 'DIRECT_QUICKSIGHT_VIEWER_OR_OWNER'
    QUICKSIGHT_OWNER = 'QUICKSIGHT_OWNER'
    QUICKSIGHT_VIEWER_OR_OWNER = 'QUICKSIGHT_VIEWER_OR_OWNER'
    FOLDER_NAME = 'FOLDER_NAME'


class FolderName(RootModel[constr(min_length=1, max_length=200)]):
    root: constr(min_length=1, max_length=200)


class FolderType(Enum):
    SHARED = 'SHARED'


class FontDecoration(Enum):
    UNDERLINE = 'UNDERLINE'
    NONE = 'NONE'


class FontStyle(Enum):
    NORMAL = 'NORMAL'
    ITALIC = 'ITALIC'


class FontWeightName(Enum):
    NORMAL = 'NORMAL'
    BOLD = 'BOLD'


class ForecastComputationCustomSeasonalityValue(RootModel[conint(ge=1, le=180)]):
    root: conint(ge=1, le=180)


class ForecastComputationSeasonality(Enum):
    AUTOMATIC = 'AUTOMATIC'
    CUSTOM = 'CUSTOM'


class FunnelChartMeasureDataLabelStyle(Enum):
    VALUE_ONLY = 'VALUE_ONLY'
    PERCENTAGE_BY_FIRST_STAGE = 'PERCENTAGE_BY_FIRST_STAGE'
    PERCENTAGE_BY_PREVIOUS_STAGE = 'PERCENTAGE_BY_PREVIOUS_STAGE'
    VALUE_AND_PERCENTAGE_BY_FIRST_STAGE = 'VALUE_AND_PERCENTAGE_BY_FIRST_STAGE'
    VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE = 'VALUE_AND_PERCENTAGE_BY_PREVIOUS_STAGE'


class GeoSpatialCountryCode(Enum):
    US = 'US'


class GeoSpatialDataRole(Enum):
    COUNTRY = 'COUNTRY'
    STATE = 'STATE'
    COUNTY = 'COUNTY'
    CITY = 'CITY'
    POSTCODE = 'POSTCODE'
    LONGITUDE = 'LONGITUDE'
    LATITUDE = 'LATITUDE'


class GeospatialMapStyleOptions(BaseModel):
    BaseMapStyle: Optional[BaseMapStyleType] = None


class GeospatialSelectedPointStyle(Enum):
    POINT = 'POINT'
    CLUSTER = 'CLUSTER'


class GetDashboardEmbedUrlRequest(BaseModel):
    pass


class GetSessionEmbedUrlRequest(BaseModel):
    pass


class GridLayoutElementColumnIndex(RootModel[conint(ge=0, le=35)]):
    root: conint(ge=0, le=35)


class GridLayoutElementColumnSpan(RootModel[conint(ge=1, le=36)]):
    root: conint(ge=1, le=36)


class GridLayoutElementRowIndex(RootModel[conint(ge=0, le=9009)]):
    root: conint(ge=0, le=9009)


class GridLayoutElementRowSpan(RootModel[conint(ge=1, le=21)]):
    root: conint(ge=1, le=21)


class GroupDescription(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class GroupFilterAttribute(Enum):
    GROUP_NAME = 'GROUP_NAME'


class GroupFilterOperator(Enum):
    StartsWith = 'StartsWith'


class GroupMemberName(
    RootModel[constr(pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=256)


class GroupName(RootModel[constr(pattern=r'[\u0020-\u00FF]+', min_length=1)]):
    root: constr(pattern=r'[\u0020-\u00FF]+', min_length=1)


class GrowthRatePeriodSize(RootModel[conint(ge=2, le=52)]):
    root: conint(ge=2, le=52)


class GutterStyle(BaseModel):
    Show: Optional[Boolean] = None


class HexColor(RootModel[constr(pattern=r'^#[A-F0-9]{6}$')]):
    root: constr(pattern=r'^#[A-F0-9]{6}$')


class HexColorWithTransparency(
    RootModel[constr(pattern=r'^#[A-F0-9]{6}(?:[A-F0-9]{2})?$')]
):
    root: constr(pattern=r'^#[A-F0-9]{6}(?:[A-F0-9]{2})?$')


class HierarchyId(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class HistogramBinType(Enum):
    BIN_COUNT = 'BIN_COUNT'
    BIN_WIDTH = 'BIN_WIDTH'


class HorizontalTextAlignment(Enum):
    LEFT = 'LEFT'
    CENTER = 'CENTER'
    RIGHT = 'RIGHT'
    AUTO = 'AUTO'


class Host(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class IAMPolicyAssignmentName(
    RootModel[
        constr(pattern=r'(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$', min_length=1)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$', min_length=1)


class IAMPolicyAssignmentSummary(BaseModel):
    AssignmentName: Optional[IAMPolicyAssignmentName] = None
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus'
    )


class IAMPolicyAssignmentSummaryList(RootModel[List[IAMPolicyAssignmentSummary]]):
    root: List[IAMPolicyAssignmentSummary]


class Icon(Enum):
    CARET_UP = 'CARET_UP'
    CARET_DOWN = 'CARET_DOWN'
    PLUS = 'PLUS'
    MINUS = 'MINUS'
    ARROW_UP = 'ARROW_UP'
    ARROW_DOWN = 'ARROW_DOWN'
    ARROW_LEFT = 'ARROW_LEFT'
    ARROW_UP_LEFT = 'ARROW_UP_LEFT'
    ARROW_DOWN_LEFT = 'ARROW_DOWN_LEFT'
    ARROW_RIGHT = 'ARROW_RIGHT'
    ARROW_UP_RIGHT = 'ARROW_UP_RIGHT'
    ARROW_DOWN_RIGHT = 'ARROW_DOWN_RIGHT'
    FACE_UP = 'FACE_UP'
    FACE_DOWN = 'FACE_DOWN'
    FACE_FLAT = 'FACE_FLAT'
    ONE_BAR = 'ONE_BAR'
    TWO_BAR = 'TWO_BAR'
    THREE_BAR = 'THREE_BAR'
    CIRCLE = 'CIRCLE'
    TRIANGLE = 'TRIANGLE'
    SQUARE = 'SQUARE'
    FLAG = 'FLAG'
    THUMBS_UP = 'THUMBS_UP'
    THUMBS_DOWN = 'THUMBS_DOWN'
    CHECKMARK = 'CHECKMARK'
    X = 'X'


class IdentityName(RootModel[constr(pattern=r'[\u0020-\u00FF]+', min_length=1)]):
    root: constr(pattern=r'[\u0020-\u00FF]+', min_length=1)


class IdentityNameList(RootModel[List[IdentityName]]):
    root: List[IdentityName]


class IdentityStore(Enum):
    QUICKSIGHT = 'QUICKSIGHT'


class IdentityType(Enum):
    IAM = 'IAM'
    QUICKSIGHT = 'QUICKSIGHT'


class IdentityTypeNotSupportedException(RootModel[Any]):
    root: Any


class IngestionErrorType(Enum):
    FAILURE_TO_ASSUME_ROLE = 'FAILURE_TO_ASSUME_ROLE'
    INGESTION_SUPERSEDED = 'INGESTION_SUPERSEDED'
    INGESTION_CANCELED = 'INGESTION_CANCELED'
    DATA_SET_DELETED = 'DATA_SET_DELETED'
    DATA_SET_NOT_SPICE = 'DATA_SET_NOT_SPICE'
    S3_UPLOADED_FILE_DELETED = 'S3_UPLOADED_FILE_DELETED'
    S3_MANIFEST_ERROR = 'S3_MANIFEST_ERROR'
    DATA_TOLERANCE_EXCEPTION = 'DATA_TOLERANCE_EXCEPTION'
    SPICE_TABLE_NOT_FOUND = 'SPICE_TABLE_NOT_FOUND'
    DATA_SET_SIZE_LIMIT_EXCEEDED = 'DATA_SET_SIZE_LIMIT_EXCEEDED'
    ROW_SIZE_LIMIT_EXCEEDED = 'ROW_SIZE_LIMIT_EXCEEDED'
    ACCOUNT_CAPACITY_LIMIT_EXCEEDED = 'ACCOUNT_CAPACITY_LIMIT_EXCEEDED'
    CUSTOMER_ERROR = 'CUSTOMER_ERROR'
    DATA_SOURCE_NOT_FOUND = 'DATA_SOURCE_NOT_FOUND'
    IAM_ROLE_NOT_AVAILABLE = 'IAM_ROLE_NOT_AVAILABLE'
    CONNECTION_FAILURE = 'CONNECTION_FAILURE'
    SQL_TABLE_NOT_FOUND = 'SQL_TABLE_NOT_FOUND'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    SSL_CERTIFICATE_VALIDATION_FAILURE = 'SSL_CERTIFICATE_VALIDATION_FAILURE'
    OAUTH_TOKEN_FAILURE = 'OAUTH_TOKEN_FAILURE'
    SOURCE_API_LIMIT_EXCEEDED_FAILURE = 'SOURCE_API_LIMIT_EXCEEDED_FAILURE'
    PASSWORD_AUTHENTICATION_FAILURE = 'PASSWORD_AUTHENTICATION_FAILURE'
    SQL_SCHEMA_MISMATCH_ERROR = 'SQL_SCHEMA_MISMATCH_ERROR'
    INVALID_DATE_FORMAT = 'INVALID_DATE_FORMAT'
    INVALID_DATAPREP_SYNTAX = 'INVALID_DATAPREP_SYNTAX'
    SOURCE_RESOURCE_LIMIT_EXCEEDED = 'SOURCE_RESOURCE_LIMIT_EXCEEDED'
    SQL_INVALID_PARAMETER_VALUE = 'SQL_INVALID_PARAMETER_VALUE'
    QUERY_TIMEOUT = 'QUERY_TIMEOUT'
    SQL_NUMERIC_OVERFLOW = 'SQL_NUMERIC_OVERFLOW'
    UNRESOLVABLE_HOST = 'UNRESOLVABLE_HOST'
    UNROUTABLE_HOST = 'UNROUTABLE_HOST'
    SQL_EXCEPTION = 'SQL_EXCEPTION'
    S3_FILE_INACCESSIBLE = 'S3_FILE_INACCESSIBLE'
    IOT_FILE_NOT_FOUND = 'IOT_FILE_NOT_FOUND'
    IOT_DATA_SET_FILE_EMPTY = 'IOT_DATA_SET_FILE_EMPTY'
    INVALID_DATA_SOURCE_CONFIG = 'INVALID_DATA_SOURCE_CONFIG'
    DATA_SOURCE_AUTH_FAILED = 'DATA_SOURCE_AUTH_FAILED'
    DATA_SOURCE_CONNECTION_FAILED = 'DATA_SOURCE_CONNECTION_FAILED'
    FAILURE_TO_PROCESS_JSON_FILE = 'FAILURE_TO_PROCESS_JSON_FILE'
    INTERNAL_SERVICE_ERROR = 'INTERNAL_SERVICE_ERROR'
    REFRESH_SUPPRESSED_BY_EDIT = 'REFRESH_SUPPRESSED_BY_EDIT'
    PERMISSION_NOT_FOUND = 'PERMISSION_NOT_FOUND'
    ELASTICSEARCH_CURSOR_NOT_ENABLED = 'ELASTICSEARCH_CURSOR_NOT_ENABLED'
    CURSOR_NOT_ENABLED = 'CURSOR_NOT_ENABLED'
    DUPLICATE_COLUMN_NAMES_FOUND = 'DUPLICATE_COLUMN_NAMES_FOUND'


class IngestionId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-_]+$', min_length=1, max_length=128)


class IngestionMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class IngestionRequestSource(Enum):
    MANUAL = 'MANUAL'
    SCHEDULED = 'SCHEDULED'


class IngestionRequestType(Enum):
    INITIAL_INGESTION = 'INITIAL_INGESTION'
    EDIT = 'EDIT'
    INCREMENTAL_REFRESH = 'INCREMENTAL_REFRESH'
    FULL_REFRESH = 'FULL_REFRESH'


class IngestionStatus(Enum):
    INITIALIZED = 'INITIALIZED'
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'
    CANCELLED = 'CANCELLED'


class IngestionType(Enum):
    INCREMENTAL_REFRESH = 'INCREMENTAL_REFRESH'
    FULL_REFRESH = 'FULL_REFRESH'


class InputColumnDataType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    DECIMAL = 'DECIMAL'
    DATETIME = 'DATETIME'
    BIT = 'BIT'
    BOOLEAN = 'BOOLEAN'
    JSON = 'JSON'


class InstanceId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class Integer(RootModel[int]):
    root: int


class InternalFailureException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class IpRestrictionRuleDescription(RootModel[constr(min_length=0, max_length=150)]):
    root: constr(min_length=0, max_length=150)


class IpRestrictionRuleMap(
    RootModel[Optional[Dict[str, IpRestrictionRuleDescription]]]
):
    root: Optional[Dict[str, IpRestrictionRuleDescription]] = None


class JoinKeyProperties(BaseModel):
    UniqueKey: Optional[Boolean] = None


class JoinType(Enum):
    INNER = 'INNER'
    OUTER = 'OUTER'
    LEFT = 'LEFT'
    RIGHT = 'RIGHT'


class Latitude(RootModel[confloat(ge=-90.0, le=90.0)]):
    root: confloat(ge=-90.0, le=90.0)


class LayoutElementType(Enum):
    VISUAL = 'VISUAL'
    FILTER_CONTROL = 'FILTER_CONTROL'
    PARAMETER_CONTROL = 'PARAMETER_CONTROL'
    TEXT_BOX = 'TEXT_BOX'


class LegendPosition(Enum):
    AUTO = 'AUTO'
    RIGHT = 'RIGHT'
    BOTTOM = 'BOTTOM'
    TOP = 'TOP'


class Length(RootModel[str]):
    root: str = Field(
        ..., description='String based length that is composed of value and unit'
    )


class LimitExceededException(RootModel[Any]):
    root: Any


class LineChartLineStyle(Enum):
    SOLID = 'SOLID'
    DOTTED = 'DOTTED'
    DASHED = 'DASHED'


class LineChartMarkerShape(Enum):
    CIRCLE = 'CIRCLE'
    TRIANGLE = 'TRIANGLE'
    SQUARE = 'SQUARE'
    DIAMOND = 'DIAMOND'
    ROUNDED_SQUARE = 'ROUNDED_SQUARE'


class LineChartType(Enum):
    LINE = 'LINE'
    AREA = 'AREA'
    STACKED_AREA = 'STACKED_AREA'


class LineInterpolation(Enum):
    LINEAR = 'LINEAR'
    SMOOTH = 'SMOOTH'
    STEPPED = 'STEPPED'


class ListAnalysesRequest(BaseModel):
    pass


class ListDashboardVersionsRequest(BaseModel):
    pass


class ListDashboardsRequest(BaseModel):
    pass


class ListDataSetsRequest(BaseModel):
    pass


class ListDataSourcesRequest(BaseModel):
    pass


class ListFolderMembersRequest(BaseModel):
    pass


class ListFoldersRequest(BaseModel):
    pass


class ListGroupMembershipsRequest(BaseModel):
    pass


class ListGroupsRequest(BaseModel):
    pass


class ListIAMPolicyAssignmentsForUserRequest(BaseModel):
    pass


class ListIAMPolicyAssignmentsRequest(BaseModel):
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus'
    )


class ListIngestionsRequest(BaseModel):
    pass


class ListNamespacesRequest(BaseModel):
    pass


class ListRefreshSchedulesRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ListTemplateAliasesRequest(BaseModel):
    pass


class ListTemplateVersionsRequest(BaseModel):
    pass


class ListTemplatesRequest(BaseModel):
    pass


class ListThemeAliasesRequest(BaseModel):
    pass


class ListThemeVersionsRequest(BaseModel):
    pass


class ListThemesRequest(BaseModel):
    pass


class ListUserGroupsRequest(BaseModel):
    pass


class ListUsersRequest(BaseModel):
    pass


class LogicalTableAlias(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class LogicalTableId(
    RootModel[constr(pattern=r'[0-9a-zA-Z-]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[0-9a-zA-Z-]*', min_length=1, max_length=64)


class Long(RootModel[int]):
    root: int


class LongPlainText(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class LongRichText(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Longitude(RootModel[confloat(ge=-1800.0, le=1800.0)]):
    root: confloat(ge=-1800.0, le=1800.0)


class LookbackWindowSizeUnit(Enum):
    HOUR = 'HOUR'
    DAY = 'DAY'
    WEEK = 'WEEK'


class MapZoomMode(Enum):
    AUTO = 'AUTO'
    MANUAL = 'MANUAL'


class MarginStyle(BaseModel):
    Show: Optional[Boolean] = None


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaximumMinimumComputationType(Enum):
    MAXIMUM = 'MAXIMUM'
    MINIMUM = 'MINIMUM'


class MemberType(Enum):
    DASHBOARD = 'DASHBOARD'
    ANALYSIS = 'ANALYSIS'
    DATASET = 'DATASET'


class MissingDataTreatmentOption(Enum):
    INTERPOLATE = 'INTERPOLATE'
    SHOW_AS_ZERO = 'SHOW_AS_ZERO'
    SHOW_AS_BLANK = 'SHOW_AS_BLANK'


class Namespace(RootModel[constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)]):
    root: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64)


class NamespaceErrorType(Enum):
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    INTERNAL_SERVICE_ERROR = 'INTERNAL_SERVICE_ERROR'


class NamespaceStatus(Enum):
    CREATED = 'CREATED'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    RETRYABLE_FAILURE = 'RETRYABLE_FAILURE'
    NON_RETRYABLE_FAILURE = 'NON_RETRYABLE_FAILURE'


class NarrativeString(RootModel[constr(max_length=150000)]):
    root: constr(max_length=150000)


class NegativeValueDisplayMode(Enum):
    POSITIVE = 'POSITIVE'
    NEGATIVE = 'NEGATIVE'


class NonEmptyString(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class NullString(RootModel[SecretStr]):
    root: SecretStr


class NullValueFormatConfiguration(BaseModel):
    NullString_1: NullString = Field(..., alias='NullString')


class NullableBoolean(RootModel[bool]):
    root: bool


class NumberScale(Enum):
    NONE = 'NONE'
    AUTO = 'AUTO'
    THOUSANDS = 'THOUSANDS'
    MILLIONS = 'MILLIONS'
    BILLIONS = 'BILLIONS'
    TRILLIONS = 'TRILLIONS'


class NumericEqualityMatchOperator(Enum):
    EQUALS = 'EQUALS'
    DOES_NOT_EQUAL = 'DOES_NOT_EQUAL'


class NumericFilterSelectAllOptions(Enum):
    FILTER_ALL_VALUES = 'FILTER_ALL_VALUES'


class NumericSeparatorSymbol(Enum):
    COMMA = 'COMMA'
    DOT = 'DOT'
    SPACE = 'SPACE'


class OnClause(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class OptionalPort(RootModel[conint(ge=0, le=65535)]):
    root: conint(ge=0, le=65535)


class OtherCategories(Enum):
    INCLUDE = 'INCLUDE'
    EXCLUDE = 'EXCLUDE'


class OutputColumn(BaseModel):
    Description: Optional[ColumnDescriptiveText] = None
    Name: Optional[ColumnName] = None
    Type: Optional[ColumnDataType] = None


class OutputColumnList(RootModel[List[OutputColumn]]):
    root: List[OutputColumn]


class PageNumber(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class PaginationConfiguration(BaseModel):
    PageNumber_1: PageNumber = Field(..., alias='PageNumber')
    PageSize: Long


class PanelBorderStyle(Enum):
    SOLID = 'SOLID'
    DASHED = 'DASHED'
    DOTTED = 'DOTTED'


class PaperOrientation(Enum):
    PORTRAIT = 'PORTRAIT'
    LANDSCAPE = 'LANDSCAPE'


class PaperSize(Enum):
    US_LETTER = 'US_LETTER'
    US_LEGAL = 'US_LEGAL'
    US_TABLOID_LEDGER = 'US_TABLOID_LEDGER'
    A0 = 'A0'
    A1 = 'A1'
    A2 = 'A2'
    A3 = 'A3'
    A4 = 'A4'
    A5 = 'A5'
    JIS_B4 = 'JIS_B4'
    JIS_B5 = 'JIS_B5'


class ParameterName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+$', min_length=1, max_length=2048)


class ParameterValueType(Enum):
    MULTI_VALUED = 'MULTI_VALUED'
    SINGLE_VALUED = 'SINGLE_VALUED'


class Password(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class Path(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=10, min_length=1)


class PercentNumber(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class PercentVisibleRange(BaseModel):
    From: Optional[PercentNumber] = None
    To: Optional[PercentNumber] = None


class PercentileValue(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class PeriodsBackward(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class PeriodsForward(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class PhysicalTableId(
    RootModel[constr(pattern=r'[0-9a-zA-Z-]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[0-9a-zA-Z-]*', min_length=1, max_length=64)


class PivotTableConditionalFormattingScopeRole(Enum):
    FIELD = 'FIELD'
    FIELD_TOTAL = 'FIELD_TOTAL'
    GRAND_TOTAL = 'GRAND_TOTAL'


class PivotTableFieldSubtotalOptions(BaseModel):
    FieldId_1: Optional[FieldId] = Field(None, alias='FieldId')


class PivotTableFieldSubtotalOptionsList(
    RootModel[List[PivotTableFieldSubtotalOptions]]
):
    root: List[PivotTableFieldSubtotalOptions] = Field(..., max_length=100)


class PivotTableMetricPlacement(Enum):
    ROW = 'ROW'
    COLUMN = 'COLUMN'


class PivotTableSubtotalLevel(Enum):
    ALL = 'ALL'
    CUSTOM = 'CUSTOM'
    LAST = 'LAST'


class PixelLength(RootModel[str]):
    root: str = Field(
        ..., description='String based length that is composed of value and unit in px'
    )


class Port(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class PositiveInteger(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PositiveLong(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class PostgreSqlParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class PreconditionNotMetException(RootModel[Any]):
    root: Any


class PredictionInterval(RootModel[conint(ge=50, le=95)]):
    root: conint(ge=50, le=95)


class Prefix(RootModel[SecretStr]):
    root: SecretStr


class PrestoParameters(BaseModel):
    Catalog_1: Catalog = Field(..., alias='Catalog')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class PrimaryValueDisplayType(Enum):
    HIDDEN = 'HIDDEN'
    COMPARISON = 'COMPARISON'
    ACTUAL = 'ACTUAL'


class Principal(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Query(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class QuickSightUserNotFoundException(RootModel[Any]):
    root: Any


class RadarChartShape(Enum):
    CIRCLE = 'CIRCLE'
    POLYGON = 'POLYGON'


class RadarChartStartAngle(RootModel[confloat(ge=-360.0, le=360.0)]):
    root: confloat(ge=-360.0, le=360.0)


class RdsParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    InstanceId_1: InstanceId = Field(..., alias='InstanceId')


class RecoveryWindowInDays(RootModel[conint(ge=7, le=30)]):
    root: conint(ge=7, le=30)


class RedshiftParameters(BaseModel):
    ClusterId_1: Optional[ClusterId] = Field(None, alias='ClusterId')
    Database_1: Database = Field(..., alias='Database')
    Host_1: Optional[Host] = Field(None, alias='Host')
    Port: Optional[OptionalPort] = None


class ReferenceLineCustomLabelConfiguration(BaseModel):
    CustomLabel: NonEmptyString


class ReferenceLineLabelHorizontalPosition(Enum):
    LEFT = 'LEFT'
    CENTER = 'CENTER'
    RIGHT = 'RIGHT'


class ReferenceLineLabelVerticalPosition(Enum):
    ABOVE = 'ABOVE'
    BELOW = 'BELOW'


class ReferenceLinePatternType(Enum):
    SOLID = 'SOLID'
    DASHED = 'DASHED'
    DOTTED = 'DOTTED'


class ReferenceLineStyleConfiguration(BaseModel):
    Color: Optional[HexColor] = None
    Pattern: Optional[ReferenceLinePatternType] = None


class ReferenceLineValueLabelRelativePosition(Enum):
    BEFORE_CUSTOM_LABEL = 'BEFORE_CUSTOM_LABEL'
    AFTER_CUSTOM_LABEL = 'AFTER_CUSTOM_LABEL'


class RefreshInterval(Enum):
    MINUTE15 = 'MINUTE15'
    MINUTE30 = 'MINUTE30'
    HOURLY = 'HOURLY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'


class RelationalTableCatalog(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class RelationalTableName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class RelationalTableSchema(RootModel[constr(max_length=64)]):
    root: constr(max_length=64)


class RelativeDateType(Enum):
    PREVIOUS = 'PREVIOUS'
    THIS = 'THIS'
    LAST = 'LAST'
    NOW = 'NOW'
    NEXT = 'NEXT'


class RelativeFontSize(Enum):
    EXTRA_SMALL = 'EXTRA_SMALL'
    SMALL = 'SMALL'
    MEDIUM = 'MEDIUM'
    LARGE = 'LARGE'
    EXTRA_LARGE = 'EXTRA_LARGE'


class RenameColumnOperation(BaseModel):
    ColumnName_1: ColumnName = Field(..., alias='ColumnName')
    NewColumnName: ColumnName


class ResizeOption(Enum):
    FIXED = 'FIXED'
    RESPONSIVE = 'RESPONSIVE'


class ResourceExistsException(RootModel[Any]):
    root: Any


class ResourceId(RootModel[str]):
    root: str


class ResourceName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceStatus(Enum):
    CREATION_IN_PROGRESS = 'CREATION_IN_PROGRESS'
    CREATION_SUCCESSFUL = 'CREATION_SUCCESSFUL'
    CREATION_FAILED = 'CREATION_FAILED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_SUCCESSFUL = 'UPDATE_SUCCESSFUL'
    UPDATE_FAILED = 'UPDATE_FAILED'
    DELETED = 'DELETED'


class ResourceUnavailableException(RootModel[Any]):
    root: Any


class RestoreAnalysisRequest(BaseModel):
    pass


class RestrictiveResourceId(
    RootModel[constr(pattern=r'[\w\-]+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[\w\-]+', min_length=1, max_length=2048)


class RoleArn(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048)


class RoleName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9+=,.@_-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9+=,.@_-]+$', min_length=1, max_length=64)


class RoleSessionName(
    RootModel[constr(pattern=r'[\w+=.@-]*', min_length=2, max_length=64)]
):
    root: constr(pattern=r'[\w+=.@-]*', min_length=2, max_length=64)


class RollingDateConfiguration(BaseModel):
    DataSetIdentifier_1: Optional[DataSetIdentifier] = Field(
        None, alias='DataSetIdentifier'
    )
    Expression_1: Expression = Field(..., alias='Expression')


class RowAlternateColorList(RootModel[List[HexColor]]):
    root: List[HexColor] = Field(..., max_length=1)


class RowInfo(BaseModel):
    RowsDropped: Optional[Long] = None
    RowsIngested: Optional[Long] = None
    TotalRowsInDataset: Optional[Long] = None


class RowLevelPermissionFormatVersion(Enum):
    VERSION_1 = 'VERSION_1'
    VERSION_2 = 'VERSION_2'


class RowLevelPermissionPolicy(Enum):
    GRANT_ACCESS = 'GRANT_ACCESS'
    DENY_ACCESS = 'DENY_ACCESS'


class RowLevelPermissionTagDelimiter(RootModel[constr(max_length=10)]):
    root: constr(max_length=10)


class S3Bucket(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class S3Key(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ScheduleRefreshOnEntity(BaseModel):
    DayOfMonth_1: Optional[DayOfMonth] = Field(None, alias='DayOfMonth')
    DayOfWeek_1: Optional[DayOfWeek] = Field(None, alias='DayOfWeek')


class Seasonality(RootModel[conint(ge=1, le=180)]):
    root: conint(ge=1, le=180)


class SecretArn(
    RootModel[
        constr(
            pattern=r'^arn:[-a-z0-9]*:secretsmanager:[-a-z0-9]*:[0-9]{12}:secret:.+',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:[-a-z0-9]*:secretsmanager:[-a-z0-9]*:[0-9]{12}:secret:.+',
        min_length=1,
        max_length=2048,
    )


class SectionPageBreakStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class SelectAllValueOptions(Enum):
    ALL_VALUES = 'ALL_VALUES'


class SelectedFieldList(RootModel[List[FieldId]]):
    root: List[FieldId] = Field(..., max_length=20, min_length=1)


class SelectedFieldOptions(Enum):
    ALL_FIELDS = 'ALL_FIELDS'


class SelectedTooltipType(Enum):
    BASIC = 'BASIC'
    DETAILED = 'DETAILED'


class SensitiveDouble(RootModel[float]):
    root: float


class SensitiveDoubleList(RootModel[List[SensitiveDouble]]):
    root: List[SensitiveDouble]


class SensitiveDoubleObject(RootModel[float]):
    root: float


class SensitiveLong(RootModel[int]):
    root: int


class SensitiveLongList(RootModel[List[SensitiveLong]]):
    root: List[SensitiveLong]


class SensitiveLongObject(RootModel[int]):
    root: int


class SensitiveString(RootModel[SecretStr]):
    root: SecretStr


class SensitiveStringList(RootModel[List[SensitiveString]]):
    root: List[SensitiveString]


class SensitiveStringObject(RootModel[SecretStr]):
    root: SecretStr


class SensitiveTimestamp(RootModel[datetime]):
    root: datetime


class SensitiveTimestampList(RootModel[List[SensitiveTimestamp]]):
    root: List[SensitiveTimestamp]


class SessionLifetimeInMinutes(RootModel[conint(ge=15, le=600)]):
    root: conint(ge=15, le=600)


class SessionLifetimeInMinutesInvalidException(RootModel[Any]):
    root: Any


class SessionTagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class SessionTagValue(RootModel[SecretStr]):
    root: SecretStr


class SheetContentType(Enum):
    PAGINATED = 'PAGINATED'
    INTERACTIVE = 'INTERACTIVE'


class SheetControlDateTimePickerType(Enum):
    SINGLE_VALUED = 'SINGLE_VALUED'
    DATE_RANGE = 'DATE_RANGE'


class SheetControlListType(Enum):
    MULTI_SELECT = 'MULTI_SELECT'
    SINGLE_SELECT = 'SINGLE_SELECT'


class SheetControlSliderType(Enum):
    SINGLE_POINT = 'SINGLE_POINT'
    RANGE = 'RANGE'


class SheetControlTitle(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class SheetControlsOption(BaseModel):
    VisibilityState: Optional[DashboardUIState] = None


class SheetDescription(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class SheetLayoutElementMaximizationOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class SheetName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class SheetTextBoxContent(RootModel[constr(max_length=150000)]):
    root: constr(max_length=150000)


class SheetTitle(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ShortPlainText(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ShortRestrictiveResourceId(
    RootModel[constr(pattern=r'[\w\-]+', min_length=1, max_length=512)]
):
    root: constr(pattern=r'[\w\-]+', min_length=1, max_length=512)


class ShortRichText(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class SimpleClusterMarker(BaseModel):
    Color: Optional[HexColor] = None


class SimpleNumericalAggregationFunction(Enum):
    SUM = 'SUM'
    AVERAGE = 'AVERAGE'
    MIN = 'MIN'
    MAX = 'MAX'
    COUNT = 'COUNT'
    DISTINCT_COUNT = 'DISTINCT_COUNT'
    VAR = 'VAR'
    VARP = 'VARP'
    STDEV = 'STDEV'
    STDEVP = 'STDEVP'
    MEDIAN = 'MEDIAN'


class SiteBaseUrl(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class SortDirection(Enum):
    ASC = 'ASC'
    DESC = 'DESC'


class Spacing(BaseModel):
    Bottom: Optional[Length] = None
    Left: Optional[Length] = None
    Right: Optional[Length] = None
    Top: Optional[Length] = None


class SparkParameters(BaseModel):
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class SqlEndpointPath(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class SqlQuery(RootModel[constr(min_length=1, max_length=65536)]):
    root: constr(min_length=1, max_length=65536)


class SqlServerParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class SslProperties(BaseModel):
    DisableSsl: Optional[Boolean] = None


class StatePersistenceConfigurations(BaseModel):
    Enabled: Boolean


class Status(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class StatusCode(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class StringDefaultValueList(RootModel[List[SensitiveStringObject]]):
    root: List[SensitiveStringObject] = Field(..., max_length=50000)


class StringList(RootModel[List[String]]):
    root: List[String]


class StringParameter(BaseModel):
    Name: NonEmptyString
    Values: SensitiveStringList


class StringParameterList(RootModel[List[StringParameter]]):
    root: List[StringParameter] = Field(..., max_length=100)


class Suffix(RootModel[SecretStr]):
    root: SecretStr


class TableBorderStyle(Enum):
    NONE = 'NONE'
    SOLID = 'SOLID'


class TableBorderThickness(RootModel[conint(ge=1, le=4)]):
    root: conint(ge=1, le=4)


class TableCellImageScalingConfiguration(Enum):
    FIT_TO_CELL_HEIGHT = 'FIT_TO_CELL_HEIGHT'
    FIT_TO_CELL_WIDTH = 'FIT_TO_CELL_WIDTH'
    DO_NOT_SCALE = 'DO_NOT_SCALE'


class TableCellImageSizingConfiguration(BaseModel):
    TableCellImageScalingConfiguration_1: Optional[
        TableCellImageScalingConfiguration
    ] = Field(None, alias='TableCellImageScalingConfiguration')


class TableFieldHeight(RootModel[conint(ge=8, le=500)]):
    root: conint(ge=8, le=500)


class TableFieldIconSetType(Enum):
    LINK = 'LINK'


class TableFieldImageConfiguration(BaseModel):
    SizingOptions: Optional[TableCellImageSizingConfiguration] = None


class TableOrientation(Enum):
    VERTICAL = 'VERTICAL'
    HORIZONTAL = 'HORIZONTAL'


class TableTotalsPlacement(Enum):
    START = 'START'
    END = 'END'


class TableTotalsScrollStatus(Enum):
    PINNED = 'PINNED'
    SCROLLED = 'SCROLLED'


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class TagValue(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class TargetVisualList(RootModel[List[ShortRestrictiveResourceId]]):
    root: List[ShortRestrictiveResourceId] = Field(..., max_length=30, min_length=1)


class TargetVisualOptions(Enum):
    ALL_VISUALS = 'ALL_VISUALS'


class TemplateErrorType(Enum):
    SOURCE_NOT_FOUND = 'SOURCE_NOT_FOUND'
    DATA_SET_NOT_FOUND = 'DATA_SET_NOT_FOUND'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    ACCESS_DENIED = 'ACCESS_DENIED'


class TemplateName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class TemplateSourceTemplate(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')


class TeradataParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class TextAreaControlDelimiter(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class TextQualifier(Enum):
    DOUBLE_QUOTE = 'DOUBLE_QUOTE'
    SINGLE_QUOTE = 'SINGLE_QUOTE'


class TextWrap(Enum):
    NONE = 'NONE'
    WRAP = 'WRAP'


class ThemeErrorType(Enum):
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'


class ThemeName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ThemeType(Enum):
    QUICKSIGHT = 'QUICKSIGHT'
    CUSTOM = 'CUSTOM'
    ALL = 'ALL'


class ThrottlingException(RootModel[Any]):
    root: Any


class TileLayoutStyle(BaseModel):
    Gutter: Optional[GutterStyle] = None
    Margin: Optional[MarginStyle] = None


class TileStyle(BaseModel):
    Border: Optional[BorderStyle] = None


class TimeBasedForecastProperties(BaseModel):
    LowerBoundary: Optional[Double] = None
    PeriodsBackward_1: Optional[PeriodsBackward] = Field(None, alias='PeriodsBackward')
    PeriodsForward_1: Optional[PeriodsForward] = Field(None, alias='PeriodsForward')
    PredictionInterval_1: Optional[PredictionInterval] = Field(
        None, alias='PredictionInterval'
    )
    Seasonality_1: Optional[Seasonality] = Field(None, alias='Seasonality')
    UpperBoundary: Optional[Double] = None


class TimeGranularity(Enum):
    YEAR = 'YEAR'
    QUARTER = 'QUARTER'
    MONTH = 'MONTH'
    WEEK = 'WEEK'
    DAY = 'DAY'
    HOUR = 'HOUR'
    MINUTE = 'MINUTE'
    SECOND = 'SECOND'
    MILLISECOND = 'MILLISECOND'


class Timestamp(RootModel[datetime]):
    root: datetime


class TooltipTitleType(Enum):
    NONE = 'NONE'
    PRIMARY_VALUE = 'PRIMARY_VALUE'


class TopBottomComputationType(Enum):
    TOP = 'TOP'
    BOTTOM = 'BOTTOM'


class TopBottomMoversComputationMoverSize(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class TopBottomRankedComputationResultSize(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class TopBottomSortOrder(Enum):
    PERCENT_DIFFERENCE = 'PERCENT_DIFFERENCE'
    ABSOLUTE_DIFFERENCE = 'ABSOLUTE_DIFFERENCE'


class TwitterParameters(BaseModel):
    MaxRows: PositiveInteger
    Query_1: Query = Field(..., alias='Query')


class TypeCastFormat(RootModel[constr(max_length=32)]):
    root: constr(max_length=32)


class UIColorPalette(BaseModel):
    Accent: Optional[HexColor] = None
    AccentForeground: Optional[HexColor] = None
    Danger: Optional[HexColor] = None
    DangerForeground: Optional[HexColor] = None
    Dimension: Optional[HexColor] = None
    DimensionForeground: Optional[HexColor] = None
    Measure: Optional[HexColor] = None
    MeasureForeground: Optional[HexColor] = None
    PrimaryBackground: Optional[HexColor] = None
    PrimaryForeground: Optional[HexColor] = None
    SecondaryBackground: Optional[HexColor] = None
    SecondaryForeground: Optional[HexColor] = None
    Success: Optional[HexColor] = None
    SuccessForeground: Optional[HexColor] = None
    Warning: Optional[HexColor] = None
    WarningForeground: Optional[HexColor] = None


class URLOperationTemplate(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class URLTargetConfiguration(Enum):
    NEW_TAB = 'NEW_TAB'
    NEW_WINDOW = 'NEW_WINDOW'
    SAME_TAB = 'SAME_TAB'


class UnicodeIcon(RootModel[constr(pattern=r'^[^\u0000-\u00FF]$')]):
    root: constr(pattern=r'^[^\u0000-\u00FF]$')


class UnlimitedPixelLength(RootModel[str]):
    root: str = Field(
        ...,
        description='String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value',
    )


class UnsupportedPricingPlanException(RootModel[Any]):
    root: Any


class UnsupportedUserEditionException(RootModel[Any]):
    root: Any


class UntagColumnOperation(BaseModel):
    ColumnName_1: ColumnName = Field(..., alias='ColumnName')
    TagNames: ColumnTagNames


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateAccountSettingsRequest(BaseModel):
    DefaultNamespace: Namespace
    NotificationEmail: Optional[String] = None
    TerminationProtectionEnabled: Optional[Boolean] = None


class UpdateAccountSettingsResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateAnalysisResponse(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    UpdateStatus: Optional[ResourceStatus] = None


class UpdateDashboardPublishedVersionRequest(BaseModel):
    pass


class UpdateDashboardPublishedVersionResponse(BaseModel):
    DashboardArn: Optional[Arn] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateDashboardResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    VersionArn: Optional[Arn] = None


class UpdateDataSetPermissionsResponse(BaseModel):
    DataSetArn: Optional[Arn] = None
    DataSetId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateDataSetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DataSetId: Optional[ResourceId] = None
    IngestionArn: Optional[Arn] = None
    IngestionId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateDataSourcePermissionsResponse(BaseModel):
    DataSourceArn: Optional[Arn] = None
    DataSourceId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateDataSourceResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DataSourceId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    UpdateStatus: Optional[ResourceStatus] = None


class UpdateFolderRequest(BaseModel):
    Name: FolderName


class UpdateFolderResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FolderId: Optional[RestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateGroupRequest(BaseModel):
    Description: Optional[GroupDescription] = None


class UpdateIpRestrictionRequest(BaseModel):
    Enabled: Optional[NullableBoolean] = None
    IpRestrictionRuleMap_1: Optional[IpRestrictionRuleMap] = Field(
        None, alias='IpRestrictionRuleMap'
    )


class UpdateIpRestrictionResponse(BaseModel):
    AwsAccountId_1: Optional[AwsAccountId] = Field(None, alias='AwsAccountId')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdatePublicSharingSettingsRequest(BaseModel):
    PublicSharingEnabled: Optional[Boolean] = None


class UpdatePublicSharingSettingsResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateRefreshScheduleResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    ScheduleId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateTemplateResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None
    VersionArn: Optional[Arn] = None


class UpdateThemeResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None
    VersionArn: Optional[Arn] = None


class UploadSettings(BaseModel):
    ContainsHeader: Optional[Boolean] = None
    Delimiter_1: Optional[Delimiter] = Field(None, alias='Delimiter')
    Format: Optional[FileFormat] = None
    StartFromRow: Optional[PositiveInteger] = None
    TextQualifier_1: Optional[TextQualifier] = Field(None, alias='TextQualifier')


class UserName(RootModel[constr(pattern=r'[\u0020-\u00FF]+', min_length=1)]):
    root: constr(pattern=r'[\u0020-\u00FF]+', min_length=1)


class UserRole(Enum):
    ADMIN = 'ADMIN'
    AUTHOR = 'AUTHOR'
    READER = 'READER'
    RESTRICTED_AUTHOR = 'RESTRICTED_AUTHOR'
    RESTRICTED_READER = 'RESTRICTED_READER'


class Username(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ValueWhenUnsetOption(Enum):
    RECOMMENDED_VALUE = 'RECOMMENDED_VALUE'
    NULL = 'NULL'


class VersionDescription(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class VersionNumber(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class VerticalTextAlignment(Enum):
    TOP = 'TOP'
    MIDDLE = 'MIDDLE'
    BOTTOM = 'BOTTOM'


class Visibility(Enum):
    HIDDEN = 'HIDDEN'
    VISIBLE = 'VISIBLE'


class VisiblePanelColumns(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class VisiblePanelRows(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class VisibleRangeOptions(BaseModel):
    PercentRange: Optional[PercentVisibleRange] = None


class VisualAxisSortOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class VisualCustomActionName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class VisualCustomActionTrigger(Enum):
    DATA_POINT_CLICK = 'DATA_POINT_CLICK'
    DATA_POINT_MENU = 'DATA_POINT_MENU'


class VisualMenuOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class VpcConnectionProperties(BaseModel):
    VpcConnectionArn: Arn


class Warehouse(RootModel[constr(max_length=128)]):
    root: constr(max_length=128)


class WaterfallChartOptions(BaseModel):
    TotalBarLabel: Optional[String] = None


class WhatIfPointScenario(BaseModel):
    Date: Timestamp
    Value: Double


class WhatIfRangeScenario(BaseModel):
    EndDate: Timestamp
    StartDate: Timestamp
    Value: Double


class WidgetStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class WordCloudCloudLayout(Enum):
    FLUID = 'FLUID'
    NORMAL = 'NORMAL'


class WordCloudMaximumStringLength(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class WordCloudWordCasing(Enum):
    LOWER_CASE = 'LOWER_CASE'
    EXISTING_CASE = 'EXISTING_CASE'


class WordCloudWordOrientation(Enum):
    HORIZONTAL = 'HORIZONTAL'
    HORIZONTAL_AND_VERTICAL = 'HORIZONTAL_AND_VERTICAL'


class WordCloudWordPadding(Enum):
    NONE = 'NONE'
    SMALL = 'SMALL'
    MEDIUM = 'MEDIUM'
    LARGE = 'LARGE'


class WordCloudWordScaling(Enum):
    EMPHASIZE = 'EMPHASIZE'
    NORMAL = 'NORMAL'


class WorkGroup(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class AuthenticationMethod(Enum):
    IAM_AND_QUICKSIGHT = 'IAM_AND_QUICKSIGHT'
    IAM_ONLY = 'IAM_ONLY'
    ACTIVE_DIRECTORY = 'ACTIVE_DIRECTORY'


class AccountAwsAccountIdPostRequest(BaseModel):
    AccountName: str = Field(
        ...,
        description="The name of your Amazon QuickSight account. This name is unique over all of Amazon Web Services, and it appears only when users sign in. You can't change <code>AccountName</code> value after the Amazon QuickSight account is created.",
    )
    ActiveDirectoryName: Optional[str] = Field(
        None,
        description='The name of your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account.',
    )
    AdminGroup: Optional[List[String]] = Field(
        None,
        description='The admin group associated with your Active Directory. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account. For more information about using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with Amazon QuickSight Enterprise Edition</a> in the Amazon QuickSight User Guide.',
    )
    AuthenticationMethod_1: AuthenticationMethod = Field(
        ...,
        alias='AuthenticationMethod',
        description='<p>The method that you want to use to authenticate your Amazon QuickSight account. Currently, the valid values for this parameter are <code>IAM_AND_QUICKSIGHT</code>, <code>IAM_ONLY</code>, and <code>ACTIVE_DIRECTORY</code>.</p> <p>If you choose <code>ACTIVE_DIRECTORY</code>, provide an <code>ActiveDirectoryName</code> and an <code>AdminGroup</code> associated with your Active Directory.</p>',
    )
    AuthorGroup: Optional[List[String]] = Field(
        None,
        description='The author group associated with your Active Directory. For more information about using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with Amazon QuickSight Enterprise Edition</a> in the Amazon QuickSight User Guide.',
    )
    ContactNumber: Optional[str] = Field(
        None,
        description='A 10-digit phone number for the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account.',
    )
    DirectoryId: Optional[str] = Field(
        None,
        description='The ID of the Active Directory that is associated with your Amazon QuickSight account.',
    )
    Edition_1: Edition = Field(
        ...,
        alias='Edition',
        description='<p>The edition of Amazon QuickSight that you want your account to have. Currently, you can choose from <code>ENTERPRISE</code> or <code>ENTERPRISE_AND_Q</code>.</p> <p>If you choose <code>ENTERPRISE_AND_Q</code>, the following parameters are required:</p> <ul> <li> <p> <code>FirstName</code> </p> </li> <li> <p> <code>LastName</code> </p> </li> <li> <p> <code>EmailAddress</code> </p> </li> <li> <p> <code>ContactNumber</code> </p> </li> </ul>',
    )
    EmailAddress: Optional[str] = Field(
        None,
        description='The email address of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account.',
    )
    FirstName: Optional[str] = Field(
        None,
        description='The first name of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account.',
    )
    LastName: Optional[str] = Field(
        None,
        description='The last name of the author of the Amazon QuickSight account to use for future communications. This field is required if <code>ENTERPPRISE_AND_Q</code> is the selected edition of the new Amazon QuickSight account.',
    )
    NotificationEmail: str = Field(
        ...,
        description='The email address that you want Amazon QuickSight to send notifications to regarding your Amazon QuickSight account or Amazon QuickSight subscription.',
    )
    ReaderGroup: Optional[List[String]] = Field(
        None,
        description='The reader group associated with your Active Direcrtory. For more information about using Active Directory in Amazon QuickSight, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/aws-directory-service.html">Using Active Directory with Amazon QuickSight Enterprise Edition</a> in the <i>Amazon QuickSight User Guide</i>.',
    )
    Realm: Optional[str] = Field(
        None,
        description='The realm of the Active Directory that is associated with your Amazon QuickSight account. This field is required if <code>ACTIVE_DIRECTORY</code> is the selected authentication method of the new Amazon QuickSight account.',
    )


class AccountCustomization(BaseModel):
    DefaultEmailCustomizationTemplate: Optional[Arn] = None
    DefaultTheme: Optional[Arn] = None


class AccountsAwsAccountIdCustomizationsPutRequest(BaseModel):
    AccountCustomization_1: AccountCustomization = Field(
        ...,
        alias='AccountCustomization',
        description='The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region.',
    )


class CredsType(Enum):
    IAM = 'IAM'
    QUICKSIGHT = 'QUICKSIGHT'
    ANONYMOUS = 'ANONYMOUS'


class AdditionalDashboardIds(RootModel[List[ShortRestrictiveResourceId]]):
    root: List[ShortRestrictiveResourceId] = Field(..., max_length=20, min_length=1)


class ImportMode(Enum):
    SPICE = 'SPICE'
    DIRECT_QUERY = 'DIRECT_QUERY'


class RowLevelPermissionDataSet1(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FormatVersion: Optional[RowLevelPermissionFormatVersion] = None
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    PermissionPolicy: Optional[RowLevelPermissionPolicy] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class AccountsAwsAccountIdDataSetsDataSetIdIngestionsIngestionIdPutRequest(BaseModel):
    IngestionType_1: Optional[IngestionType] = Field(
        None,
        alias='IngestionType',
        description='This defines the type of ingestion user wants to trigger. This is part of create ingestion request.',
    )


class Type(Enum):
    ADOBE_ANALYTICS = 'ADOBE_ANALYTICS'
    AMAZON_ELASTICSEARCH = 'AMAZON_ELASTICSEARCH'
    ATHENA = 'ATHENA'
    AURORA = 'AURORA'
    AURORA_POSTGRESQL = 'AURORA_POSTGRESQL'
    AWS_IOT_ANALYTICS = 'AWS_IOT_ANALYTICS'
    GITHUB = 'GITHUB'
    JIRA = 'JIRA'
    MARIADB = 'MARIADB'
    MYSQL = 'MYSQL'
    ORACLE = 'ORACLE'
    POSTGRESQL = 'POSTGRESQL'
    PRESTO = 'PRESTO'
    REDSHIFT = 'REDSHIFT'
    S3 = 'S3'
    SALESFORCE = 'SALESFORCE'
    SERVICENOW = 'SERVICENOW'
    SNOWFLAKE = 'SNOWFLAKE'
    SPARK = 'SPARK'
    SQLSERVER = 'SQLSERVER'
    TERADATA = 'TERADATA'
    TWITTER = 'TWITTER'
    TIMESTREAM = 'TIMESTREAM'
    AMAZON_OPENSEARCH = 'AMAZON_OPENSEARCH'
    EXASOL = 'EXASOL'
    DATABRICKS = 'DATABRICKS'


class VpcConnectionProperties1(BaseModel):
    VpcConnectionArn: Optional[Arn] = None


class AccountsAwsAccountIdFoldersFolderIdPutRequest(BaseModel):
    Name: constr(min_length=1, max_length=200) = Field(
        ..., description='The name of the folder.'
    )


class AccountsAwsAccountIdIpRestrictionPostRequest(BaseModel):
    Enabled: Optional[bool] = Field(
        None, description='A value that specifies whether IP rules are turned on.'
    )
    IpRestrictionRuleMap: Optional[Dict[str, IpRestrictionRuleDescription]] = Field(
        None,
        description='A map that describes the updated IP rules with CIDR ranges and descriptions.',
    )


class AccountsAwsAccountIdNamespacesNamespaceGroupsPostRequest(BaseModel):
    Description: Optional[constr(min_length=1, max_length=512)] = Field(
        None, description='A description for the group that you want to create.'
    )
    GroupName: constr(pattern=r'[\u0020-\u00FF]+', min_length=1) = Field(
        ..., description='A name for the group that you want to create.'
    )


class AccountsAwsAccountIdNamespacesNamespaceGroupsGroupNamePutRequest(BaseModel):
    Description: Optional[constr(min_length=1, max_length=512)] = Field(
        None, description='The description for the group that you want to update.'
    )


class AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsGetRequest(BaseModel):
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus', description='The status of the assignments.'
    )


class AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsPostRequest(BaseModel):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    AssignmentName: constr(
        pattern=r'(?=^.{2,256}$)(?!.*\s)[0-9a-zA-Z-_.:=+@]*$', min_length=1
    ) = Field(
        ...,
        description='The name of the assignment, also called a rule. It must be unique within an Amazon Web Services account.',
    )
    AssignmentStatus_1: AssignmentStatus = Field(
        ...,
        alias='AssignmentStatus',
        description="<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>",
    )
    Identities: Optional[Dict[str, IdentityNameList]] = Field(
        None,
        description='The Amazon QuickSight users, groups, or both that you want to assign the policy to.',
    )
    PolicyArn: Optional[str] = Field(
        None,
        description='The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.',
    )


class AccountsAwsAccountIdNamespacesNamespaceIamPolicyAssignmentsAssignmentNamePutRequest(
    BaseModel
):
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None,
        alias='AssignmentStatus',
        description="<p>The status of the assignment. Possible values are as follows:</p> <ul> <li> <p> <code>ENABLED</code> - Anything specified in this assignment is used when creating the data source.</p> </li> <li> <p> <code>DISABLED</code> - This assignment isn't used when creating the data source.</p> </li> <li> <p> <code>DRAFT</code> - This assignment is an unfinished draft and isn't used when creating the data source.</p> </li> </ul>",
    )
    Identities: Optional[Dict[str, IdentityNameList]] = Field(
        None,
        description='The Amazon QuickSight users, groups, or both that you want to assign the policy to.',
    )
    PolicyArn: Optional[str] = Field(
        None,
        description='The ARN for the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.',
    )


class AccountsAwsAccountIdNamespacesNamespaceUsersPostRequest(BaseModel):
    CustomFederationProviderUrl: Optional[str] = Field(
        None,
        description='The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.',
    )
    CustomPermissionsName: Optional[
        constr(pattern=r'^[a-zA-Z0-9+=,.@_-]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='<p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user\'s access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>To add custom permissions to an existing user, use <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_UpdateUser.html">UpdateUser</a> </code> instead.</p> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user. </p> <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p> <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>',
    )
    Email: str = Field(
        ..., description='The email address of the user that you want to register.'
    )
    ExternalLoginFederationProviderType: Optional[str] = Field(
        None,
        description='<p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p> <ul> <li> <p> <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p> </li> <li> <p> <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p> </li> </ul>',
    )
    ExternalLoginId: Optional[str] = Field(
        None, description='The identity ID for a user in the external login provider.'
    )
    IamArn: Optional[str] = Field(
        None,
        description='The ARN of the IAM user or role that you are registering with Amazon QuickSight. ',
    )
    IdentityType_1: IdentityType = Field(
        ...,
        alias='IdentityType',
        description='<p>Amazon QuickSight supports several ways of managing the identity of users. This parameter accepts two values:</p> <ul> <li> <p> <code>IAM</code>: A user whose identity maps to an existing IAM user or role. </p> </li> <li> <p> <code>QUICKSIGHT</code>: A user whose identity is owned and managed internally by Amazon QuickSight. </p> </li> </ul>',
    )
    SessionName: Optional[
        constr(pattern=r'[\w+=.@-]*', min_length=2, max_length=64)
    ] = Field(
        None,
        description='You need to use this parameter only when you register one or more users using an assumed IAM role. You don\'t need to provide the session name for other scenarios, for example when you are registering an IAM user or an Amazon QuickSight user. You can register multiple users using the same IAM role if each user has a different session name. For more information on assuming IAM roles, see <a href="https://docs.aws.amazon.com/cli/latest/reference/sts/assume-role.html"> <code>assume-role</code> </a> in the <i>CLI Reference.</i> ',
    )
    UserName: Optional[constr(pattern=r'[\u0020-\u00FF]+', min_length=1)] = Field(
        None,
        description='The Amazon QuickSight user name that you want to create for the user you are registering.',
    )
    UserRole_1: UserRole = Field(
        ...,
        alias='UserRole',
        description="<p>The Amazon QuickSight role for the user. The user role can be one of the following:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> <li> <p> <code>RESTRICTED_READER</code>: This role isn't currently available for use.</p> </li> <li> <p> <code>RESTRICTED_AUTHOR</code>: This role isn't currently available for use.</p> </li> </ul>",
    )


class Role(Enum):
    ADMIN = 'ADMIN'
    AUTHOR = 'AUTHOR'
    READER = 'READER'
    RESTRICTED_AUTHOR = 'RESTRICTED_AUTHOR'
    RESTRICTED_READER = 'RESTRICTED_READER'


class AccountsAwsAccountIdNamespacesNamespaceUsersUserNamePutRequest(BaseModel):
    CustomFederationProviderUrl: Optional[str] = Field(
        None,
        description='The URL of the custom OpenID Connect (OIDC) provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. This parameter should only be used when <code>ExternalLoginFederationProviderType</code> parameter is set to <code>CUSTOM_OIDC</code>.',
    )
    CustomPermissionsName: Optional[
        constr(pattern=r'^[a-zA-Z0-9+=,.@_-]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description="<p>(Enterprise edition only) The name of the custom permissions profile that you want to assign to this user. Customized permissions allows you to control a user's access by restricting access the following operations:</p> <ul> <li> <p>Create and update data sources</p> </li> <li> <p>Create and update datasets</p> </li> <li> <p>Create and update email reports</p> </li> <li> <p>Subscribe to email reports</p> </li> </ul> <p>A set of custom permissions includes any combination of these restrictions. Currently, you need to create the profile names for custom permission sets by using the Amazon QuickSight console. Then, you use the <code>RegisterUser</code> API operation to assign the named set of permissions to a Amazon QuickSight user. </p> <p>Amazon QuickSight custom permissions are applied through IAM policies. Therefore, they override the permissions typically granted by assigning Amazon QuickSight users to one of the default security cohorts in Amazon QuickSight (admin, author, reader).</p> <p>This feature is available only to Amazon QuickSight Enterprise edition subscriptions.</p>",
    )
    Email: str = Field(
        ..., description='The email address of the user that you want to update.'
    )
    ExternalLoginFederationProviderType: Optional[str] = Field(
        None,
        description='<p>The type of supported external login provider that provides identity to let a user federate into Amazon QuickSight with an associated Identity and Access Management(IAM) role. The type of supported external login provider can be one of the following.</p> <ul> <li> <p> <code>COGNITO</code>: Amazon Cognito. The provider URL is cognito-identity.amazonaws.com. When choosing the <code>COGNITO</code> provider type, don’t use the "CustomFederationProviderUrl" parameter which is only needed when the external provider is custom.</p> </li> <li> <p> <code>CUSTOM_OIDC</code>: Custom OpenID Connect (OIDC) provider. When choosing <code>CUSTOM_OIDC</code> type, use the <code>CustomFederationProviderUrl</code> parameter to provide the custom OIDC provider URL.</p> </li> <li> <p> <code>NONE</code>: This clears all the previously saved external login information for a user. Use the <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_DescribeUser.html">DescribeUser</a> </code> API operation to check the external login information.</p> </li> </ul>',
    )
    ExternalLoginId: Optional[str] = Field(
        None, description='The identity ID for a user in the external login provider.'
    )
    Role_1: Role = Field(
        ...,
        alias='Role',
        description='<p>The Amazon QuickSight role of the user. The role can be one of the following default security cohorts:</p> <ul> <li> <p> <code>READER</code>: A user who has read-only access to dashboards.</p> </li> <li> <p> <code>AUTHOR</code>: A user who can create data sources, datasets, analyses, and dashboards.</p> </li> <li> <p> <code>ADMIN</code>: A user who is an author, who can also manage Amazon QuickSight settings.</p> </li> </ul> <p>The name of the Amazon QuickSight role is invisible to the user except for the console screens dealing with permissions.</p>',
    )
    UnapplyCustomPermissions: Optional[bool] = Field(
        None,
        description="A flag that you use to indicate that you want to remove all custom permissions from this user. Using this parameter resets the user to the state it was in before a custom permissions profile was applied. This parameter defaults to NULL and it doesn't accept any other value.",
    )


class AccountsAwsAccountIdPublicSharingSettingsPutRequest(BaseModel):
    PublicSharingEnabled: Optional[bool] = Field(
        None,
        description='A Boolean value that indicates whether public sharing is turned on for an Amazon QuickSight account.',
    )


class AccountsAwsAccountIdSettingsPutRequest(BaseModel):
    DefaultNamespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Field(
        ...,
        description='The default namespace for this Amazon Web Services account. Currently, the default is <code>default</code>. IAM users that register for the first time with Amazon QuickSight provide an email address that becomes associated with the default namespace. ',
    )
    NotificationEmail: Optional[str] = Field(
        None,
        description='The email address that you want Amazon QuickSight to send notifications to regarding your Amazon Web Services account or Amazon QuickSight subscription.',
    )
    TerminationProtectionEnabled: Optional[bool] = Field(
        None,
        description="A boolean value that determines whether or not an Amazon QuickSight account can be deleted. A <code>True</code> value doesn't allow the account to be deleted and results in an error message if a user tries to make a <code>DeleteAccountSubscription</code> request. A <code>False</code> value will allow the account to be deleted.",
    )


class AccountsAwsAccountIdTemplatesTemplateIdAliasesAliasNamePostRequest(BaseModel):
    TemplateVersionNumber: conint(ge=1) = Field(
        ..., description='The version number of the template.'
    )


class AccountsAwsAccountIdTemplatesTemplateIdAliasesAliasNamePutRequest(BaseModel):
    TemplateVersionNumber: conint(ge=1) = Field(
        ..., description='The version number of the template.'
    )


class Type1(Enum):
    QUICKSIGHT = 'QUICKSIGHT'
    CUSTOM = 'CUSTOM'
    ALL = 'ALL'


class AccountsAwsAccountIdThemesThemeIdAliasesAliasNamePostRequest(BaseModel):
    ThemeVersionNumber: conint(ge=1) = Field(
        ..., description='The version number of the theme.'
    )


class AccountsAwsAccountIdThemesThemeIdAliasesAliasNamePutRequest(BaseModel):
    ThemeVersionNumber: conint(ge=1) = Field(
        ...,
        description='The version number of the theme that the alias should reference.',
    )


class Keys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class AccountInfo(BaseModel):
    AccountName: Optional[String] = None
    AccountSubscriptionStatus: Optional[String] = None
    AuthenticationType: Optional[String] = None
    Edition_1: Optional[Edition] = Field(None, alias='Edition')
    NotificationEmail: Optional[String] = None


class AccountSettings(BaseModel):
    AccountName: Optional[String] = None
    DefaultNamespace: Optional[Namespace] = None
    Edition_1: Optional[Edition] = Field(None, alias='Edition')
    NotificationEmail: Optional[String] = None
    PublicSharingEnabled: Optional[Boolean] = None
    TerminationProtectionEnabled: Optional[Boolean] = None


class ActionList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=16, min_length=1)


class ActiveIAMPolicyAssignment(BaseModel):
    AssignmentName: Optional[IAMPolicyAssignmentName] = None
    PolicyArn: Optional[Arn] = None


class ActiveIAMPolicyAssignmentList(RootModel[List[ActiveIAMPolicyAssignment]]):
    root: List[ActiveIAMPolicyAssignment]


class AdHocFilteringOption(BaseModel):
    AvailabilityStatus: Optional[DashboardBehavior] = None


class AdditionalDashboardIdList(RootModel[List[ShortRestrictiveResourceId]]):
    root: List[ShortRestrictiveResourceId] = Field(..., max_length=20, min_length=1)


class AmazonElasticsearchParameters(BaseModel):
    Domain_1: Domain = Field(..., alias='Domain')


class AmazonOpenSearchParameters(BaseModel):
    Domain_1: Domain = Field(..., alias='Domain')


class AnalysisSearchFilter(BaseModel):
    Name: Optional[AnalysisFilterAttribute] = None
    Operator: Optional[FilterOperator] = None
    Value: Optional[String] = None


class AnalysisSearchFilterList(RootModel[List[AnalysisSearchFilter]]):
    root: List[AnalysisSearchFilter] = Field(..., max_length=1, min_length=1)


class AnalysisSummary(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[AnalysisName] = None
    Status: Optional[ResourceStatus] = None


class AnalysisSummaryList(RootModel[List[AnalysisSummary]]):
    root: List[AnalysisSummary] = Field(..., max_length=100)


class AnchorDateConfiguration(BaseModel):
    AnchorOption_1: Optional[AnchorOption] = Field(None, alias='AnchorOption')
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')


class AnonymousUserDashboardEmbeddingConfiguration(BaseModel):
    InitialDashboardId: ShortRestrictiveResourceId


class AnonymousUserQSearchBarEmbeddingConfiguration(BaseModel):
    InitialTopicId: RestrictiveResourceId


class ArcAxisDisplayRange(BaseModel):
    Max: Optional[Double] = None
    Min: Optional[Double] = None


class ArcConfiguration(BaseModel):
    ArcAngle: Optional[Double] = None
    ArcThickness: Optional[ArcThicknessOptions] = None


class ArcOptions(BaseModel):
    ArcThickness_1: Optional[ArcThickness] = Field(None, alias='ArcThickness')


class AthenaParameters(BaseModel):
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    WorkGroup_1: Optional[WorkGroup] = Field(None, alias='WorkGroup')


class AuroraParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class AuroraPostgreSqlParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class AwsIotAnalyticsParameters(BaseModel):
    DataSetName_1: DataSetName = Field(..., alias='DataSetName')


class AxisDisplayMinMaxRange(BaseModel):
    Maximum: Optional[Double] = None
    Minimum: Optional[Double] = None


class AxisDisplayRange(BaseModel):
    DataDriven: Optional[AxisDisplayDataDrivenRange] = None
    MinMax: Optional[AxisDisplayMinMaxRange] = None


class AxisLinearScale(BaseModel):
    StepCount: Optional[Integer] = None
    StepSize: Optional[Double] = None


class AxisLogarithmicScale(BaseModel):
    Base: Optional[Double] = None


class AxisScale(BaseModel):
    Linear: Optional[AxisLinearScale] = None
    Logarithmic: Optional[AxisLogarithmicScale] = None


class BinCountOptions(BaseModel):
    Value: Optional[BinCountValue] = None


class BinWidthOptions(BaseModel):
    BinCountLimit_1: Optional[BinCountLimit] = Field(None, alias='BinCountLimit')
    Value: Optional[BinWidthValue] = None


class BoxPlotOptions(BaseModel):
    AllDataPointsVisibility: Optional[Visibility] = None
    OutlierVisibility: Optional[Visibility] = None
    StyleOptions: Optional[BoxPlotStyleOptions] = None


class CalculatedColumn(BaseModel):
    ColumnId_1: ColumnId = Field(..., alias='ColumnId')
    ColumnName_1: ColumnName = Field(..., alias='ColumnName')
    Expression_1: Expression = Field(..., alias='Expression')


class CalculatedColumnList(RootModel[List[CalculatedColumn]]):
    root: List[CalculatedColumn] = Field(..., max_length=128, min_length=1)


class CalculatedField(BaseModel):
    DataSetIdentifier_1: DataSetIdentifier = Field(..., alias='DataSetIdentifier')
    Expression_1: Expression = Field(..., alias='Expression')
    Name: ColumnName


class CalculatedFields(RootModel[List[CalculatedField]]):
    root: List[CalculatedField] = Field(..., max_length=100)


class CalculatedMeasureField(BaseModel):
    Expression_1: Expression = Field(..., alias='Expression')
    FieldId_1: FieldId = Field(..., alias='FieldId')


class CancelIngestionResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    IngestionId_1: Optional[IngestionId] = Field(None, alias='IngestionId')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CastColumnTypeOperation(BaseModel):
    ColumnName_1: ColumnName = Field(..., alias='ColumnName')
    Format: Optional[TypeCastFormat] = None
    NewColumnType: ColumnDataType


class ClusterMarker(BaseModel):
    SimpleClusterMarker_1: Optional[SimpleClusterMarker] = Field(
        None, alias='SimpleClusterMarker'
    )


class ClusterMarkerConfiguration(BaseModel):
    ClusterMarker_1: Optional[ClusterMarker] = Field(None, alias='ClusterMarker')


class ColorList(RootModel[List[HexColor]]):
    root: List[HexColor] = Field(..., max_length=100)


class ColumnDescription(BaseModel):
    Text: Optional[ColumnDescriptiveText] = None


class ColumnGroupColumnSchema(BaseModel):
    Name: Optional[String] = None


class ColumnGroupColumnSchemaList(RootModel[List[ColumnGroupColumnSchema]]):
    root: List[ColumnGroupColumnSchema] = Field(..., max_length=500)


class ColumnGroupSchema(BaseModel):
    ColumnGroupColumnSchemaList_1: Optional[ColumnGroupColumnSchemaList] = Field(
        None, alias='ColumnGroupColumnSchemaList'
    )
    Name: Optional[String] = None


class ColumnGroupSchemaList(RootModel[List[ColumnGroupSchema]]):
    root: List[ColumnGroupSchema] = Field(..., max_length=500)


class ColumnIdentifier(BaseModel):
    ColumnName_1: ColumnName = Field(..., alias='ColumnName')
    DataSetIdentifier_1: DataSetIdentifier = Field(..., alias='DataSetIdentifier')


class ColumnList(RootModel[List[ColumnName]]):
    root: List[ColumnName] = Field(..., max_length=16, min_length=1)


class ColumnNameList(RootModel[List[String]]):
    root: List[String] = Field(..., min_length=1)


class ColumnSchema(BaseModel):
    DataType: Optional[String] = None
    GeographicRole: Optional[String] = None
    Name: Optional[String] = None


class ColumnSchemaList(RootModel[List[ColumnSchema]]):
    root: List[ColumnSchema] = Field(..., max_length=500)


class ColumnTag(BaseModel):
    ColumnDescription_1: Optional[ColumnDescription] = Field(
        None, alias='ColumnDescription'
    )
    ColumnGeographicRole: Optional[GeoSpatialDataRole] = None


class ColumnTagList(RootModel[List[ColumnTag]]):
    root: List[ColumnTag] = Field(..., max_length=16, min_length=1)


class ConditionalFormattingCustomIconOptions(BaseModel):
    Icon_1: Optional[Icon] = Field(None, alias='Icon')
    UnicodeIcon_1: Optional[UnicodeIcon] = Field(None, alias='UnicodeIcon')


class ConditionalFormattingIconDisplayConfiguration(BaseModel):
    IconDisplayOption: Optional[ConditionalFormattingIconDisplayOption] = None


class ConditionalFormattingIconSet(BaseModel):
    Expression_1: Expression = Field(..., alias='Expression')
    IconSetType: Optional[ConditionalFormattingIconSetType] = None


class ConditionalFormattingSolidColor(BaseModel):
    Color: Optional[HexColor] = None
    Expression_1: Expression = Field(..., alias='Expression')


class ContributorDimensionList(RootModel[List[ColumnIdentifier]]):
    root: List[ColumnIdentifier] = Field(..., max_length=4, min_length=1)


class CreateAccountCustomizationResponse(BaseModel):
    AccountCustomization_1: Optional[AccountCustomization] = Field(
        None, alias='AccountCustomization'
    )
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AwsAccountId_1: Optional[AwsAccountId] = Field(None, alias='AwsAccountId')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateAnalysisResponse(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateColumnsOperation(BaseModel):
    Columns: CalculatedColumnList


class CreateDashboardResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    VersionArn: Optional[Arn] = None


class CreateDataSetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DataSetId: Optional[ResourceId] = None
    IngestionArn: Optional[Arn] = None
    IngestionId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateDataSourceResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    DataSourceId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateFolderResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FolderId: Optional[RestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateGroupRequest(BaseModel):
    Description: Optional[GroupDescription] = None
    GroupName_1: GroupName = Field(..., alias='GroupName')


class CreateIngestionRequest(BaseModel):
    IngestionType_1: Optional[IngestionType] = Field(None, alias='IngestionType')


class CreateIngestionResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    IngestionId_1: Optional[IngestionId] = Field(None, alias='IngestionId')
    IngestionStatus_1: Optional[IngestionStatus] = Field(None, alias='IngestionStatus')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateNamespaceResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CapacityRegion: Optional[String] = None
    CreationStatus: Optional[NamespaceStatus] = None
    IdentityStore_1: Optional[IdentityStore] = Field(None, alias='IdentityStore')
    Name: Optional[Namespace] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateRefreshScheduleResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    ScheduleId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateTemplateAliasRequest(BaseModel):
    TemplateVersionNumber: VersionNumber


class CreateTemplateResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None
    VersionArn: Optional[Arn] = None


class CreateThemeAliasRequest(BaseModel):
    ThemeVersionNumber: VersionNumber


class CreateThemeResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreationStatus: Optional[ResourceStatus] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None
    VersionArn: Optional[Arn] = None


class CustomActionURLOperation(BaseModel):
    URLTarget: URLTargetConfiguration
    URLTemplate: URLOperationTemplate


class CustomContentConfiguration(BaseModel):
    ContentType: Optional[CustomContentType] = None
    ContentUrl: Optional[URLOperationTemplate] = None
    ImageScaling: Optional[CustomContentImageScalingConfiguration] = None


class CustomFilterConfiguration(BaseModel):
    CategoryValue_1: Optional[CategoryValue] = Field(None, alias='CategoryValue')
    MatchOperator: CategoryFilterMatchOperator
    NullOption: FilterNullOption
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')
    SelectAllOptions: Optional[CategoryFilterSelectAllOptions] = None


class CustomFilterListConfiguration(BaseModel):
    CategoryValues: Optional[CategoryValueList] = None
    MatchOperator: CategoryFilterMatchOperator
    NullOption: FilterNullOption
    SelectAllOptions: Optional[CategoryFilterSelectAllOptions] = None


class CustomNarrativeOptions(BaseModel):
    Narrative: NarrativeString


class DashboardSearchFilter(BaseModel):
    Name: Optional[DashboardFilterAttribute] = None
    Operator: FilterOperator
    Value: Optional[String] = None


class DashboardSearchFilterList(RootModel[List[DashboardSearchFilter]]):
    root: List[DashboardSearchFilter] = Field(..., max_length=1, min_length=1)


class DashboardSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    LastPublishedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[DashboardName] = None
    PublishedVersionNumber: Optional[VersionNumber] = None


class DashboardSummaryList(RootModel[List[DashboardSummary]]):
    root: List[DashboardSummary] = Field(..., max_length=100)


class DashboardVersionSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    Description: Optional[VersionDescription] = None
    SourceEntityArn: Optional[Arn] = None
    Status: Optional[ResourceStatus] = None
    VersionNumber_1: Optional[VersionNumber] = Field(None, alias='VersionNumber')


class DashboardVersionSummaryList(RootModel[List[DashboardVersionSummary]]):
    root: List[DashboardVersionSummary] = Field(..., max_length=100)


class DashboardVisualId(BaseModel):
    DashboardId: ShortRestrictiveResourceId
    SheetId: ShortRestrictiveResourceId
    VisualId: ShortRestrictiveResourceId


class DashboardVisualPublishOptions(BaseModel):
    ExportHiddenFieldsOption_1: Optional[ExportHiddenFieldsOption] = Field(
        None, alias='ExportHiddenFieldsOption'
    )


class DataBarsOptions(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    NegativeColor: Optional[HexColor] = None
    PositiveColor: Optional[HexColor] = None


class DataColor(BaseModel):
    Color: Optional[HexColor] = None
    DataValue: Optional[Double] = None


class DataColorPalette(BaseModel):
    Colors: Optional[ColorList] = None
    EmptyFillColor: Optional[HexColor] = None
    MinMaxGradient: Optional[ColorList] = None


class DataPathLabelType(BaseModel):
    FieldId_1: Optional[FieldId] = Field(None, alias='FieldId')
    FieldValue_1: Optional[FieldValue] = Field(None, alias='FieldValue')
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class DataPathValue(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FieldValue_1: FieldValue = Field(..., alias='FieldValue')


class DataPathValueList(RootModel[List[DataPathValue]]):
    root: List[DataPathValue] = Field(..., max_length=20)


class DataSetReference(BaseModel):
    DataSetArn: Arn
    DataSetPlaceholder: NonEmptyString


class DataSetReferenceList(RootModel[List[DataSetReference]]):
    root: List[DataSetReference] = Field(..., min_length=1)


class DataSetSchema(BaseModel):
    ColumnSchemaList_1: Optional[ColumnSchemaList] = Field(
        None, alias='ColumnSchemaList'
    )


class DataSetSearchFilter(BaseModel):
    Name: DataSetFilterAttribute
    Operator: FilterOperator
    Value: String


class DataSetSearchFilterList(RootModel[List[DataSetSearchFilter]]):
    root: List[DataSetSearchFilter] = Field(..., max_length=1, min_length=1)


class DataSourceErrorInfo(BaseModel):
    Message: Optional[String] = None
    Type: Optional[DataSourceErrorInfoType] = None


class DataSourceSearchFilter(BaseModel):
    Name: DataSourceFilterAttribute
    Operator: FilterOperator
    Value: String


class DataSourceSearchFilterList(RootModel[List[DataSourceSearchFilter]]):
    root: List[DataSourceSearchFilter] = Field(..., max_length=1, min_length=1)


class DataSourceSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    DataSourceId: Optional[ResourceId] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[ResourceName] = None
    Type: Optional[DataSourceType] = None


class DataSourceSummaryList(RootModel[List[DataSourceSummary]]):
    root: List[DataSourceSummary]


class DatabricksParameters(BaseModel):
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')
    SqlEndpointPath_1: SqlEndpointPath = Field(..., alias='SqlEndpointPath')


class DateAxisOptions(BaseModel):
    MissingDateVisibility: Optional[Visibility] = None


class DateTimeDefaultValueList(RootModel[List[SensitiveTimestamp]]):
    root: List[SensitiveTimestamp] = Field(..., max_length=50000)


class DateTimeParameter(BaseModel):
    Name: NonEmptyString
    Values: SensitiveTimestampList


class DateTimeParameterList(RootModel[List[DateTimeParameter]]):
    root: List[DateTimeParameter] = Field(..., max_length=100)


class DateTimeValueWhenUnsetConfiguration(BaseModel):
    CustomValue: Optional[SensitiveTimestamp] = None
    ValueWhenUnsetOption_1: Optional[ValueWhenUnsetOption] = Field(
        None, alias='ValueWhenUnsetOption'
    )


class DecimalDefaultValueList(RootModel[List[SensitiveDoubleObject]]):
    root: List[SensitiveDoubleObject] = Field(..., max_length=50000)


class DecimalParameter(BaseModel):
    Name: NonEmptyString
    Values: SensitiveDoubleList


class DecimalParameterList(RootModel[List[DecimalParameter]]):
    root: List[DecimalParameter] = Field(..., max_length=100)


class DecimalValueWhenUnsetConfiguration(BaseModel):
    CustomValue: Optional[SensitiveDouble] = None
    ValueWhenUnsetOption_1: Optional[ValueWhenUnsetOption] = Field(
        None, alias='ValueWhenUnsetOption'
    )


class DeleteAccountCustomizationResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteAccountSubscriptionResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteAnalysisResponse(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DeletionTime: Optional[Timestamp] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteDashboardResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteDataSetRefreshPropertiesResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteDataSetResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DataSetId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteDataSourceResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    DataSourceId: Optional[ResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteFolderMembershipResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteFolderResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FolderId: Optional[RestrictiveResourceId] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteGroupMembershipResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteGroupResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteIAMPolicyAssignmentResponse(BaseModel):
    AssignmentName: Optional[IAMPolicyAssignmentName] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteNamespaceResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteRefreshScheduleResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    ScheduleId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteTemplateAliasResponse(BaseModel):
    AliasName_1: Optional[AliasName] = Field(None, alias='AliasName')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None


class DeleteTemplateResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None


class DeleteThemeAliasResponse(BaseModel):
    AliasName_1: Optional[AliasName] = Field(None, alias='AliasName')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None


class DeleteThemeResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None


class DeleteUserByPrincipalIdResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DeleteUserResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeAccountCustomizationResponse(BaseModel):
    AccountCustomization_1: Optional[AccountCustomization] = Field(
        None, alias='AccountCustomization'
    )
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AwsAccountId_1: Optional[AwsAccountId] = Field(None, alias='AwsAccountId')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeAccountSettingsResponse(BaseModel):
    AccountSettings_1: Optional[AccountSettings] = Field(None, alias='AccountSettings')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeAccountSubscriptionResponse(BaseModel):
    AccountInfo_1: Optional[AccountInfo] = Field(None, alias='AccountInfo')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeIpRestrictionResponse(BaseModel):
    AwsAccountId_1: Optional[AwsAccountId] = Field(None, alias='AwsAccountId')
    Enabled: Optional[NullableBoolean] = None
    IpRestrictionRuleMap_1: Optional[IpRestrictionRuleMap] = Field(
        None, alias='IpRestrictionRuleMap'
    )
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DonutCenterOptions(BaseModel):
    LabelVisibility: Optional[Visibility] = None


class DonutOptions(BaseModel):
    ArcOptions_1: Optional[ArcOptions] = Field(None, alias='ArcOptions')
    DonutCenterOptions_1: Optional[DonutCenterOptions] = Field(
        None, alias='DonutCenterOptions'
    )


class DynamicDefaultValue(BaseModel):
    DefaultValueColumn: ColumnIdentifier
    GroupNameColumn: Optional[ColumnIdentifier] = None
    UserNameColumn: Optional[ColumnIdentifier] = None


class Entity(BaseModel):
    Path: Optional[NonEmptyString] = None


class EntityList(RootModel[List[Entity]]):
    root: List[Entity] = Field(..., max_length=200)


class ErrorInfo(BaseModel):
    Message: Optional[String] = None
    Type: Optional[IngestionErrorType] = None


class ExasolParameters(BaseModel):
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class ExcludePeriodConfiguration(BaseModel):
    Amount: Integer
    Granularity: TimeGranularity
    Status: Optional[WidgetStatus] = None


class ExplicitHierarchyColumnList(RootModel[List[ColumnIdentifier]]):
    root: List[ColumnIdentifier] = Field(..., max_length=10, min_length=2)


class FieldLabelType(BaseModel):
    FieldId_1: Optional[FieldId] = Field(None, alias='FieldId')
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class FieldSort(BaseModel):
    Direction: SortDirection
    FieldId_1: FieldId = Field(..., alias='FieldId')


class FieldTooltipItem(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    Label: Optional[String] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class FilterOperationSelectedFieldsConfiguration(BaseModel):
    SelectedFieldOptions_1: Optional[SelectedFieldOptions] = Field(
        None, alias='SelectedFieldOptions'
    )
    SelectedFields: Optional[SelectedFieldList] = None


class FilteredVisualsList(RootModel[List[ShortRestrictiveResourceId]]):
    root: List[ShortRestrictiveResourceId] = Field(..., max_length=50)


class Folder(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    FolderId: Optional[RestrictiveResourceId] = None
    FolderPath: Optional[Path] = None
    FolderType_1: Optional[FolderType] = Field(None, alias='FolderType')
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[FolderName] = None


class FolderColumnList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=5000)


class FolderMember(BaseModel):
    MemberId: Optional[RestrictiveResourceId] = None
    MemberType_1: Optional[MemberType] = Field(None, alias='MemberType')


class FolderSearchFilter(BaseModel):
    Name: Optional[FolderFilterAttribute] = None
    Operator: Optional[FilterOperator] = None
    Value: Optional[String] = None


class FolderSearchFilterList(RootModel[List[FolderSearchFilter]]):
    root: List[FolderSearchFilter] = Field(..., max_length=100)


class FolderSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    FolderId: Optional[RestrictiveResourceId] = None
    FolderType_1: Optional[FolderType] = Field(None, alias='FolderType')
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[FolderName] = None


class FolderSummaryList(RootModel[List[FolderSummary]]):
    root: List[FolderSummary] = Field(..., max_length=100)


class Font(BaseModel):
    FontFamily: Optional[String] = None


class FontList(RootModel[List[Font]]):
    root: List[Font] = Field(..., max_length=5)


class FontSize(BaseModel):
    Relative: Optional[RelativeFontSize] = None


class FontWeight(BaseModel):
    Name: Optional[FontWeightName] = None


class ForecastScenario(BaseModel):
    WhatIfPointScenario_1: Optional[WhatIfPointScenario] = Field(
        None, alias='WhatIfPointScenario'
    )
    WhatIfRangeScenario_1: Optional[WhatIfRangeScenario] = Field(
        None, alias='WhatIfRangeScenario'
    )


class FreeFormLayoutElementBackgroundStyle(BaseModel):
    Color: Optional[HexColorWithTransparency] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class FreeFormLayoutElementBorderStyle(BaseModel):
    Color: Optional[HexColorWithTransparency] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class FreeFormLayoutScreenCanvasSizeOptions(BaseModel):
    OptimizedViewPortWidth: PixelLength


class GenerateEmbedUrlForAnonymousUserResponse(BaseModel):
    AnonymousUserArn: Arn
    EmbedUrl: EmbeddingUrl
    RequestId: String
    Status: StatusCode


class GenerateEmbedUrlForRegisteredUserResponse(BaseModel):
    EmbedUrl: EmbeddingUrl
    RequestId: String
    Status: StatusCode


class GeoSpatialColumnGroup(BaseModel):
    Columns: ColumnList
    CountryCode: Optional[GeoSpatialCountryCode] = None
    Name: ColumnGroupName


class GeospatialCoordinateBounds(BaseModel):
    East: Longitude
    North: Latitude
    South: Latitude
    West: Longitude


class GeospatialPointStyleOptions(BaseModel):
    ClusterMarkerConfiguration_1: Optional[ClusterMarkerConfiguration] = Field(
        None, alias='ClusterMarkerConfiguration'
    )
    SelectedPointStyle: Optional[GeospatialSelectedPointStyle] = None


class GeospatialWindowOptions(BaseModel):
    Bounds: Optional[GeospatialCoordinateBounds] = None
    MapZoomMode_1: Optional[MapZoomMode] = Field(None, alias='MapZoomMode')


class GetDashboardEmbedUrlResponse(BaseModel):
    EmbedUrl: Optional[EmbeddingUrl] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class GetSessionEmbedUrlResponse(BaseModel):
    EmbedUrl: Optional[EmbeddingUrl] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class GradientStop(BaseModel):
    Color: Optional[HexColor] = None
    DataValue: Optional[Double] = None
    GradientOffset: Double


class GradientStopList(RootModel[List[GradientStop]]):
    root: List[GradientStop] = Field(..., max_length=100)


class GridLayoutElement(BaseModel):
    ColumnIndex: Optional[GridLayoutElementColumnIndex] = None
    ColumnSpan: GridLayoutElementColumnSpan
    ElementId: ShortRestrictiveResourceId
    ElementType: LayoutElementType
    RowIndex: Optional[GridLayoutElementRowIndex] = None
    RowSpan: GridLayoutElementRowSpan


class GridLayoutElementList(RootModel[List[GridLayoutElement]]):
    root: List[GridLayoutElement] = Field(..., max_length=430)


class GridLayoutScreenCanvasSizeOptions(BaseModel):
    OptimizedViewPortWidth: Optional[PixelLength] = None
    ResizeOption_1: ResizeOption = Field(..., alias='ResizeOption')


class Group(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description: Optional[GroupDescription] = None
    GroupName_1: Optional[GroupName] = Field(None, alias='GroupName')
    PrincipalId: Optional[String] = None


class GroupList(RootModel[List[Group]]):
    root: List[Group]


class GroupMember(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    MemberName: Optional[GroupMemberName] = None


class GroupMemberList(RootModel[List[GroupMember]]):
    root: List[GroupMember]


class GroupSearchFilter(BaseModel):
    Name: GroupFilterAttribute
    Operator: GroupFilterOperator
    Value: String


class GroupSearchFilterList(RootModel[List[GroupSearchFilter]]):
    root: List[GroupSearchFilter] = Field(..., max_length=1, min_length=1)


class GroupsList(RootModel[List[String]]):
    root: List[String]


class HistogramBinOptions(BaseModel):
    BinCount: Optional[BinCountOptions] = None
    BinWidth: Optional[BinWidthOptions] = None
    SelectedBinType: Optional[HistogramBinType] = None
    StartValue: Optional[Double] = None


class IdentityMap(RootModel[Optional[Dict[str, IdentityNameList]]]):
    root: Optional[Dict[str, IdentityNameList]] = None


class InputColumn(BaseModel):
    Name: ColumnName
    Type: InputColumnDataType


class InputColumnList(RootModel[List[InputColumn]]):
    root: List[InputColumn] = Field(..., max_length=2048, min_length=1)


class IntegerDefaultValueList(RootModel[List[SensitiveLongObject]]):
    root: List[SensitiveLongObject] = Field(..., max_length=50000)


class IntegerDefaultValues(BaseModel):
    DynamicValue: Optional[DynamicDefaultValue] = None
    StaticValues: Optional[IntegerDefaultValueList] = None


class IntegerParameter(BaseModel):
    Name: NonEmptyString
    Values: SensitiveLongList


class IntegerParameterList(RootModel[List[IntegerParameter]]):
    root: List[IntegerParameter] = Field(..., max_length=100)


class IntegerValueWhenUnsetConfiguration(BaseModel):
    CustomValue: Optional[SensitiveLong] = None
    ValueWhenUnsetOption_1: Optional[ValueWhenUnsetOption] = Field(
        None, alias='ValueWhenUnsetOption'
    )


class ItemsLimitConfiguration(BaseModel):
    ItemsLimit: Optional[Long] = None
    OtherCategories_1: Optional[OtherCategories] = Field(None, alias='OtherCategories')


class JiraParameters(BaseModel):
    SiteBaseUrl_1: SiteBaseUrl = Field(..., alias='SiteBaseUrl')


class JoinInstruction(BaseModel):
    LeftJoinKeyProperties: Optional[JoinKeyProperties] = None
    LeftOperand: LogicalTableId
    OnClause_1: OnClause = Field(..., alias='OnClause')
    RightJoinKeyProperties: Optional[JoinKeyProperties] = None
    RightOperand: LogicalTableId
    Type: JoinType


class LineChartLineStyleSettings(BaseModel):
    LineInterpolation_1: Optional[LineInterpolation] = Field(
        None, alias='LineInterpolation'
    )
    LineStyle: Optional[LineChartLineStyle] = None
    LineVisibility: Optional[Visibility] = None
    LineWidth: Optional[PixelLength] = None


class LineChartMarkerStyleSettings(BaseModel):
    MarkerColor: Optional[HexColor] = None
    MarkerShape: Optional[LineChartMarkerShape] = None
    MarkerSize: Optional[PixelLength] = None
    MarkerVisibility: Optional[Visibility] = None


class LineChartSeriesSettings(BaseModel):
    LineStyleSettings: Optional[LineChartLineStyleSettings] = None
    MarkerStyleSettings: Optional[LineChartMarkerStyleSettings] = None


class ListAnalysesResponse(BaseModel):
    AnalysisSummaryList_1: Optional[AnalysisSummaryList] = Field(
        None, alias='AnalysisSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListControlSearchOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ListControlSelectAllOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ListDashboardVersionsResponse(BaseModel):
    DashboardVersionSummaryList_1: Optional[DashboardVersionSummaryList] = Field(
        None, alias='DashboardVersionSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListDashboardsResponse(BaseModel):
    DashboardSummaryList_1: Optional[DashboardSummaryList] = Field(
        None, alias='DashboardSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListFoldersResponse(BaseModel):
    FolderSummaryList_1: Optional[FolderSummaryList] = Field(
        None, alias='FolderSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListGroupMembershipsResponse(BaseModel):
    GroupMemberList_1: Optional[GroupMemberList] = Field(None, alias='GroupMemberList')
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListGroupsResponse(BaseModel):
    GroupList_1: Optional[GroupList] = Field(None, alias='GroupList')
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListIAMPolicyAssignmentsForUserResponse(BaseModel):
    ActiveAssignments: Optional[ActiveIAMPolicyAssignmentList] = None
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListIAMPolicyAssignmentsResponse(BaseModel):
    IAMPolicyAssignments: Optional[IAMPolicyAssignmentSummaryList] = None
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListUserGroupsResponse(BaseModel):
    GroupList_1: Optional[GroupList] = Field(None, alias='GroupList')
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class LoadingAnimation(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class LocalNavigationConfiguration(BaseModel):
    TargetSheetId: ShortRestrictiveResourceId


class LogicalTableSource(BaseModel):
    DataSetArn: Optional[Arn] = None
    JoinInstruction_1: Optional[JoinInstruction] = Field(None, alias='JoinInstruction')
    PhysicalTableId_1: Optional[PhysicalTableId] = Field(None, alias='PhysicalTableId')


class LongFormatText(BaseModel):
    PlainText: Optional[LongPlainText] = None
    RichText: Optional[LongRichText] = None


class LookbackWindow(BaseModel):
    ColumnName: String
    Size: PositiveLong
    SizeUnit: LookbackWindowSizeUnit


class ManifestFileLocation(BaseModel):
    Bucket: S3Bucket
    Key: S3Key


class MariaDbParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class MaximumLabelType(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class MemberIdArnPair(BaseModel):
    MemberArn: Optional[Arn] = None
    MemberId: Optional[RestrictiveResourceId] = None


class MinimumLabelType(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class MissingDataConfiguration(BaseModel):
    TreatmentOption: Optional[MissingDataTreatmentOption] = None


class MissingDataConfigurationList(RootModel[List[MissingDataConfiguration]]):
    root: List[MissingDataConfiguration] = Field(..., max_length=100)


class MySqlParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class NamespaceError(BaseModel):
    Message: Optional[String] = None
    Type: Optional[NamespaceErrorType] = None


class NamespaceInfoV2(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CapacityRegion: Optional[String] = None
    CreationStatus: Optional[NamespaceStatus] = None
    IdentityStore_1: Optional[IdentityStore] = Field(None, alias='IdentityStore')
    Name: Optional[Namespace] = None
    NamespaceError_1: Optional[NamespaceError] = Field(None, alias='NamespaceError')


class Namespaces(RootModel[List[NamespaceInfoV2]]):
    root: List[NamespaceInfoV2]


class NegativeValueConfiguration(BaseModel):
    DisplayMode: NegativeValueDisplayMode


class NumericAxisOptions(BaseModel):
    Range: Optional[AxisDisplayRange] = None
    Scale: Optional[AxisScale] = None


class NumericEqualityDrillDownFilter(BaseModel):
    Column: ColumnIdentifier
    Value: Double


class NumericRangeFilterValue(BaseModel):
    Parameter: Optional[ParameterName] = None
    StaticValue: Optional[Double] = None


class OracleParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class ParameterSelectableValueList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=50000)


class ParameterSelectableValues(BaseModel):
    LinkToDataSetColumn: Optional[ColumnIdentifier] = None
    Values: Optional[ParameterSelectableValueList] = None


class Parameters(BaseModel):
    DateTimeParameters: Optional[DateTimeParameterList] = None
    DecimalParameters: Optional[DecimalParameterList] = None
    IntegerParameters: Optional[IntegerParameterList] = None
    StringParameters: Optional[StringParameterList] = None


class PercentileAggregation(BaseModel):
    PercentileValue_1: Optional[PercentileValue] = Field(None, alias='PercentileValue')


class PivotTableConditionalFormattingScope(BaseModel):
    Role: Optional[PivotTableConditionalFormattingScopeRole] = None


class PivotTableDataPathOption(BaseModel):
    DataPathList: DataPathValueList
    Width: Optional[PixelLength] = None


class PivotTableDataPathOptionList(RootModel[List[PivotTableDataPathOption]]):
    root: List[PivotTableDataPathOption] = Field(..., max_length=100)


class PivotTableFieldOption(BaseModel):
    CustomLabel_1: Optional[CustomLabel] = Field(None, alias='CustomLabel')
    FieldId_1: FieldId = Field(..., alias='FieldId')
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class PivotTableFieldOptionList(RootModel[List[PivotTableFieldOption]]):
    root: List[PivotTableFieldOption] = Field(..., max_length=100)


class PivotTableFieldOptions(BaseModel):
    DataPathOptions: Optional[PivotTableDataPathOptionList] = None
    SelectedFieldOptions: Optional[PivotTableFieldOptionList] = None


class PivotTablePaginatedReportOptions(BaseModel):
    OverflowColumnHeaderVisibility: Optional[Visibility] = None
    VerticalOverflowVisibility: Optional[Visibility] = None


class PredefinedHierarchyColumnList(RootModel[List[ColumnIdentifier]]):
    root: List[ColumnIdentifier] = Field(..., max_length=10, min_length=1)


class PrincipalList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=100, min_length=1)


class ProgressBarOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ProjectedColumnList(RootModel[List[String]]):
    root: List[String] = Field(..., max_length=2000, min_length=1)


class PutDataSetRefreshPropertiesResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class QueueInfo(BaseModel):
    QueuedIngestion: String
    WaitingOnIngestion: String


class RadarChartAreaStyleSettings(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class RadarChartSeriesSettings(BaseModel):
    AreaStyleSettings: Optional[RadarChartAreaStyleSettings] = None


class RangeEndsLabelType(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ReferenceLineStaticDataConfiguration(BaseModel):
    Value: SensitiveDouble


class RefreshFrequency(BaseModel):
    Interval: RefreshInterval
    RefreshOnDay: Optional[ScheduleRefreshOnEntity] = None
    TimeOfTheDay: Optional[String] = None
    Timezone: Optional[String] = None


class RefreshSchedule(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RefreshType: IngestionType
    ScheduleFrequency: RefreshFrequency
    ScheduleId: String
    StartAfterDateTime: Optional[Timestamp] = None


class RefreshSchedules(RootModel[List[RefreshSchedule]]):
    root: List[RefreshSchedule]


class RegisterUserRequest(BaseModel):
    CustomFederationProviderUrl: Optional[String] = None
    CustomPermissionsName: Optional[RoleName] = None
    Email: String
    ExternalLoginFederationProviderType: Optional[String] = None
    ExternalLoginId: Optional[String] = None
    IamArn: Optional[String] = None
    IdentityType_1: IdentityType = Field(..., alias='IdentityType')
    SessionName: Optional[RoleSessionName] = None
    UserName_1: Optional[UserName] = Field(None, alias='UserName')
    UserRole_1: UserRole = Field(..., alias='UserRole')


class RegisteredUserConsoleFeatureConfigurations(BaseModel):
    StatePersistence: Optional[StatePersistenceConfigurations] = None


class RegisteredUserDashboardFeatureConfigurations(BaseModel):
    StatePersistence: Optional[StatePersistenceConfigurations] = None


class RegisteredUserDashboardVisualEmbeddingConfiguration(BaseModel):
    InitialDashboardVisualId: DashboardVisualId


class RegisteredUserQSearchBarEmbeddingConfiguration(BaseModel):
    InitialTopicId: Optional[RestrictiveResourceId] = None


class RegisteredUserQuickSightConsoleEmbeddingConfiguration(BaseModel):
    FeatureConfigurations: Optional[RegisteredUserConsoleFeatureConfigurations] = None
    InitialPath: Optional[EntryPath] = None


class RelationalTable(BaseModel):
    Catalog: Optional[RelationalTableCatalog] = None
    DataSourceArn: Arn
    InputColumns: InputColumnList
    Name: RelationalTableName
    Schema: Optional[RelationalTableSchema] = None


class RelativeDatesFilter(BaseModel):
    AnchorDateConfiguration_1: AnchorDateConfiguration = Field(
        ..., alias='AnchorDateConfiguration'
    )
    Column: ColumnIdentifier
    ExcludePeriodConfiguration_1: Optional[ExcludePeriodConfiguration] = Field(
        None, alias='ExcludePeriodConfiguration'
    )
    FilterId: ShortRestrictiveResourceId
    MinimumGranularity: Optional[TimeGranularity] = None
    NullOption: FilterNullOption
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')
    RelativeDateType_1: RelativeDateType = Field(..., alias='RelativeDateType')
    RelativeDateValue: Optional[Integer] = None
    TimeGranularity_1: TimeGranularity = Field(..., alias='TimeGranularity')


class ResourcePermission(BaseModel):
    Actions: ActionList
    Principal_1: Principal = Field(..., alias='Principal')


class ResourcePermissionList(RootModel[List[ResourcePermission]]):
    root: List[ResourcePermission] = Field(..., max_length=64, min_length=1)


class RestoreAnalysisResponse(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class RowAlternateColorOptions(BaseModel):
    RowAlternateColors: Optional[RowAlternateColorList] = None
    Status: Optional[WidgetStatus] = None


class RowLevelPermissionDataSet(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    FormatVersion: Optional[RowLevelPermissionFormatVersion] = None
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    PermissionPolicy: RowLevelPermissionPolicy
    Status_1: Optional[Status] = Field(None, alias='Status')


class RowLevelPermissionTagRule(BaseModel):
    ColumnName: String
    MatchAllValue: Optional[SessionTagValue] = None
    TagKey: SessionTagKey
    TagMultiValueDelimiter: Optional[RowLevelPermissionTagDelimiter] = None


class RowLevelPermissionTagRuleConfiguration(RootModel[List[SessionTagKey]]):
    root: List[SessionTagKey] = Field(..., max_length=50, min_length=1)


class RowLevelPermissionTagRuleConfigurationList(
    RootModel[List[RowLevelPermissionTagRuleConfiguration]]
):
    root: List[RowLevelPermissionTagRuleConfiguration] = Field(
        ..., max_length=50, min_length=1
    )


class RowLevelPermissionTagRuleList(RootModel[List[RowLevelPermissionTagRule]]):
    root: List[RowLevelPermissionTagRule] = Field(..., max_length=50, min_length=1)


class S3Parameters(BaseModel):
    ManifestFileLocation_1: ManifestFileLocation = Field(
        ..., alias='ManifestFileLocation'
    )
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class S3Source(BaseModel):
    DataSourceArn: Arn
    InputColumns: InputColumnList
    UploadSettings_1: Optional[UploadSettings] = Field(None, alias='UploadSettings')


class SameSheetTargetVisualConfiguration(BaseModel):
    TargetVisualOptions_1: Optional[TargetVisualOptions] = Field(
        None, alias='TargetVisualOptions'
    )
    TargetVisuals: Optional[TargetVisualList] = None


class ScrollBarOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')
    VisibleRange: Optional[VisibleRangeOptions] = None


class SearchAnalysesRequest(BaseModel):
    Filters: AnalysisSearchFilterList
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None


class SearchAnalysesResponse(BaseModel):
    AnalysisSummaryList_1: Optional[AnalysisSummaryList] = Field(
        None, alias='AnalysisSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class SearchDashboardsRequest(BaseModel):
    Filters: DashboardSearchFilterList
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None


class SearchDashboardsResponse(BaseModel):
    DashboardSummaryList_1: Optional[DashboardSummaryList] = Field(
        None, alias='DashboardSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class SearchDataSetsRequest(BaseModel):
    Filters: DataSetSearchFilterList
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None


class SearchDataSourcesRequest(BaseModel):
    Filters: DataSourceSearchFilterList
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None


class SearchDataSourcesResponse(BaseModel):
    DataSourceSummaries: Optional[DataSourceSummaryList] = None
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class SearchFoldersRequest(BaseModel):
    Filters: FolderSearchFilterList
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[String] = None


class SearchFoldersResponse(BaseModel):
    FolderSummaryList_1: Optional[FolderSummaryList] = Field(
        None, alias='FolderSummaryList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class SearchGroupsRequest(BaseModel):
    Filters: GroupSearchFilterList


class SearchGroupsResponse(BaseModel):
    GroupList_1: Optional[GroupList] = Field(None, alias='GroupList')
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class SecondaryValueOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class SectionAfterPageBreak(BaseModel):
    Status: Optional[SectionPageBreakStatus] = None


class SectionBasedLayoutPaperCanvasSizeOptions(BaseModel):
    PaperMargin: Optional[Spacing] = None
    PaperOrientation_1: Optional[PaperOrientation] = Field(
        None, alias='PaperOrientation'
    )
    PaperSize_1: Optional[PaperSize] = Field(None, alias='PaperSize')


class SectionPageBreakConfiguration(BaseModel):
    After: Optional[SectionAfterPageBreak] = None


class SectionStyle(BaseModel):
    Height: Optional[PixelLength] = None
    Padding: Optional[Spacing] = None


class ServiceNowParameters(BaseModel):
    SiteBaseUrl_1: SiteBaseUrl = Field(..., alias='SiteBaseUrl')


class SessionTag(BaseModel):
    Key: SessionTagKey
    Value: SessionTagValue


class SessionTagList(RootModel[List[SessionTag]]):
    root: List[SessionTag] = Field(..., max_length=50, min_length=1)


class Sheet(BaseModel):
    Name: Optional[SheetName] = None
    SheetId: Optional[ShortRestrictiveResourceId] = None


class SheetElementConfigurationOverrides(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class SheetElementRenderingRule(BaseModel):
    ConfigurationOverrides: SheetElementConfigurationOverrides
    Expression_1: Expression = Field(..., alias='Expression')


class SheetElementRenderingRuleList(RootModel[List[SheetElementRenderingRule]]):
    root: List[SheetElementRenderingRule] = Field(..., max_length=10000)


class SheetList(RootModel[List[Sheet]]):
    root: List[Sheet] = Field(..., max_length=20)


class SheetStyle(BaseModel):
    Tile: Optional[TileStyle] = None
    TileLayout: Optional[TileLayoutStyle] = None


class SheetTextBox(BaseModel):
    Content: Optional[SheetTextBoxContent] = None
    SheetTextBoxId: ShortRestrictiveResourceId


class SheetTextBoxList(RootModel[List[SheetTextBox]]):
    root: List[SheetTextBox] = Field(..., max_length=100)


class SheetVisualScopingConfiguration(BaseModel):
    Scope: FilterVisualScope
    SheetId: ShortRestrictiveResourceId
    VisualIds: Optional[FilteredVisualsList] = None


class SheetVisualScopingConfigurations(
    RootModel[List[SheetVisualScopingConfiguration]]
):
    root: List[SheetVisualScopingConfiguration] = Field(
        ..., max_length=50, min_length=1
    )


class ShortFormatText(BaseModel):
    PlainText: Optional[ShortPlainText] = None
    RichText: Optional[ShortRichText] = None


class SignupResponse(BaseModel):
    IAMUser: Optional[Boolean] = None
    accountName: Optional[String] = None
    directoryType: Optional[String] = None
    userLoginName: Optional[String] = None


class SnowflakeParameters(BaseModel):
    Database_1: Database = Field(..., alias='Database')
    Host_1: Host = Field(..., alias='Host')
    Warehouse_1: Warehouse = Field(..., alias='Warehouse')


class StringDefaultValues(BaseModel):
    DynamicValue: Optional[DynamicDefaultValue] = None
    StaticValues: Optional[StringDefaultValueList] = None


class StringValueWhenUnsetConfiguration(BaseModel):
    CustomValue: Optional[SensitiveString] = None
    ValueWhenUnsetOption_1: Optional[ValueWhenUnsetOption] = Field(
        None, alias='ValueWhenUnsetOption'
    )


class TableBorderOptions(BaseModel):
    Color: Optional[HexColor] = None
    Style: Optional[TableBorderStyle] = None
    Thickness: Optional[TableBorderThickness] = None


class TableFieldCustomIconContent(BaseModel):
    Icon: Optional[TableFieldIconSetType] = None


class TableInlineVisualization(BaseModel):
    DataBars: Optional[DataBarsOptions] = None


class TableInlineVisualizationList(RootModel[List[TableInlineVisualization]]):
    root: List[TableInlineVisualization] = Field(..., max_length=200)


class TablePaginatedReportOptions(BaseModel):
    OverflowColumnHeaderVisibility: Optional[Visibility] = None
    VerticalOverflowVisibility: Optional[Visibility] = None


class TableSideBorderOptions(BaseModel):
    Bottom: Optional[TableBorderOptions] = None
    InnerHorizontal: Optional[TableBorderOptions] = None
    InnerVertical: Optional[TableBorderOptions] = None
    Left: Optional[TableBorderOptions] = None
    Right: Optional[TableBorderOptions] = None
    Top: Optional[TableBorderOptions] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagColumnOperation(BaseModel):
    ColumnName_1: ColumnName = Field(..., alias='ColumnName')
    Tags: ColumnTagList


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=1)


class TagResourceRequest(BaseModel):
    Tags: TagList


class TemplateAlias(BaseModel):
    AliasName_1: Optional[AliasName] = Field(None, alias='AliasName')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    TemplateVersionNumber: Optional[VersionNumber] = None


class TemplateAliasList(RootModel[List[TemplateAlias]]):
    root: List[TemplateAlias] = Field(..., max_length=100)


class TemplateError(BaseModel):
    Message: Optional[NonEmptyString] = None
    Type: Optional[TemplateErrorType] = None
    ViolatedEntities: Optional[EntityList] = None


class TemplateErrorList(RootModel[List[TemplateError]]):
    root: List[TemplateError] = Field(..., min_length=1)


class TemplateSourceAnalysis(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    DataSetReferences: DataSetReferenceList


class TemplateSourceEntity(BaseModel):
    SourceAnalysis: Optional[TemplateSourceAnalysis] = None
    SourceTemplate: Optional[TemplateSourceTemplate] = None


class TemplateSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    LatestVersionNumber: Optional[VersionNumber] = None
    Name: Optional[TemplateName] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None


class TemplateSummaryList(RootModel[List[TemplateSummary]]):
    root: List[TemplateSummary] = Field(..., max_length=100)


class TemplateVersionSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    Description: Optional[VersionDescription] = None
    Status: Optional[ResourceStatus] = None
    VersionNumber_1: Optional[VersionNumber] = Field(None, alias='VersionNumber')


class TemplateVersionSummaryList(RootModel[List[TemplateVersionSummary]]):
    root: List[TemplateVersionSummary] = Field(..., max_length=100)


class TextControlPlaceholderOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ThemeAlias(BaseModel):
    AliasName_1: Optional[AliasName] = Field(None, alias='AliasName')
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    ThemeVersionNumber: Optional[VersionNumber] = None


class ThemeAliasList(RootModel[List[ThemeAlias]]):
    root: List[ThemeAlias] = Field(..., max_length=100)


class ThemeError(BaseModel):
    Message: Optional[NonEmptyString] = None
    Type: Optional[ThemeErrorType] = None


class ThemeErrorList(RootModel[List[ThemeError]]):
    root: List[ThemeError] = Field(..., min_length=1)


class ThemeSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    LatestVersionNumber: Optional[VersionNumber] = None
    Name: Optional[ThemeName] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None


class ThemeSummaryList(RootModel[List[ThemeSummary]]):
    root: List[ThemeSummary] = Field(..., max_length=100)


class ThemeVersionSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    Description: Optional[VersionDescription] = None
    Status: Optional[ResourceStatus] = None
    VersionNumber_1: Optional[VersionNumber] = Field(None, alias='VersionNumber')


class ThemeVersionSummaryList(RootModel[List[ThemeVersionSummary]]):
    root: List[ThemeVersionSummary] = Field(..., max_length=100)


class ThousandSeparatorOptions(BaseModel):
    Symbol: Optional[NumericSeparatorSymbol] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class TimeEqualityFilter(BaseModel):
    Column: ColumnIdentifier
    FilterId: ShortRestrictiveResourceId
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')
    TimeGranularity_1: Optional[TimeGranularity] = Field(None, alias='TimeGranularity')
    Value: Optional[Timestamp] = None


class TimeRangeDrillDownFilter(BaseModel):
    Column: ColumnIdentifier
    RangeMaximum: Timestamp
    RangeMinimum: Timestamp
    TimeGranularity_1: TimeGranularity = Field(..., alias='TimeGranularity')


class TimeRangeFilterValue(BaseModel):
    Parameter: Optional[ParameterName] = None
    RollingDate: Optional[RollingDateConfiguration] = None
    StaticValue: Optional[Timestamp] = None


class TrendArrowOptions(BaseModel):
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class Typography(BaseModel):
    FontFamilies: Optional[FontList] = None


class UpdateAccountCustomizationRequest(BaseModel):
    AccountCustomization_1: AccountCustomization = Field(
        ..., alias='AccountCustomization'
    )


class UpdateAccountCustomizationResponse(BaseModel):
    AccountCustomization_1: Optional[AccountCustomization] = Field(
        None, alias='AccountCustomization'
    )
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    AwsAccountId_1: Optional[AwsAccountId] = Field(None, alias='AwsAccountId')
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateAnalysisPermissionsResponse(BaseModel):
    AnalysisArn: Optional[Arn] = None
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateDataSetPermissionsRequest(BaseModel):
    GrantPermissions: Optional[ResourcePermissionList] = None
    RevokePermissions: Optional[ResourcePermissionList] = None


class UpdateDataSourcePermissionsRequest(BaseModel):
    GrantPermissions: Optional[ResourcePermissionList] = None
    RevokePermissions: Optional[ResourcePermissionList] = None


class UpdateFolderPermissionsRequest(BaseModel):
    GrantPermissions: Optional[ResourcePermissionList] = None
    RevokePermissions: Optional[ResourcePermissionList] = None


class UpdateFolderPermissionsResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FolderId: Optional[RestrictiveResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateGroupResponse(BaseModel):
    Group_1: Optional[Group] = Field(None, alias='Group')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateIAMPolicyAssignmentRequest(BaseModel):
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus'
    )
    Identities: Optional[IdentityMap] = None
    PolicyArn: Optional[Arn] = None


class UpdateIAMPolicyAssignmentResponse(BaseModel):
    AssignmentId: Optional[String] = None
    AssignmentName: Optional[IAMPolicyAssignmentName] = None
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus'
    )
    Identities: Optional[IdentityMap] = None
    PolicyArn: Optional[Arn] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateLinkPermissionList(RootModel[List[ResourcePermission]]):
    root: List[ResourcePermission] = Field(..., max_length=2)


class UpdateRefreshScheduleRequest(BaseModel):
    Schedule: RefreshSchedule


class UpdateResourcePermissionList(RootModel[List[ResourcePermission]]):
    root: List[ResourcePermission] = Field(..., max_length=100)


class UpdateTemplateAliasRequest(BaseModel):
    TemplateVersionNumber: VersionNumber


class UpdateTemplateAliasResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateAlias_1: Optional[TemplateAlias] = Field(None, alias='TemplateAlias')


class UpdateTemplatePermissionsRequest(BaseModel):
    GrantPermissions: Optional[UpdateResourcePermissionList] = None
    RevokePermissions: Optional[UpdateResourcePermissionList] = None


class UpdateTemplatePermissionsResponse(BaseModel):
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateArn: Optional[Arn] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None


class UpdateThemeAliasRequest(BaseModel):
    ThemeVersionNumber: VersionNumber


class UpdateThemeAliasResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeAlias_1: Optional[ThemeAlias] = Field(None, alias='ThemeAlias')


class UpdateThemePermissionsRequest(BaseModel):
    GrantPermissions: Optional[UpdateResourcePermissionList] = None
    RevokePermissions: Optional[UpdateResourcePermissionList] = None


class UpdateThemePermissionsResponse(BaseModel):
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeArn: Optional[Arn] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None


class UpdateUserRequest(BaseModel):
    CustomFederationProviderUrl: Optional[String] = None
    CustomPermissionsName: Optional[RoleName] = None
    Email: String
    ExternalLoginFederationProviderType: Optional[String] = None
    ExternalLoginId: Optional[String] = None
    Role: UserRole
    UnapplyCustomPermissions: Optional[Boolean] = None


class User(BaseModel):
    Active: Optional[Boolean] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CustomPermissionsName: Optional[RoleName] = None
    Email: Optional[String] = None
    ExternalLoginFederationProviderType: Optional[String] = None
    ExternalLoginFederationProviderUrl: Optional[String] = None
    ExternalLoginId: Optional[String] = None
    IdentityType_1: Optional[IdentityType] = Field(None, alias='IdentityType')
    PrincipalId: Optional[String] = None
    Role: Optional[UserRole] = None
    UserName_1: Optional[UserName] = Field(None, alias='UserName')


class UserList(RootModel[List[User]]):
    root: List[User]


class VisualSubtitleLabelOptions(BaseModel):
    FormatText: Optional[LongFormatText] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class VisualTitleLabelOptions(BaseModel):
    FormatText: Optional[ShortFormatText] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class WordCloudOptions(BaseModel):
    CloudLayout: Optional[WordCloudCloudLayout] = None
    MaximumStringLength: Optional[WordCloudMaximumStringLength] = None
    WordCasing: Optional[WordCloudWordCasing] = None
    WordOrientation: Optional[WordCloudWordOrientation] = None
    WordPadding: Optional[WordCloudWordPadding] = None
    WordScaling: Optional[WordCloudWordScaling] = None


class AccountsAwsAccountIdPostRequest(BaseModel):
    IdentityStore_1: IdentityStore = Field(
        ...,
        alias='IdentityStore',
        description='Specifies the type of your user identity directory. Currently, this supports users with an identity type of <code>QUICKSIGHT</code>.',
    )
    Namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Field(
        ..., description='The name that you want to use to describe the new namespace.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description="The tags that you want to associate with the namespace that you're creating.",
        max_length=200,
        min_length=1,
    )


class AccountsAwsAccountIdAnalysesAnalysisIdPermissionsPutRequest(BaseModel):
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A structure that describes the permissions to add and the principal to add them to.',
        max_length=100,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A structure that describes the permissions to remove and the principal to remove them from.',
        max_length=100,
    )


class AccountsAwsAccountIdCustomizationsPostRequest(BaseModel):
    AccountCustomization_1: AccountCustomization = Field(
        ...,
        alias='AccountCustomization',
        description='The Amazon QuickSight customizations associated with your Amazon Web Services account or a QuickSight namespace in a specific Amazon Web Services Region.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='A list of the tags that you want to attach to this resource.',
        max_length=200,
        min_length=1,
    )


class DashboardPublishOptions(BaseModel):
    AdHocFilteringOption_1: Optional[AdHocFilteringOption] = Field(
        None, alias='AdHocFilteringOption'
    )
    DataPointDrillUpDownOption_1: Optional[DataPointDrillUpDownOption] = Field(
        None, alias='DataPointDrillUpDownOption'
    )
    DataPointMenuLabelOption_1: Optional[DataPointMenuLabelOption] = Field(
        None, alias='DataPointMenuLabelOption'
    )
    DataPointTooltipOption_1: Optional[DataPointTooltipOption] = Field(
        None, alias='DataPointTooltipOption'
    )
    ExportToCSVOption_1: Optional[ExportToCSVOption] = Field(
        None, alias='ExportToCSVOption'
    )
    ExportWithHiddenFieldsOption_1: Optional[ExportWithHiddenFieldsOption] = Field(
        None, alias='ExportWithHiddenFieldsOption'
    )
    SheetControlsOption_1: Optional[SheetControlsOption] = Field(
        None, alias='SheetControlsOption'
    )
    SheetLayoutElementMaximizationOption_1: Optional[
        SheetLayoutElementMaximizationOption
    ] = Field(None, alias='SheetLayoutElementMaximizationOption')
    VisualAxisSortOption_1: Optional[VisualAxisSortOption] = Field(
        None, alias='VisualAxisSortOption'
    )
    VisualMenuOption_1: Optional[VisualMenuOption] = Field(
        None, alias='VisualMenuOption'
    )
    VisualPublishOptions: Optional[DashboardVisualPublishOptions] = None


class AccountsAwsAccountIdDashboardsDashboardIdPermissionsPutRequest(BaseModel):
    GrantLinkPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='Grants link permissions to all users in a defined namespace.',
        max_length=2,
    )
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='The permissions that you want to grant on this resource.',
        max_length=100,
    )
    RevokeLinkPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='Revokes link permissions from all users in a defined namespace.',
        max_length=2,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='The permissions that you want to revoke from this resource.',
        max_length=100,
    )


class RowLevelPermissionTagConfiguration1(BaseModel):
    Status_1: Optional[Status] = Field(None, alias='Status')
    TagRuleConfigurations: Optional[RowLevelPermissionTagRuleConfigurationList] = None
    TagRules: Optional[RowLevelPermissionTagRuleList] = None


class AccountsAwsAccountIdDataSetsDataSetIdPermissionsPostRequest(BaseModel):
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='The resource permissions that you want to grant to the dataset.',
        max_length=64,
        min_length=1,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='The resource permissions that you want to revoke from the dataset.',
        max_length=64,
        min_length=1,
    )


class Schedule(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RefreshType: Optional[IngestionType] = None
    ScheduleFrequency: Optional[RefreshFrequency] = None
    ScheduleId: Optional[String] = None
    StartAfterDateTime: Optional[Timestamp] = None


class AccountsAwsAccountIdDataSetsDataSetIdRefreshSchedulesPostRequest(BaseModel):
    Schedule_1: Schedule = Field(
        ..., alias='Schedule', description='The refresh schedule of a dataset.'
    )


class AccountsAwsAccountIdDataSetsDataSetIdRefreshSchedulesPutRequest(BaseModel):
    Schedule_1: Schedule = Field(
        ..., alias='Schedule', description='The refresh schedule of a dataset.'
    )


class DataSourceParameters(BaseModel):
    AmazonElasticsearchParameters_1: Optional[AmazonElasticsearchParameters] = Field(
        None, alias='AmazonElasticsearchParameters'
    )
    AmazonOpenSearchParameters_1: Optional[AmazonOpenSearchParameters] = Field(
        None, alias='AmazonOpenSearchParameters'
    )
    AthenaParameters_1: Optional[AthenaParameters] = Field(
        None, alias='AthenaParameters'
    )
    AuroraParameters_1: Optional[AuroraParameters] = Field(
        None, alias='AuroraParameters'
    )
    AuroraPostgreSqlParameters_1: Optional[AuroraPostgreSqlParameters] = Field(
        None, alias='AuroraPostgreSqlParameters'
    )
    AwsIotAnalyticsParameters_1: Optional[AwsIotAnalyticsParameters] = Field(
        None, alias='AwsIotAnalyticsParameters'
    )
    DatabricksParameters_1: Optional[DatabricksParameters] = Field(
        None, alias='DatabricksParameters'
    )
    ExasolParameters_1: Optional[ExasolParameters] = Field(
        None, alias='ExasolParameters'
    )
    JiraParameters_1: Optional[JiraParameters] = Field(None, alias='JiraParameters')
    MariaDbParameters_1: Optional[MariaDbParameters] = Field(
        None, alias='MariaDbParameters'
    )
    MySqlParameters_1: Optional[MySqlParameters] = Field(None, alias='MySqlParameters')
    OracleParameters_1: Optional[OracleParameters] = Field(
        None, alias='OracleParameters'
    )
    PostgreSqlParameters_1: Optional[PostgreSqlParameters] = Field(
        None, alias='PostgreSqlParameters'
    )
    PrestoParameters_1: Optional[PrestoParameters] = Field(
        None, alias='PrestoParameters'
    )
    RdsParameters_1: Optional[RdsParameters] = Field(None, alias='RdsParameters')
    RedshiftParameters_1: Optional[RedshiftParameters] = Field(
        None, alias='RedshiftParameters'
    )
    S3Parameters_1: Optional[S3Parameters] = Field(None, alias='S3Parameters')
    ServiceNowParameters_1: Optional[ServiceNowParameters] = Field(
        None, alias='ServiceNowParameters'
    )
    SnowflakeParameters_1: Optional[SnowflakeParameters] = Field(
        None, alias='SnowflakeParameters'
    )
    SparkParameters_1: Optional[SparkParameters] = Field(None, alias='SparkParameters')
    SqlServerParameters_1: Optional[SqlServerParameters] = Field(
        None, alias='SqlServerParameters'
    )
    TeradataParameters_1: Optional[TeradataParameters] = Field(
        None, alias='TeradataParameters'
    )
    TwitterParameters_1: Optional[TwitterParameters] = Field(
        None, alias='TwitterParameters'
    )


class AccountsAwsAccountIdDataSourcesDataSourceIdPermissionsPostRequest(BaseModel):
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions that you want to grant on the data source.',
        max_length=64,
        min_length=1,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions that you want to revoke on the data source.',
        max_length=64,
        min_length=1,
    )


class AccountsAwsAccountIdFoldersFolderIdPostRequest(BaseModel):
    FolderType_1: Optional[FolderType] = Field(
        None,
        alias='FolderType',
        description='The type of folder. By default, <code>folderType</code> is <code>SHARED</code>.',
    )
    Name: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The name of the folder.'
    )
    ParentFolderArn: Optional[str] = Field(
        None,
        description='<p>The Amazon Resource Name (ARN) for the parent folder.</p> <p> <code>ParentFolderArn</code> can be null. An empty <code>parentFolderArn</code> creates a root-level folder.</p>',
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='<p>A structure that describes the principals and the resource-level permissions of a folder.</p> <p>To specify no permissions, omit <code>Permissions</code>.</p>',
        max_length=64,
        min_length=1,
    )
    Tags: Optional[List[Tag]] = Field(
        None, description='Tags for the folder.', max_length=200, min_length=1
    )


class AccountsAwsAccountIdFoldersFolderIdPermissionsPutRequest(BaseModel):
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='The permissions that you want to grant on a resource.',
        max_length=64,
        min_length=1,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='The permissions that you want to revoke from a resource.',
        max_length=64,
        min_length=1,
    )


class AccountsAwsAccountIdNamespacesNamespaceGroupsSearchPostRequest(BaseModel):
    Filters: List[GroupSearchFilter] = Field(
        ...,
        description='The structure for the search filters that you want to apply to your search.',
        max_length=1,
        min_length=1,
    )


class AccountsAwsAccountIdSearchAnalysesPostRequest(BaseModel):
    Filters: List[AnalysisSearchFilter] = Field(
        ...,
        description='The structure for the search filters that you want to apply to your search. ',
        max_length=1,
        min_length=1,
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    NextToken: Optional[str] = Field(
        None, description='A pagination token that can be used in a subsequent request.'
    )


class AccountsAwsAccountIdSearchDashboardsPostRequest(BaseModel):
    Filters: List[DashboardSearchFilter] = Field(
        ...,
        description='The filters to apply to the search. Currently, you can search only by user name, for example, <code>"Filters": [ { "Name": "QUICKSIGHT_USER", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:user/default/UserName1" } ]</code> ',
        max_length=1,
        min_length=1,
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to be returned per request.'
    )
    NextToken: Optional[str] = Field(
        None,
        description='The token for the next set of results, or null if there are no more results.',
    )


class AccountsAwsAccountIdSearchDataSetsPostRequest(BaseModel):
    Filters: List[DataSetSearchFilter] = Field(
        ...,
        description='The filters to apply to the search.',
        max_length=1,
        min_length=1,
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to be returned per request.'
    )
    NextToken: Optional[str] = Field(
        None, description='A pagination token that can be used in a subsequent request.'
    )


class AccountsAwsAccountIdSearchDataSourcesPostRequest(BaseModel):
    Filters: List[DataSourceSearchFilter] = Field(
        ...,
        description='The filters to apply to the search.',
        max_length=1,
        min_length=1,
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to be returned per request.'
    )
    NextToken: Optional[str] = Field(
        None, description='A pagination token that can be used in a subsequent request.'
    )


class AccountsAwsAccountIdSearchFoldersPostRequest(BaseModel):
    Filters: List[FolderSearchFilter] = Field(
        ...,
        description='The filters to apply to the search. Currently, you can search only by the parent folder ARN. For example, <code>"Filters": [ { "Name": "PARENT_FOLDER_ARN", "Operator": "StringEquals", "Value": "arn:aws:quicksight:us-east-1:1:folder/folderId" } ]</code>.',
        max_length=100,
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to be returned per request.'
    )
    NextToken: Optional[str] = Field(
        None,
        description='The token for the next set of results, or null if there are no more results.',
    )


class SourceEntity4(BaseModel):
    SourceAnalysis: Optional[TemplateSourceAnalysis] = None
    SourceTemplate: Optional[TemplateSourceTemplate] = None


class AccountsAwsAccountIdTemplatesTemplateIdPermissionsPutRequest(BaseModel):
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions to be granted on the template. ',
        max_length=100,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions to be revoked from the template. ',
        max_length=100,
    )


class Configuration(BaseModel):
    DataColorPalette_1: Optional[DataColorPalette] = Field(
        None, alias='DataColorPalette'
    )
    Sheet: Optional[SheetStyle] = None
    Typography_1: Optional[Typography] = Field(None, alias='Typography')
    UIColorPalette_1: Optional[UIColorPalette] = Field(None, alias='UIColorPalette')


class AccountsAwsAccountIdThemesThemeIdPostRequest(BaseModel):
    BaseThemeId: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Field(
        ...,
        description='The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use <code>ListThemes</code> or choose <b>Themes</b> from within an analysis. ',
    )
    Configuration_1: Configuration = Field(
        ...,
        alias='Configuration',
        description='The theme configuration. This configuration contains all of the display properties for a theme.',
    )
    Name: constr(min_length=1, max_length=2048) = Field(
        ..., description='A display name for the theme.'
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A valid grouping of resource permissions to apply to the new theme. ',
        max_length=64,
        min_length=1,
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='A map of the key-value pairs for the resource tag or tags that you want to add to the resource.',
        max_length=200,
        min_length=1,
    )
    VersionDescription: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description="A description of the first version of the theme that you're creating. Every time <code>UpdateTheme</code> is called, a new version is created. Each version of the theme has a description of the version in the <code>VersionDescription</code> field.",
    )


class AccountsAwsAccountIdThemesThemeIdPutRequest(BaseModel):
    BaseThemeId: constr(pattern=r'[\w\-]+', min_length=1, max_length=512) = Field(
        ...,
        description='The theme ID, defined by Amazon QuickSight, that a custom theme inherits from. All themes initially inherit from a default Amazon QuickSight theme.',
    )
    Configuration_1: Optional[Configuration] = Field(
        None,
        alias='Configuration',
        description='The theme configuration. This configuration contains all of the display properties for a theme.',
    )
    Name: Optional[constr(min_length=1, max_length=2048)] = Field(
        None, description='The name for the theme.'
    )
    VersionDescription: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description="A description of the theme version that you're updating Every time that you call <code>UpdateTheme</code>, you create a new version of the theme. Each version of the theme maintains a description of the version in <code>VersionDescription</code>.",
    )


class AccountsAwsAccountIdThemesThemeIdPermissionsPutRequest(BaseModel):
    GrantPermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions to be granted for the theme.',
        max_length=100,
    )
    RevokePermissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions to be revoked from the theme.',
        max_length=100,
    )


class ResourcesResourceArnTagsPostRequest(BaseModel):
    Tags: List[Tag] = Field(
        ...,
        description='Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.',
        max_length=200,
        min_length=1,
    )


class AnalysisError(BaseModel):
    Message: Optional[NonEmptyString] = None
    Type: Optional[AnalysisErrorType] = None
    ViolatedEntities: Optional[EntityList] = None


class AnalysisErrorList(RootModel[List[AnalysisError]]):
    root: List[AnalysisError] = Field(..., min_length=1)


class AnalysisSourceTemplate(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    DataSetReferences: DataSetReferenceList


class AnonymousUserDashboardVisualEmbeddingConfiguration(BaseModel):
    InitialDashboardVisualId: DashboardVisualId


class AnonymousUserEmbeddingExperienceConfiguration(BaseModel):
    Dashboard: Optional[AnonymousUserDashboardEmbeddingConfiguration] = None
    DashboardVisual: Optional[AnonymousUserDashboardVisualEmbeddingConfiguration] = None
    QSearchBar: Optional[AnonymousUserQSearchBarEmbeddingConfiguration] = None


class ArcAxisConfiguration(BaseModel):
    Range: Optional[ArcAxisDisplayRange] = None
    ReserveRange: Optional[Integer] = None


class AxisDataOptions(BaseModel):
    DateAxisOptions_1: Optional[DateAxisOptions] = Field(None, alias='DateAxisOptions')
    NumericAxisOptions_1: Optional[NumericAxisOptions] = Field(
        None, alias='NumericAxisOptions'
    )


class AxisLabelReferenceOptions(BaseModel):
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')


class CascadingControlSource(BaseModel):
    ColumnToMatch: Optional[ColumnIdentifier] = None
    SourceSheetControlId: Optional[String] = None


class CascadingControlSourceList(RootModel[List[CascadingControlSource]]):
    root: List[CascadingControlSource] = Field(..., max_length=200)


class CategoryDrillDownFilter(BaseModel):
    CategoryValues: CategoryValueList
    Column: ColumnIdentifier


class CategoryFilterConfiguration(BaseModel):
    CustomFilterConfiguration_1: Optional[CustomFilterConfiguration] = Field(
        None, alias='CustomFilterConfiguration'
    )
    CustomFilterListConfiguration_1: Optional[CustomFilterListConfiguration] = Field(
        None, alias='CustomFilterListConfiguration'
    )
    FilterListConfiguration_1: Optional[FilterListConfiguration] = Field(
        None, alias='FilterListConfiguration'
    )


class ColorScaleColorList(RootModel[List[DataColor]]):
    root: List[DataColor] = Field(..., max_length=3, min_length=2)


class ColumnGroup(BaseModel):
    GeoSpatialColumnGroup_1: Optional[GeoSpatialColumnGroup] = Field(
        None, alias='GeoSpatialColumnGroup'
    )


class ColumnGroupList(RootModel[List[ColumnGroup]]):
    root: List[ColumnGroup] = Field(..., max_length=8, min_length=1)


class ColumnLevelPermissionRule(BaseModel):
    ColumnNames: Optional[ColumnNameList] = None
    Principals: Optional[PrincipalList] = None


class ColumnLevelPermissionRuleList(RootModel[List[ColumnLevelPermissionRule]]):
    root: List[ColumnLevelPermissionRule] = Field(..., min_length=1)


class ConditionalFormattingCustomIconCondition(BaseModel):
    Color: Optional[HexColor] = None
    DisplayConfiguration: Optional[ConditionalFormattingIconDisplayConfiguration] = None
    Expression_1: Expression = Field(..., alias='Expression')
    IconOptions: ConditionalFormattingCustomIconOptions


class ConditionalFormattingIcon(BaseModel):
    CustomCondition: Optional[ConditionalFormattingCustomIconCondition] = None
    IconSet: Optional[ConditionalFormattingIconSet] = None


class ContributionAnalysisDefault(BaseModel):
    ContributorDimensions: ContributorDimensionList
    MeasureFieldId: FieldId


class ContributionAnalysisDefaultList(RootModel[List[ContributionAnalysisDefault]]):
    root: List[ContributionAnalysisDefault] = Field(..., max_length=200, min_length=1)


class CreateAccountCustomizationRequest(BaseModel):
    AccountCustomization_1: AccountCustomization = Field(
        ..., alias='AccountCustomization'
    )
    Tags: Optional[TagList] = None


class CreateAccountSubscriptionRequest(BaseModel):
    AccountName: String
    ActiveDirectoryName: Optional[String] = None
    AdminGroup: Optional[GroupsList] = None
    AuthenticationMethod: AuthenticationMethodOption
    AuthorGroup: Optional[GroupsList] = None
    ContactNumber: Optional[String] = None
    DirectoryId: Optional[String] = None
    Edition_1: Edition = Field(..., alias='Edition')
    EmailAddress: Optional[String] = None
    FirstName: Optional[String] = None
    LastName: Optional[String] = None
    NotificationEmail: String
    ReaderGroup: Optional[GroupsList] = None
    Realm: Optional[String] = None


class CreateAccountSubscriptionResponse(BaseModel):
    RequestId: Optional[String] = None
    SignupResponse_1: Optional[SignupResponse] = Field(None, alias='SignupResponse')
    Status: Optional[StatusCode] = None


class CreateFolderMembershipResponse(BaseModel):
    FolderMember_1: Optional[FolderMember] = Field(None, alias='FolderMember')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateFolderRequest(BaseModel):
    FolderType_1: Optional[FolderType] = Field(None, alias='FolderType')
    Name: Optional[FolderName] = None
    ParentFolderArn: Optional[Arn] = None
    Permissions: Optional[ResourcePermissionList] = None
    Tags: Optional[TagList] = None


class CreateGroupMembershipResponse(BaseModel):
    GroupMember_1: Optional[GroupMember] = Field(None, alias='GroupMember')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateGroupResponse(BaseModel):
    Group_1: Optional[Group] = Field(None, alias='Group')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateIAMPolicyAssignmentRequest(BaseModel):
    AssignmentName: IAMPolicyAssignmentName
    AssignmentStatus_1: AssignmentStatus = Field(..., alias='AssignmentStatus')
    Identities: Optional[IdentityMap] = None
    PolicyArn: Optional[Arn] = None


class CreateIAMPolicyAssignmentResponse(BaseModel):
    AssignmentId: Optional[String] = None
    AssignmentName: Optional[IAMPolicyAssignmentName] = None
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus'
    )
    Identities: Optional[IdentityMap] = None
    PolicyArn: Optional[Arn] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class CreateNamespaceRequest(BaseModel):
    IdentityStore_1: IdentityStore = Field(..., alias='IdentityStore')
    Namespace_1: Namespace = Field(..., alias='Namespace')
    Tags: Optional[TagList] = None


class CreateRefreshScheduleRequest(BaseModel):
    Schedule: RefreshSchedule


class CreateTemplateAliasResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateAlias_1: Optional[TemplateAlias] = Field(None, alias='TemplateAlias')


class CreateThemeAliasResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeAlias_1: Optional[ThemeAlias] = Field(None, alias='ThemeAlias')


class CustomActionNavigationOperation(BaseModel):
    LocalNavigationConfiguration_1: Optional[LocalNavigationConfiguration] = Field(
        None, alias='LocalNavigationConfiguration'
    )


class CustomParameterValues(BaseModel):
    DateTimeValues: Optional[DateTimeDefaultValueList] = None
    DecimalValues: Optional[DecimalDefaultValueList] = None
    IntegerValues: Optional[IntegerDefaultValueList] = None
    StringValues: Optional[StringDefaultValueList] = None


class CustomSql(BaseModel):
    Columns: Optional[InputColumnList] = None
    DataSourceArn: Arn
    Name: CustomSqlName
    SqlQuery_1: SqlQuery = Field(..., alias='SqlQuery')


class CustomValuesConfiguration(BaseModel):
    CustomValues: CustomParameterValues
    IncludeNullValue: Optional[BooleanObject] = None


class DashboardError(BaseModel):
    Message: Optional[NonEmptyString] = None
    Type: Optional[DashboardErrorType] = None
    ViolatedEntities: Optional[EntityList] = None


class DashboardErrorList(RootModel[List[DashboardError]]):
    root: List[DashboardError] = Field(..., min_length=1)


class DashboardSourceTemplate(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    DataSetReferences: DataSetReferenceList


class DashboardVersion(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    DataSetArns: Optional[DataSetArnsList] = None
    Description: Optional[VersionDescription] = None
    Errors: Optional[DashboardErrorList] = None
    Sheets: Optional[SheetList] = None
    SourceEntityArn: Optional[Arn] = None
    Status: Optional[ResourceStatus] = None
    ThemeArn: Optional[Arn] = None
    VersionNumber_1: Optional[VersionNumber] = Field(None, alias='VersionNumber')


class DataFieldSeriesItem(BaseModel):
    AxisBinding_1: AxisBinding = Field(..., alias='AxisBinding')
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FieldValue: Optional[SensitiveString] = None
    Settings: Optional[LineChartSeriesSettings] = None


class DataLabelType(BaseModel):
    DataPathLabelType_1: Optional[DataPathLabelType] = Field(
        None, alias='DataPathLabelType'
    )
    FieldLabelType_1: Optional[FieldLabelType] = Field(None, alias='FieldLabelType')
    MaximumLabelType_1: Optional[MaximumLabelType] = Field(
        None, alias='MaximumLabelType'
    )
    MinimumLabelType_1: Optional[MinimumLabelType] = Field(
        None, alias='MinimumLabelType'
    )
    RangeEndsLabelType_1: Optional[RangeEndsLabelType] = Field(
        None, alias='RangeEndsLabelType'
    )


class DataLabelTypes(RootModel[List[DataLabelType]]):
    root: List[DataLabelType] = Field(..., max_length=100)


class DataPathColor(BaseModel):
    Color: HexColor
    Element: DataPathValue
    TimeGranularity_1: Optional[TimeGranularity] = Field(None, alias='TimeGranularity')


class DataPathColorList(RootModel[List[DataPathColor]]):
    root: List[DataPathColor] = Field(..., max_length=5000)


class DataPathSort(BaseModel):
    Direction: SortDirection
    SortPaths: DataPathValueList


class DataSetConfiguration(BaseModel):
    ColumnGroupSchemaList_1: Optional[ColumnGroupSchemaList] = Field(
        None, alias='ColumnGroupSchemaList'
    )
    DataSetSchema_1: Optional[DataSetSchema] = Field(None, alias='DataSetSchema')
    Placeholder: Optional[String] = None


class DataSetConfigurationList(RootModel[List[DataSetConfiguration]]):
    root: List[DataSetConfiguration] = Field(..., max_length=30)


class DataSetSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    ColumnLevelPermissionRulesApplied: Optional[Boolean] = None
    CreatedTime: Optional[Timestamp] = None
    DataSetId: Optional[ResourceId] = None
    ImportMode: Optional[DataSetImportMode] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[ResourceName] = None
    RowLevelPermissionDataSet_1: Optional[RowLevelPermissionDataSet] = Field(
        None, alias='RowLevelPermissionDataSet'
    )
    RowLevelPermissionTagConfigurationApplied: Optional[Boolean] = None


class DataSetSummaryList(RootModel[List[DataSetSummary]]):
    root: List[DataSetSummary]


class DataSourceParametersList(RootModel[List[DataSourceParameters]]):
    root: List[DataSourceParameters] = Field(..., max_length=50, min_length=1)


class DateTimeDefaultValues(BaseModel):
    DynamicValue: Optional[DynamicDefaultValue] = None
    RollingDate: Optional[RollingDateConfiguration] = None
    StaticValues: Optional[DateTimeDefaultValueList] = None


class DateTimeParameterDeclaration(BaseModel):
    DefaultValues: Optional[DateTimeDefaultValues] = None
    Name: ParameterName
    TimeGranularity_1: Optional[TimeGranularity] = Field(None, alias='TimeGranularity')
    ValueWhenUnset: Optional[DateTimeValueWhenUnsetConfiguration] = None


class DecimalDefaultValues(BaseModel):
    DynamicValue: Optional[DynamicDefaultValue] = None
    StaticValues: Optional[DecimalDefaultValueList] = None


class DecimalParameterDeclaration(BaseModel):
    DefaultValues: Optional[DecimalDefaultValues] = None
    Name: ParameterName
    ParameterValueType_1: ParameterValueType = Field(..., alias='ParameterValueType')
    ValueWhenUnset: Optional[DecimalValueWhenUnsetConfiguration] = None


class DescribeAnalysisPermissionsResponse(BaseModel):
    AnalysisArn: Optional[Arn] = None
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeDataSetPermissionsResponse(BaseModel):
    DataSetArn: Optional[Arn] = None
    DataSetId: Optional[ResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeDataSourcePermissionsResponse(BaseModel):
    DataSourceArn: Optional[Arn] = None
    DataSourceId: Optional[ResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeFolderPermissionsResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FolderId: Optional[RestrictiveResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeFolderResolvedPermissionsResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    FolderId: Optional[RestrictiveResourceId] = None
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeFolderResponse(BaseModel):
    Folder_1: Optional[Folder] = Field(None, alias='Folder')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeGroupMembershipResponse(BaseModel):
    GroupMember_1: Optional[GroupMember] = Field(None, alias='GroupMember')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeGroupResponse(BaseModel):
    Group_1: Optional[Group] = Field(None, alias='Group')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeNamespaceResponse(BaseModel):
    Namespace: Optional[NamespaceInfoV2] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeRefreshScheduleResponse(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    RefreshSchedule_1: Optional[RefreshSchedule] = Field(None, alias='RefreshSchedule')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeTemplateAliasResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateAlias_1: Optional[TemplateAlias] = Field(None, alias='TemplateAlias')


class DescribeTemplatePermissionsResponse(BaseModel):
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateArn: Optional[Arn] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None


class DescribeThemeAliasResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeAlias_1: Optional[ThemeAlias] = Field(None, alias='ThemeAlias')


class DescribeThemePermissionsResponse(BaseModel):
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeArn: Optional[Arn] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None


class DescribeUserResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    User_1: Optional[User] = Field(None, alias='User')


class DestinationParameterValueConfiguration(BaseModel):
    CustomValuesConfiguration_1: Optional[CustomValuesConfiguration] = Field(
        None, alias='CustomValuesConfiguration'
    )
    SelectAllValueOptions_1: Optional[SelectAllValueOptions] = Field(
        None, alias='SelectAllValueOptions'
    )
    SourceField: Optional[FieldId] = None
    SourceParameterName: Optional[String] = None


class DrillDownFilter(BaseModel):
    CategoryFilter: Optional[CategoryDrillDownFilter] = None
    NumericEqualityFilter: Optional[NumericEqualityDrillDownFilter] = None
    TimeRangeFilter: Optional[TimeRangeDrillDownFilter] = None


class DrillDownFilterList(RootModel[List[DrillDownFilter]]):
    root: List[DrillDownFilter] = Field(..., max_length=10)


class ExplicitHierarchy(BaseModel):
    Columns: ExplicitHierarchyColumnList
    DrillDownFilters: Optional[DrillDownFilterList] = None
    HierarchyId_1: HierarchyId = Field(..., alias='HierarchyId')


class FieldFolder(BaseModel):
    columns: Optional[FolderColumnList] = None
    description: Optional[FieldFolderDescription] = None


class FieldFolderMap(RootModel[Optional[Dict[str, FieldFolder]]]):
    root: Optional[Dict[str, FieldFolder]] = None


class FieldSeriesItem(BaseModel):
    AxisBinding_1: AxisBinding = Field(..., alias='AxisBinding')
    FieldId_1: FieldId = Field(..., alias='FieldId')
    Settings: Optional[LineChartSeriesSettings] = None


class FilterOperationTargetVisualsConfiguration(BaseModel):
    SameSheetTargetVisualConfiguration_1: Optional[
        SameSheetTargetVisualConfiguration
    ] = Field(None, alias='SameSheetTargetVisualConfiguration')


class FilterSelectableValues(BaseModel):
    Values: Optional[ParameterSelectableValueList] = None


class FolderMemberList(RootModel[List[MemberIdArnPair]]):
    root: List[MemberIdArnPair] = Field(..., max_length=100)


class FontConfiguration(BaseModel):
    FontColor: Optional[HexColor] = None
    FontDecoration_1: Optional[FontDecoration] = Field(None, alias='FontDecoration')
    FontSize_1: Optional[FontSize] = Field(None, alias='FontSize')
    FontStyle_1: Optional[FontStyle] = Field(None, alias='FontStyle')
    FontWeight_1: Optional[FontWeight] = Field(None, alias='FontWeight')


class ForecastConfiguration(BaseModel):
    ForecastProperties: Optional[TimeBasedForecastProperties] = None
    Scenario: Optional[ForecastScenario] = None


class ForecastConfigurationList(RootModel[List[ForecastConfiguration]]):
    root: List[ForecastConfiguration] = Field(..., max_length=10)


class FreeFormLayoutCanvasSizeOptions(BaseModel):
    ScreenCanvasSizeOptions: Optional[FreeFormLayoutScreenCanvasSizeOptions] = None


class FreeFormLayoutElement(BaseModel):
    BackgroundStyle: Optional[FreeFormLayoutElementBackgroundStyle] = None
    BorderStyle: Optional[FreeFormLayoutElementBorderStyle] = None
    ElementId: ShortRestrictiveResourceId
    ElementType: LayoutElementType
    Height: PixelLength
    LoadingAnimation_1: Optional[LoadingAnimation] = Field(
        None, alias='LoadingAnimation'
    )
    RenderingRules: Optional[SheetElementRenderingRuleList] = None
    SelectedBorderStyle: Optional[FreeFormLayoutElementBorderStyle] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')
    Width: PixelLength
    XAxisLocation: PixelLength
    YAxisLocation: UnlimitedPixelLength


class FreeFromLayoutElementList(RootModel[List[FreeFormLayoutElement]]):
    root: List[FreeFormLayoutElement] = Field(..., max_length=430)


class FunnelChartDataLabelOptions(BaseModel):
    CategoryLabelVisibility: Optional[Visibility] = None
    LabelColor: Optional[HexColor] = None
    LabelFontConfiguration: Optional[FontConfiguration] = None
    MeasureDataLabelStyle: Optional[FunnelChartMeasureDataLabelStyle] = None
    MeasureLabelVisibility: Optional[Visibility] = None
    Position: Optional[DataLabelPosition] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class GenerateEmbedUrlForAnonymousUserRequest(BaseModel):
    AllowedDomains: Optional[StringList] = None
    AuthorizedResourceArns: ArnList
    ExperienceConfiguration: AnonymousUserEmbeddingExperienceConfiguration
    Namespace_1: Namespace = Field(..., alias='Namespace')
    SessionLifetimeInMinutes_1: Optional[SessionLifetimeInMinutes] = Field(
        None, alias='SessionLifetimeInMinutes'
    )
    SessionTags: Optional[SessionTagList] = None


class GlobalTableBorderOptions(BaseModel):
    SideSpecificBorder: Optional[TableSideBorderOptions] = None
    UniformBorder: Optional[TableBorderOptions] = None


class GradientColor(BaseModel):
    Stops: Optional[GradientStopList] = None


class GridLayoutCanvasSizeOptions(BaseModel):
    ScreenCanvasSizeOptions: Optional[GridLayoutScreenCanvasSizeOptions] = None


class GridLayoutConfiguration(BaseModel):
    CanvasSizeOptions: Optional[GridLayoutCanvasSizeOptions] = None
    Elements: GridLayoutElementList


class IAMPolicyAssignment(BaseModel):
    AssignmentId: Optional[String] = None
    AssignmentName: Optional[IAMPolicyAssignmentName] = None
    AssignmentStatus_1: Optional[AssignmentStatus] = Field(
        None, alias='AssignmentStatus'
    )
    AwsAccountId_1: Optional[AwsAccountId] = Field(None, alias='AwsAccountId')
    Identities: Optional[IdentityMap] = None
    PolicyArn: Optional[Arn] = None


class IncrementalRefresh(BaseModel):
    LookbackWindow_1: LookbackWindow = Field(..., alias='LookbackWindow')


class Ingestion(BaseModel):
    Arn_1: Arn = Field(..., alias='Arn')
    CreatedTime: Timestamp
    ErrorInfo_1: Optional[ErrorInfo] = Field(None, alias='ErrorInfo')
    IngestionId_1: Optional[IngestionId] = Field(None, alias='IngestionId')
    IngestionSizeInBytes: Optional[Long] = None
    IngestionStatus_1: IngestionStatus = Field(..., alias='IngestionStatus')
    IngestionTimeInSeconds: Optional[Long] = None
    QueueInfo_1: Optional[QueueInfo] = Field(None, alias='QueueInfo')
    RequestSource: Optional[IngestionRequestSource] = None
    RequestType: Optional[IngestionRequestType] = None
    RowInfo_1: Optional[RowInfo] = Field(None, alias='RowInfo')


class Ingestions(RootModel[List[Ingestion]]):
    root: List[Ingestion]


class IntegerParameterDeclaration(BaseModel):
    DefaultValues: Optional[IntegerDefaultValues] = None
    Name: ParameterName
    ParameterValueType_1: ParameterValueType = Field(..., alias='ParameterValueType')
    ValueWhenUnset: Optional[IntegerValueWhenUnsetConfiguration] = None


class LabelOptions(BaseModel):
    CustomLabel: Optional[String] = None
    FontConfiguration_1: Optional[FontConfiguration] = Field(
        None, alias='FontConfiguration'
    )
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class LegendOptions(BaseModel):
    Height: Optional[PixelLength] = None
    Position: Optional[LegendPosition] = None
    Title: Optional[LabelOptions] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')
    Width: Optional[PixelLength] = None


class LineChartDefaultSeriesSettings(BaseModel):
    AxisBinding_1: Optional[AxisBinding] = Field(None, alias='AxisBinding')
    LineStyleSettings: Optional[LineChartLineStyleSettings] = None
    MarkerStyleSettings: Optional[LineChartMarkerStyleSettings] = None


class LinkSharingConfiguration(BaseModel):
    Permissions: Optional[ResourcePermissionList] = None


class ListControlDisplayOptions(BaseModel):
    SearchOptions: Optional[ListControlSearchOptions] = None
    SelectAllOptions: Optional[ListControlSelectAllOptions] = None
    TitleOptions: Optional[LabelOptions] = None


class ListDataSetsResponse(BaseModel):
    DataSetSummaries: Optional[DataSetSummaryList] = None
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListFolderMembersResponse(BaseModel):
    FolderMemberList_1: Optional[FolderMemberList] = Field(
        None, alias='FolderMemberList'
    )
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListIngestionsResponse(BaseModel):
    Ingestions_1: Optional[Ingestions] = Field(None, alias='Ingestions')
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListNamespacesResponse(BaseModel):
    Namespaces_1: Optional[Namespaces] = Field(None, alias='Namespaces')
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListRefreshSchedulesResponse(BaseModel):
    RefreshSchedules_1: Optional[RefreshSchedules] = Field(
        None, alias='RefreshSchedules'
    )
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class ListTagsForResourceResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    Tags: Optional[TagList] = None


class ListTemplateAliasesResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateAliasList_1: Optional[TemplateAliasList] = Field(
        None, alias='TemplateAliasList'
    )


class ListTemplateVersionsResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateVersionSummaryList_1: Optional[TemplateVersionSummaryList] = Field(
        None, alias='TemplateVersionSummaryList'
    )


class ListTemplatesResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    TemplateSummaryList_1: Optional[TemplateSummaryList] = Field(
        None, alias='TemplateSummaryList'
    )


class ListThemeAliasesResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeAliasList_1: Optional[ThemeAliasList] = Field(None, alias='ThemeAliasList')


class ListThemeVersionsResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeVersionSummaryList_1: Optional[ThemeVersionSummaryList] = Field(
        None, alias='ThemeVersionSummaryList'
    )


class ListThemesResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    ThemeSummaryList_1: Optional[ThemeSummaryList] = Field(
        None, alias='ThemeSummaryList'
    )


class ListUsersResponse(BaseModel):
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    UserList_1: Optional[UserList] = Field(None, alias='UserList')


class NumericSeparatorConfiguration(BaseModel):
    DecimalSeparator: Optional[NumericSeparatorSymbol] = None
    ThousandsSeparator: Optional[ThousandSeparatorOptions] = None


class NumericalAggregationFunction(BaseModel):
    PercentileAggregation_1: Optional[PercentileAggregation] = Field(
        None, alias='PercentileAggregation'
    )
    SimpleNumericalAggregation: Optional[SimpleNumericalAggregationFunction] = None


class PanelTitleOptions(BaseModel):
    FontConfiguration_1: Optional[FontConfiguration] = Field(
        None, alias='FontConfiguration'
    )
    HorizontalTextAlignment_1: Optional[HorizontalTextAlignment] = Field(
        None, alias='HorizontalTextAlignment'
    )
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class PercentageDisplayFormatConfiguration(BaseModel):
    DecimalPlacesConfiguration_1: Optional[DecimalPlacesConfiguration] = Field(
        None, alias='DecimalPlacesConfiguration'
    )
    NegativeValueConfiguration_1: Optional[NegativeValueConfiguration] = Field(
        None, alias='NegativeValueConfiguration'
    )
    NullValueFormatConfiguration_1: Optional[NullValueFormatConfiguration] = Field(
        None, alias='NullValueFormatConfiguration'
    )
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    SeparatorConfiguration: Optional[NumericSeparatorConfiguration] = None
    Suffix_1: Optional[Suffix] = Field(None, alias='Suffix')


class PhysicalTable(BaseModel):
    CustomSql_1: Optional[CustomSql] = Field(None, alias='CustomSql')
    RelationalTable_1: Optional[RelationalTable] = Field(None, alias='RelationalTable')
    S3Source_1: Optional[S3Source] = Field(None, alias='S3Source')


class PhysicalTableMap(RootModel[Optional[Dict[str, PhysicalTable]]]):
    root: Optional[Dict[str, PhysicalTable]] = None


class PredefinedHierarchy(BaseModel):
    Columns: PredefinedHierarchyColumnList
    DrillDownFilters: Optional[DrillDownFilterList] = None
    HierarchyId_1: HierarchyId = Field(..., alias='HierarchyId')


class ProjectOperation(BaseModel):
    ProjectedColumns: ProjectedColumnList


class RefreshConfiguration(BaseModel):
    IncrementalRefresh_1: IncrementalRefresh = Field(..., alias='IncrementalRefresh')


class RegisterUserResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    User_1: Optional[User] = Field(None, alias='User')
    UserInvitationUrl: Optional[String] = None


class RegisteredUserDashboardEmbeddingConfiguration(BaseModel):
    FeatureConfigurations: Optional[RegisteredUserDashboardFeatureConfigurations] = None
    InitialDashboardId: ShortRestrictiveResourceId


class RegisteredUserEmbeddingExperienceConfiguration(BaseModel):
    Dashboard: Optional[RegisteredUserDashboardEmbeddingConfiguration] = None
    DashboardVisual: Optional[RegisteredUserDashboardVisualEmbeddingConfiguration] = (
        None
    )
    QSearchBar: Optional[RegisteredUserQSearchBarEmbeddingConfiguration] = None
    QuickSightConsole: Optional[
        RegisteredUserQuickSightConsoleEmbeddingConfiguration
    ] = None


class RelativeDateTimeControlDisplayOptions(BaseModel):
    DateTimeFormat_1: Optional[DateTimeFormat] = Field(None, alias='DateTimeFormat')
    TitleOptions: Optional[LabelOptions] = None


class RowLevelPermissionTagConfiguration(BaseModel):
    Status_1: Optional[Status] = Field(None, alias='Status')
    TagRuleConfigurations: Optional[RowLevelPermissionTagRuleConfigurationList] = None
    TagRules: RowLevelPermissionTagRuleList


class SearchDataSetsResponse(BaseModel):
    DataSetSummaries: Optional[DataSetSummaryList] = None
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class SectionBasedLayoutCanvasSizeOptions(BaseModel):
    PaperCanvasSizeOptions: Optional[SectionBasedLayoutPaperCanvasSizeOptions] = None


class SelectedSheetsFilterScopeConfiguration(BaseModel):
    SheetVisualScopingConfigurations_1: Optional[SheetVisualScopingConfigurations] = (
        Field(None, alias='SheetVisualScopingConfigurations')
    )


class SeriesItem(BaseModel):
    DataFieldSeriesItem_1: Optional[DataFieldSeriesItem] = Field(
        None, alias='DataFieldSeriesItem'
    )
    FieldSeriesItem_1: Optional[FieldSeriesItem] = Field(None, alias='FieldSeriesItem')


class SeriesItemList(RootModel[List[SeriesItem]]):
    root: List[SeriesItem] = Field(..., max_length=10)


class SetParameterValueConfiguration(BaseModel):
    DestinationParameterName: ParameterName
    Value: DestinationParameterValueConfiguration


class SetParameterValueConfigurationList(
    RootModel[List[SetParameterValueConfiguration]]
):
    root: List[SetParameterValueConfiguration] = Field(
        ..., max_length=200, min_length=1
    )


class SheetControlLayoutConfiguration(BaseModel):
    GridLayout: Optional[GridLayoutConfiguration] = None


class SliderControlDisplayOptions(BaseModel):
    TitleOptions: Optional[LabelOptions] = None


class StringParameterDeclaration(BaseModel):
    DefaultValues: Optional[StringDefaultValues] = None
    Name: ParameterName
    ParameterValueType_1: ParameterValueType = Field(..., alias='ParameterValueType')
    ValueWhenUnset: Optional[StringValueWhenUnsetConfiguration] = None


class TableCellStyle(BaseModel):
    BackgroundColor: Optional[HexColor] = None
    Border: Optional[GlobalTableBorderOptions] = None
    FontConfiguration_1: Optional[FontConfiguration] = Field(
        None, alias='FontConfiguration'
    )
    Height: Optional[TableFieldHeight] = None
    HorizontalTextAlignment_1: Optional[HorizontalTextAlignment] = Field(
        None, alias='HorizontalTextAlignment'
    )
    TextWrap_1: Optional[TextWrap] = Field(None, alias='TextWrap')
    VerticalTextAlignment_1: Optional[VerticalTextAlignment] = Field(
        None, alias='VerticalTextAlignment'
    )
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class TableFieldCustomTextContent(BaseModel):
    FontConfiguration_1: FontConfiguration = Field(..., alias='FontConfiguration')
    Value: Optional[String] = None


class TableFieldLinkContentConfiguration(BaseModel):
    CustomIconContent: Optional[TableFieldCustomIconContent] = None
    CustomTextContent: Optional[TableFieldCustomTextContent] = None


class TableOptions(BaseModel):
    CellStyle: Optional[TableCellStyle] = None
    HeaderStyle: Optional[TableCellStyle] = None
    Orientation: Optional[TableOrientation] = None
    RowAlternateColorOptions_1: Optional[RowAlternateColorOptions] = Field(
        None, alias='RowAlternateColorOptions'
    )


class TemplateVersion(BaseModel):
    CreatedTime: Optional[Timestamp] = None
    DataSetConfigurations: Optional[DataSetConfigurationList] = None
    Description: Optional[VersionDescription] = None
    Errors: Optional[TemplateErrorList] = None
    Sheets: Optional[SheetList] = None
    SourceEntityArn: Optional[Arn] = None
    Status: Optional[ResourceStatus] = None
    ThemeArn: Optional[Arn] = None
    VersionNumber_1: Optional[VersionNumber] = Field(None, alias='VersionNumber')


class TextAreaControlDisplayOptions(BaseModel):
    PlaceholderOptions: Optional[TextControlPlaceholderOptions] = None
    TitleOptions: Optional[LabelOptions] = None


class TextFieldControlDisplayOptions(BaseModel):
    PlaceholderOptions: Optional[TextControlPlaceholderOptions] = None
    TitleOptions: Optional[LabelOptions] = None


class ThemeConfiguration(BaseModel):
    DataColorPalette_1: Optional[DataColorPalette] = Field(
        None, alias='DataColorPalette'
    )
    Sheet: Optional[SheetStyle] = None
    Typography_1: Optional[Typography] = Field(None, alias='Typography')
    UIColorPalette_1: Optional[UIColorPalette] = Field(None, alias='UIColorPalette')


class ThemeVersion(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    BaseThemeId: Optional[ShortRestrictiveResourceId] = None
    Configuration: Optional[ThemeConfiguration] = None
    CreatedTime: Optional[Timestamp] = None
    Description: Optional[VersionDescription] = None
    Errors: Optional[ThemeErrorList] = None
    Status: Optional[ResourceStatus] = None
    VersionNumber_1: Optional[VersionNumber] = Field(None, alias='VersionNumber')


class TimeRangeFilter(BaseModel):
    Column: ColumnIdentifier
    ExcludePeriodConfiguration_1: Optional[ExcludePeriodConfiguration] = Field(
        None, alias='ExcludePeriodConfiguration'
    )
    FilterId: ShortRestrictiveResourceId
    IncludeMaximum: Optional[Boolean] = None
    IncludeMinimum: Optional[Boolean] = None
    NullOption: FilterNullOption
    RangeMaximumValue: Optional[TimeRangeFilterValue] = None
    RangeMinimumValue: Optional[TimeRangeFilterValue] = None
    TimeGranularity_1: Optional[TimeGranularity] = Field(None, alias='TimeGranularity')


class TotalOptions(BaseModel):
    CustomLabel: Optional[String] = None
    Placement: Optional[TableTotalsPlacement] = None
    ScrollStatus: Optional[TableTotalsScrollStatus] = None
    TotalCellStyle: Optional[TableCellStyle] = None
    TotalsVisibility: Optional[Visibility] = None


class TransformOperation(BaseModel):
    CastColumnTypeOperation_1: Optional[CastColumnTypeOperation] = Field(
        None, alias='CastColumnTypeOperation'
    )
    CreateColumnsOperation_1: Optional[CreateColumnsOperation] = Field(
        None, alias='CreateColumnsOperation'
    )
    FilterOperation_1: Optional[FilterOperation] = Field(None, alias='FilterOperation')
    ProjectOperation_1: Optional[ProjectOperation] = Field(
        None, alias='ProjectOperation'
    )
    RenameColumnOperation_1: Optional[RenameColumnOperation] = Field(
        None, alias='RenameColumnOperation'
    )
    TagColumnOperation_1: Optional[TagColumnOperation] = Field(
        None, alias='TagColumnOperation'
    )
    UntagColumnOperation_1: Optional[UntagColumnOperation] = Field(
        None, alias='UntagColumnOperation'
    )


class TransformOperationList(RootModel[List[TransformOperation]]):
    root: List[TransformOperation] = Field(..., max_length=2048, min_length=1)


class UpdateAnalysisPermissionsRequest(BaseModel):
    GrantPermissions: Optional[UpdateResourcePermissionList] = None
    RevokePermissions: Optional[UpdateResourcePermissionList] = None


class UpdateDashboardPermissionsRequest(BaseModel):
    GrantLinkPermissions: Optional[UpdateLinkPermissionList] = None
    GrantPermissions: Optional[UpdateResourcePermissionList] = None
    RevokeLinkPermissions: Optional[UpdateLinkPermissionList] = None
    RevokePermissions: Optional[UpdateResourcePermissionList] = None


class UpdateDashboardPermissionsResponse(BaseModel):
    DashboardArn: Optional[Arn] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    LinkSharingConfiguration_1: Optional[LinkSharingConfiguration] = Field(
        None, alias='LinkSharingConfiguration'
    )
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class UpdateThemeRequest(BaseModel):
    BaseThemeId: ShortRestrictiveResourceId
    Configuration: Optional[ThemeConfiguration] = None
    Name: Optional[ThemeName] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class UpdateUserResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    User_1: Optional[User] = Field(None, alias='User')


class VisualPalette(BaseModel):
    ChartColor: Optional[HexColor] = None
    ColorMap: Optional[DataPathColorList] = None


class SourceEntity(BaseModel):
    SourceTemplate: Optional[AnalysisSourceTemplate] = None


class SourceEntity2(BaseModel):
    SourceTemplate: Optional[DashboardSourceTemplate] = None


class DataSetRefreshProperties1(BaseModel):
    RefreshConfiguration_1: Optional[RefreshConfiguration] = Field(
        None, alias='RefreshConfiguration'
    )


class AccountsAwsAccountIdDataSetsDataSetIdRefreshPropertiesPutRequest(BaseModel):
    DataSetRefreshProperties: DataSetRefreshProperties1 = Field(
        ..., description='The refresh properties of a dataset.'
    )


class ExperienceConfiguration(BaseModel):
    Dashboard: Optional[AnonymousUserDashboardEmbeddingConfiguration] = None
    DashboardVisual: Optional[AnonymousUserDashboardVisualEmbeddingConfiguration] = None
    QSearchBar: Optional[AnonymousUserQSearchBarEmbeddingConfiguration] = None


class AccountsAwsAccountIdEmbedUrlAnonymousUserPostRequest(BaseModel):
    AllowedDomains: Optional[List[String]] = Field(
        None,
        description='<p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p> <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>',
    )
    AuthorizedResourceArns: List[Arn] = Field(
        ...,
        description='The Amazon Resource Names (ARNs) for the Amazon QuickSight resources that the user is authorized to access during the lifetime of the session. If you choose <code>Dashboard</code> embedding experience, pass the list of dashboard ARNs in the account that you want the user to be able to view. Currently, you can pass up to 25 dashboard ARNs in each API call.',
    )
    ExperienceConfiguration_1: ExperienceConfiguration = Field(
        ...,
        alias='ExperienceConfiguration',
        description='The type of experience you want to embed. For anonymous users, you can embed Amazon QuickSight dashboards.',
    )
    Namespace: constr(pattern=r'^[a-zA-Z0-9._-]*$', max_length=64) = Field(
        ...,
        description='The Amazon QuickSight namespace that the anonymous user virtually belongs to. If you are not using an Amazon QuickSight custom namespace, set this to <code>default</code>.',
    )
    SessionLifetimeInMinutes: Optional[conint(ge=15, le=600)] = Field(
        None,
        description='How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.',
    )
    SessionTags: Optional[List[SessionTag]] = Field(
        None,
        description='<p>The session tags used for row-level security. Before you use this parameter, make sure that you have configured the relevant datasets using the <code>DataSet$RowLevelPermissionTagConfiguration</code> parameter so that session tags can be used to provide row-level security.</p> <p>These are not the tags used for the Amazon Web Services resource tagging feature. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/quicksight-dev-rls-tags.html">Using Row-Level Security (RLS) with Tags</a>in the <i>Amazon QuickSight User Guide</i>.</p>',
        max_length=50,
        min_length=1,
    )


class ExperienceConfiguration1(BaseModel):
    Dashboard: Optional[RegisteredUserDashboardEmbeddingConfiguration] = None
    DashboardVisual: Optional[RegisteredUserDashboardVisualEmbeddingConfiguration] = (
        None
    )
    QSearchBar: Optional[RegisteredUserQSearchBarEmbeddingConfiguration] = None
    QuickSightConsole: Optional[
        RegisteredUserQuickSightConsoleEmbeddingConfiguration
    ] = None


class AccountsAwsAccountIdEmbedUrlRegisteredUserPostRequest(BaseModel):
    AllowedDomains: Optional[List[String]] = Field(
        None,
        description='<p>The domains that you want to add to the allow list for access to the generated URL that is then embedded. This optional parameter overrides the static domains that are configured in the Manage QuickSight menu in the Amazon QuickSight console. Instead, it allows only the domains that you include in this parameter. You can list up to three domains or subdomains in each API call.</p> <p>To include all subdomains under a specific domain to the allow list, use <code>*</code>. For example, <code>https://*.sapp.amazon.com</code> includes all subdomains under <code>https://sapp.amazon.com</code>.</p>',
    )
    ExperienceConfiguration: ExperienceConfiguration1 = Field(
        ...,
        description='<p>The type of experience you want to embed. For registered users, you can embed Amazon QuickSight dashboards or the Amazon QuickSight console.</p> <note> <p>Exactly one of the experience configurations is required. You can choose <code>Dashboard</code> or <code>QuickSightConsole</code>. You cannot choose more than one experience configuration.</p> </note>',
    )
    SessionLifetimeInMinutes: Optional[conint(ge=15, le=600)] = Field(
        None,
        description='How many minutes the session is valid. The session lifetime must be in [15-600] minutes range.',
    )
    UserArn: str = Field(
        ..., description='The Amazon Resource Name for the registered user.'
    )


class AggregationFunction(BaseModel):
    CategoricalAggregationFunction_1: Optional[CategoricalAggregationFunction] = Field(
        None, alias='CategoricalAggregationFunction'
    )
    DateAggregationFunction_1: Optional[DateAggregationFunction] = Field(
        None, alias='DateAggregationFunction'
    )
    NumericalAggregationFunction_1: Optional[NumericalAggregationFunction] = Field(
        None, alias='NumericalAggregationFunction'
    )


class AggregationSortConfiguration(BaseModel):
    AggregationFunction_1: AggregationFunction = Field(..., alias='AggregationFunction')
    Column: ColumnIdentifier
    SortDirection_1: SortDirection = Field(..., alias='SortDirection')


class AggregationSortConfigurationList(RootModel[List[AggregationSortConfiguration]]):
    root: List[AggregationSortConfiguration] = Field(..., max_length=100)


class Analysis(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    DataSetArns: Optional[DataSetArnsList] = None
    Errors: Optional[AnalysisErrorList] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[AnalysisName] = None
    Sheets: Optional[SheetList] = None
    Status: Optional[ResourceStatus] = None
    ThemeArn: Optional[Arn] = None


class AnalysisSourceEntity(BaseModel):
    SourceTemplate: Optional[AnalysisSourceTemplate] = None


class AxisLabelOptions(BaseModel):
    ApplyTo: Optional[AxisLabelReferenceOptions] = None
    CustomLabel: Optional[String] = None
    FontConfiguration_1: Optional[FontConfiguration] = Field(
        None, alias='FontConfiguration'
    )


class AxisLabelOptionsList(RootModel[List[AxisLabelOptions]]):
    root: List[AxisLabelOptions] = Field(..., max_length=100)


class AxisTickLabelOptions(BaseModel):
    LabelOptions_1: Optional[LabelOptions] = Field(None, alias='LabelOptions')
    RotationAngle: Optional[Double] = None


class CascadingControlConfiguration(BaseModel):
    SourceControls: Optional[CascadingControlSourceList] = None


class CategoryFilter(BaseModel):
    Column: ColumnIdentifier
    Configuration: CategoryFilterConfiguration
    FilterId: ShortRestrictiveResourceId


class ChartAxisLabelOptions(BaseModel):
    AxisLabelOptions: Optional[AxisLabelOptionsList] = None
    SortIconVisibility: Optional[Visibility] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ColorScale(BaseModel):
    ColorFillType_1: ColorFillType = Field(..., alias='ColorFillType')
    Colors: ColorScaleColorList
    NullValueColor: Optional[DataColor] = None


class ColumnSort(BaseModel):
    AggregationFunction_1: Optional[AggregationFunction] = Field(
        None, alias='AggregationFunction'
    )
    Direction: SortDirection
    SortBy: ColumnIdentifier


class ColumnTooltipItem(BaseModel):
    Aggregation: Optional[AggregationFunction] = None
    Column: ColumnIdentifier
    Label: Optional[String] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class ConditionalFormattingGradientColor(BaseModel):
    Color: GradientColor
    Expression_1: Expression = Field(..., alias='Expression')


class CreateThemeRequest(BaseModel):
    BaseThemeId: ShortRestrictiveResourceId
    Configuration: ThemeConfiguration
    Name: ThemeName
    Permissions: Optional[ResourcePermissionList] = None
    Tags: Optional[TagList] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class CredentialPair(BaseModel):
    AlternateDataSourceParameters: Optional[DataSourceParametersList] = None
    Password_1: Password = Field(..., alias='Password')
    Username_1: Username = Field(..., alias='Username')


class CurrencyDisplayFormatConfiguration(BaseModel):
    DecimalPlacesConfiguration_1: Optional[DecimalPlacesConfiguration] = Field(
        None, alias='DecimalPlacesConfiguration'
    )
    NegativeValueConfiguration_1: Optional[NegativeValueConfiguration] = Field(
        None, alias='NegativeValueConfiguration'
    )
    NullValueFormatConfiguration_1: Optional[NullValueFormatConfiguration] = Field(
        None, alias='NullValueFormatConfiguration'
    )
    NumberScale_1: Optional[NumberScale] = Field(None, alias='NumberScale')
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    SeparatorConfiguration: Optional[NumericSeparatorConfiguration] = None
    Suffix_1: Optional[Suffix] = Field(None, alias='Suffix')
    Symbol: Optional[CurrencyCode] = None


class CustomActionFilterOperation(BaseModel):
    SelectedFieldsConfiguration: FilterOperationSelectedFieldsConfiguration
    TargetVisualsConfiguration: FilterOperationTargetVisualsConfiguration


class CustomActionSetParametersOperation(BaseModel):
    ParameterValueConfigurations: SetParameterValueConfigurationList


class Dashboard(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    LastPublishedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[DashboardName] = None
    Version: Optional[DashboardVersion] = None


class DashboardSourceEntity(BaseModel):
    SourceTemplate: Optional[DashboardSourceTemplate] = None


class DataLabelOptions(BaseModel):
    CategoryLabelVisibility: Optional[Visibility] = None
    DataLabelTypes_1: Optional[DataLabelTypes] = Field(None, alias='DataLabelTypes')
    LabelColor: Optional[HexColor] = None
    LabelContent: Optional[DataLabelContent] = None
    LabelFontConfiguration: Optional[FontConfiguration] = None
    MeasureLabelVisibility: Optional[Visibility] = None
    Overlap: Optional[DataLabelOverlap] = None
    Position: Optional[DataLabelPosition] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')


class DataSetRefreshProperties(BaseModel):
    RefreshConfiguration_1: RefreshConfiguration = Field(
        ..., alias='RefreshConfiguration'
    )


class DataSource(BaseModel):
    AlternateDataSourceParameters: Optional[DataSourceParametersList] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    DataSourceId: Optional[ResourceId] = None
    DataSourceParameters_1: Optional[DataSourceParameters] = Field(
        None, alias='DataSourceParameters'
    )
    ErrorInfo: Optional[DataSourceErrorInfo] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[ResourceName] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    SslProperties_1: Optional[SslProperties] = Field(None, alias='SslProperties')
    Status: Optional[ResourceStatus] = None
    Type: Optional[DataSourceType] = None
    VpcConnectionProperties_1: Optional[VpcConnectionProperties] = Field(
        None, alias='VpcConnectionProperties'
    )


class DataSourceCredentials(BaseModel):
    CopySourceArn_1: Optional[CopySourceArn] = Field(None, alias='CopySourceArn')
    CredentialPair_1: Optional[CredentialPair] = Field(None, alias='CredentialPair')
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')


class DataSourceList(RootModel[List[DataSource]]):
    root: List[DataSource]


class DateTimeHierarchy(BaseModel):
    DrillDownFilters: Optional[DrillDownFilterList] = None
    HierarchyId_1: HierarchyId = Field(..., alias='HierarchyId')


class DateTimePickerControlDisplayOptions(BaseModel):
    DateTimeFormat_1: Optional[DateTimeFormat] = Field(None, alias='DateTimeFormat')
    TitleOptions: Optional[LabelOptions] = None


class DefaultFreeFormLayoutConfiguration(BaseModel):
    CanvasSizeOptions: FreeFormLayoutCanvasSizeOptions


class DefaultGridLayoutConfiguration(BaseModel):
    CanvasSizeOptions: GridLayoutCanvasSizeOptions


class DefaultInteractiveLayoutConfiguration(BaseModel):
    FreeForm: Optional[DefaultFreeFormLayoutConfiguration] = None
    Grid: Optional[DefaultGridLayoutConfiguration] = None


class DefaultSectionBasedLayoutConfiguration(BaseModel):
    CanvasSizeOptions: SectionBasedLayoutCanvasSizeOptions


class DescribeAnalysisResponse(BaseModel):
    Analysis_1: Optional[Analysis] = Field(None, alias='Analysis')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeDashboardPermissionsResponse(BaseModel):
    DashboardArn: Optional[Arn] = None
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    LinkSharingConfiguration_1: Optional[LinkSharingConfiguration] = Field(
        None, alias='LinkSharingConfiguration'
    )
    Permissions: Optional[ResourcePermissionList] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeDashboardResponse(BaseModel):
    Dashboard_1: Optional[Dashboard] = Field(None, alias='Dashboard')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeDataSetRefreshPropertiesResponse(BaseModel):
    DataSetRefreshProperties_1: Optional[DataSetRefreshProperties] = Field(
        None, alias='DataSetRefreshProperties'
    )
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeDataSourceResponse(BaseModel):
    DataSource_1: Optional[DataSource] = Field(None, alias='DataSource')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeIAMPolicyAssignmentResponse(BaseModel):
    IAMPolicyAssignment_1: Optional[IAMPolicyAssignment] = Field(
        None, alias='IAMPolicyAssignment'
    )
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeIngestionResponse(BaseModel):
    Ingestion_1: Optional[Ingestion] = Field(None, alias='Ingestion')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DropDownControlDisplayOptions(BaseModel):
    SelectAllOptions: Optional[ListControlSelectAllOptions] = None
    TitleOptions: Optional[LabelOptions] = None


class FieldSortOptions(BaseModel):
    ColumnSort_1: Optional[ColumnSort] = Field(None, alias='ColumnSort')
    FieldSort_1: Optional[FieldSort] = Field(None, alias='FieldSort')


class FieldSortOptionsList(RootModel[List[FieldSortOptions]]):
    root: List[FieldSortOptions] = Field(..., max_length=100)


class FilledMapSortConfiguration(BaseModel):
    CategorySort: Optional[FieldSortOptionsList] = None


class FilterDateTimePickerControl(BaseModel):
    DisplayOptions: Optional[DateTimePickerControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    SourceFilterId: ShortRestrictiveResourceId
    Title: SheetControlTitle
    Type: Optional[SheetControlDateTimePickerType] = None


class FilterDropDownControl(BaseModel):
    CascadingControlConfiguration_1: Optional[CascadingControlConfiguration] = Field(
        None, alias='CascadingControlConfiguration'
    )
    DisplayOptions: Optional[DropDownControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    SelectableValues: Optional[FilterSelectableValues] = None
    SourceFilterId: ShortRestrictiveResourceId
    Title: SheetControlTitle
    Type: Optional[SheetControlListType] = None


class FilterListControl(BaseModel):
    CascadingControlConfiguration_1: Optional[CascadingControlConfiguration] = Field(
        None, alias='CascadingControlConfiguration'
    )
    DisplayOptions: Optional[ListControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    SelectableValues: Optional[FilterSelectableValues] = None
    SourceFilterId: ShortRestrictiveResourceId
    Title: SheetControlTitle
    Type: Optional[SheetControlListType] = None


class FilterRelativeDateTimeControl(BaseModel):
    DisplayOptions: Optional[RelativeDateTimeControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    SourceFilterId: ShortRestrictiveResourceId
    Title: SheetControlTitle


class FilterScopeConfiguration(BaseModel):
    SelectedSheets: Optional[SelectedSheetsFilterScopeConfiguration] = None


class FilterSliderControl(BaseModel):
    DisplayOptions: Optional[SliderControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    MaximumValue: Double
    MinimumValue: Double
    SourceFilterId: ShortRestrictiveResourceId
    StepSize: Double
    Title: SheetControlTitle
    Type: Optional[SheetControlSliderType] = None


class FilterTextAreaControl(BaseModel):
    Delimiter: Optional[TextAreaControlDelimiter] = None
    DisplayOptions: Optional[TextAreaControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    SourceFilterId: ShortRestrictiveResourceId
    Title: SheetControlTitle


class FilterTextFieldControl(BaseModel):
    DisplayOptions: Optional[TextFieldControlDisplayOptions] = None
    FilterControlId: ShortRestrictiveResourceId
    SourceFilterId: ShortRestrictiveResourceId
    Title: SheetControlTitle


class FreeFormLayoutConfiguration(BaseModel):
    CanvasSizeOptions: Optional[FreeFormLayoutCanvasSizeOptions] = None
    Elements: FreeFromLayoutElementList


class FreeFormSectionLayoutConfiguration(BaseModel):
    Elements: FreeFromLayoutElementList


class FunnelChartSortConfiguration(BaseModel):
    CategoryItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None


class GenerateEmbedUrlForRegisteredUserRequest(BaseModel):
    AllowedDomains: Optional[StringList] = None
    ExperienceConfiguration: RegisteredUserEmbeddingExperienceConfiguration
    SessionLifetimeInMinutes_1: Optional[SessionLifetimeInMinutes] = Field(
        None, alias='SessionLifetimeInMinutes'
    )
    UserArn: Arn


class HeatMapSortConfiguration(BaseModel):
    HeatMapColumnItemsLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    HeatMapColumnSort: Optional[FieldSortOptionsList] = None
    HeatMapRowItemsLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    HeatMapRowSort: Optional[FieldSortOptionsList] = None


class KPISortConfiguration(BaseModel):
    TrendGroupSort: Optional[FieldSortOptionsList] = None


class LineChartSortConfiguration(BaseModel):
    CategoryItemsLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None
    ColorItemsLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    SmallMultiplesLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    SmallMultiplesSort: Optional[FieldSortOptionsList] = None


class ListDataSourcesResponse(BaseModel):
    DataSources: Optional[DataSourceList] = None
    NextToken: Optional[String] = None
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class LogicalTable(BaseModel):
    Alias: LogicalTableAlias
    DataTransforms: Optional[TransformOperationList] = None
    Source: LogicalTableSource


class LogicalTableMap(RootModel[Optional[Dict[str, LogicalTable]]]):
    root: Optional[Dict[str, LogicalTable]] = None


class NumberDisplayFormatConfiguration(BaseModel):
    DecimalPlacesConfiguration_1: Optional[DecimalPlacesConfiguration] = Field(
        None, alias='DecimalPlacesConfiguration'
    )
    NegativeValueConfiguration_1: Optional[NegativeValueConfiguration] = Field(
        None, alias='NegativeValueConfiguration'
    )
    NullValueFormatConfiguration_1: Optional[NullValueFormatConfiguration] = Field(
        None, alias='NullValueFormatConfiguration'
    )
    NumberScale_1: Optional[NumberScale] = Field(None, alias='NumberScale')
    Prefix_1: Optional[Prefix] = Field(None, alias='Prefix')
    SeparatorConfiguration: Optional[NumericSeparatorConfiguration] = None
    Suffix_1: Optional[Suffix] = Field(None, alias='Suffix')


class NumericEqualityFilter(BaseModel):
    AggregationFunction_1: Optional[AggregationFunction] = Field(
        None, alias='AggregationFunction'
    )
    Column: ColumnIdentifier
    FilterId: ShortRestrictiveResourceId
    MatchOperator: NumericEqualityMatchOperator
    NullOption: FilterNullOption
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')
    SelectAllOptions: Optional[NumericFilterSelectAllOptions] = None
    Value: Optional[Double] = None


class NumericFormatConfiguration(BaseModel):
    CurrencyDisplayFormatConfiguration_1: Optional[
        CurrencyDisplayFormatConfiguration
    ] = Field(None, alias='CurrencyDisplayFormatConfiguration')
    NumberDisplayFormatConfiguration_1: Optional[NumberDisplayFormatConfiguration] = (
        Field(None, alias='NumberDisplayFormatConfiguration')
    )
    PercentageDisplayFormatConfiguration_1: Optional[
        PercentageDisplayFormatConfiguration
    ] = Field(None, alias='PercentageDisplayFormatConfiguration')


class NumericRangeFilter(BaseModel):
    AggregationFunction_1: Optional[AggregationFunction] = Field(
        None, alias='AggregationFunction'
    )
    Column: ColumnIdentifier
    FilterId: ShortRestrictiveResourceId
    IncludeMaximum: Optional[Boolean] = None
    IncludeMinimum: Optional[Boolean] = None
    NullOption: FilterNullOption
    RangeMaximum: Optional[NumericRangeFilterValue] = None
    RangeMinimum: Optional[NumericRangeFilterValue] = None
    SelectAllOptions: Optional[NumericFilterSelectAllOptions] = None


class PanelConfiguration(BaseModel):
    BackgroundColor: Optional[HexColorWithTransparency] = None
    BackgroundVisibility: Optional[Visibility] = None
    BorderColor: Optional[HexColorWithTransparency] = None
    BorderStyle: Optional[PanelBorderStyle] = None
    BorderThickness: Optional[PixelLength] = None
    BorderVisibility: Optional[Visibility] = None
    GutterSpacing: Optional[PixelLength] = None
    GutterVisibility: Optional[Visibility] = None
    Title: Optional[PanelTitleOptions] = None


class ParameterDateTimePickerControl(BaseModel):
    DisplayOptions: Optional[DateTimePickerControlDisplayOptions] = None
    ParameterControlId: ShortRestrictiveResourceId
    SourceParameterName: ParameterName
    Title: SheetControlTitle


class ParameterDeclaration(BaseModel):
    DateTimeParameterDeclaration_1: Optional[DateTimeParameterDeclaration] = Field(
        None, alias='DateTimeParameterDeclaration'
    )
    DecimalParameterDeclaration_1: Optional[DecimalParameterDeclaration] = Field(
        None, alias='DecimalParameterDeclaration'
    )
    IntegerParameterDeclaration_1: Optional[IntegerParameterDeclaration] = Field(
        None, alias='IntegerParameterDeclaration'
    )
    StringParameterDeclaration_1: Optional[StringParameterDeclaration] = Field(
        None, alias='StringParameterDeclaration'
    )


class ParameterDeclarationList(RootModel[List[ParameterDeclaration]]):
    root: List[ParameterDeclaration] = Field(..., max_length=200)


class ParameterDropDownControl(BaseModel):
    CascadingControlConfiguration_1: Optional[CascadingControlConfiguration] = Field(
        None, alias='CascadingControlConfiguration'
    )
    DisplayOptions: Optional[DropDownControlDisplayOptions] = None
    ParameterControlId: ShortRestrictiveResourceId
    SelectableValues: Optional[ParameterSelectableValues] = None
    SourceParameterName: ParameterName
    Title: SheetControlTitle
    Type: Optional[SheetControlListType] = None


class ParameterListControl(BaseModel):
    CascadingControlConfiguration_1: Optional[CascadingControlConfiguration] = Field(
        None, alias='CascadingControlConfiguration'
    )
    DisplayOptions: Optional[ListControlDisplayOptions] = None
    ParameterControlId: ShortRestrictiveResourceId
    SelectableValues: Optional[ParameterSelectableValues] = None
    SourceParameterName: ParameterName
    Title: SheetControlTitle
    Type: Optional[SheetControlListType] = None


class ParameterSliderControl(BaseModel):
    DisplayOptions: Optional[SliderControlDisplayOptions] = None
    MaximumValue: Double
    MinimumValue: Double
    ParameterControlId: ShortRestrictiveResourceId
    SourceParameterName: ParameterName
    StepSize: Double
    Title: SheetControlTitle


class ParameterTextAreaControl(BaseModel):
    Delimiter: Optional[TextAreaControlDelimiter] = None
    DisplayOptions: Optional[TextAreaControlDisplayOptions] = None
    ParameterControlId: ShortRestrictiveResourceId
    SourceParameterName: ParameterName
    Title: SheetControlTitle


class ParameterTextFieldControl(BaseModel):
    DisplayOptions: Optional[TextFieldControlDisplayOptions] = None
    ParameterControlId: ShortRestrictiveResourceId
    SourceParameterName: ParameterName
    Title: SheetControlTitle


class PieChartSortConfiguration(BaseModel):
    CategoryItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None
    SmallMultiplesLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    SmallMultiplesSort: Optional[FieldSortOptionsList] = None


class PivotTableOptions(BaseModel):
    CellStyle: Optional[TableCellStyle] = None
    CollapsedRowDimensionsVisibility: Optional[Visibility] = None
    ColumnHeaderStyle: Optional[TableCellStyle] = None
    ColumnNamesVisibility: Optional[Visibility] = None
    MetricPlacement: Optional[PivotTableMetricPlacement] = None
    RowAlternateColorOptions_1: Optional[RowAlternateColorOptions] = Field(
        None, alias='RowAlternateColorOptions'
    )
    RowFieldNamesStyle: Optional[TableCellStyle] = None
    RowHeaderStyle: Optional[TableCellStyle] = None
    SingleMetricVisibility: Optional[Visibility] = None
    ToggleButtonsVisibility: Optional[Visibility] = None


class PivotTableSortBy(BaseModel):
    Column: Optional[ColumnSort] = None
    DataPath: Optional[DataPathSort] = None
    Field: Optional[FieldSort] = None


class PivotTotalOptions(BaseModel):
    CustomLabel: Optional[String] = None
    MetricHeaderCellStyle: Optional[TableCellStyle] = None
    Placement: Optional[TableTotalsPlacement] = None
    ScrollStatus: Optional[TableTotalsScrollStatus] = None
    TotalCellStyle: Optional[TableCellStyle] = None
    TotalsVisibility: Optional[Visibility] = None
    ValueCellStyle: Optional[TableCellStyle] = None


class PutDataSetRefreshPropertiesRequest(BaseModel):
    DataSetRefreshProperties_1: DataSetRefreshProperties = Field(
        ..., alias='DataSetRefreshProperties'
    )


class RadarChartSortConfiguration(BaseModel):
    CategoryItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None
    ColorItemsLimit: Optional[ItemsLimitConfiguration] = None
    ColorSort: Optional[FieldSortOptionsList] = None


class ReferenceLineDynamicDataConfiguration(BaseModel):
    Calculation: NumericalAggregationFunction
    Column: ColumnIdentifier
    MeasureAggregationFunction: AggregationFunction


class ReferenceLineValueLabelConfiguration(BaseModel):
    FormatConfiguration: Optional[NumericFormatConfiguration] = None
    RelativePosition: Optional[ReferenceLineValueLabelRelativePosition] = None


class RowSortList(RootModel[List[FieldSortOptions]]):
    root: List[FieldSortOptions] = Field(..., max_length=100)


class SankeyDiagramSortConfiguration(BaseModel):
    DestinationItemsLimit: Optional[ItemsLimitConfiguration] = None
    SourceItemsLimit: Optional[ItemsLimitConfiguration] = None
    WeightSort: Optional[FieldSortOptionsList] = None


class SectionLayoutConfiguration(BaseModel):
    FreeFormLayout: FreeFormSectionLayoutConfiguration


class SheetControlLayout(BaseModel):
    Configuration: SheetControlLayoutConfiguration


class SheetControlLayoutList(RootModel[List[SheetControlLayout]]):
    root: List[SheetControlLayout] = Field(..., max_length=1, min_length=0)


class SmallMultiplesOptions(BaseModel):
    MaxVisibleColumns: Optional[VisiblePanelColumns] = None
    MaxVisibleRows: Optional[VisiblePanelRows] = None
    PanelConfiguration_1: Optional[PanelConfiguration] = Field(
        None, alias='PanelConfiguration'
    )


class StringFormatConfiguration(BaseModel):
    NullValueFormatConfiguration_1: Optional[NullValueFormatConfiguration] = Field(
        None, alias='NullValueFormatConfiguration'
    )
    NumericFormatConfiguration_1: Optional[NumericFormatConfiguration] = Field(
        None, alias='NumericFormatConfiguration'
    )


class SubtotalOptions(BaseModel):
    CustomLabel: Optional[String] = None
    FieldLevel: Optional[PivotTableSubtotalLevel] = None
    FieldLevelOptions: Optional[PivotTableFieldSubtotalOptionsList] = None
    MetricHeaderCellStyle: Optional[TableCellStyle] = None
    TotalCellStyle: Optional[TableCellStyle] = None
    TotalsVisibility: Optional[Visibility] = None
    ValueCellStyle: Optional[TableCellStyle] = None


class TableFieldLinkConfiguration(BaseModel):
    Content: TableFieldLinkContentConfiguration
    Target: URLTargetConfiguration


class TableFieldURLConfiguration(BaseModel):
    ImageConfiguration: Optional[TableFieldImageConfiguration] = None
    LinkConfiguration: Optional[TableFieldLinkConfiguration] = None


class TableSortConfiguration(BaseModel):
    PaginationConfiguration_1: Optional[PaginationConfiguration] = Field(
        None, alias='PaginationConfiguration'
    )
    RowSort: Optional[RowSortList] = None


class Template(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[TemplateName] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None
    Version: Optional[TemplateVersion] = None


class Theme(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    CreatedTime: Optional[Timestamp] = None
    LastUpdatedTime: Optional[Timestamp] = None
    Name: Optional[ThemeName] = None
    ThemeId: Optional[ShortRestrictiveResourceId] = None
    Type: Optional[ThemeType] = None
    Version: Optional[ThemeVersion] = None


class TooltipItem(BaseModel):
    ColumnTooltipItem_1: Optional[ColumnTooltipItem] = Field(
        None, alias='ColumnTooltipItem'
    )
    FieldTooltipItem_1: Optional[FieldTooltipItem] = Field(
        None, alias='FieldTooltipItem'
    )


class TooltipItemList(RootModel[List[TooltipItem]]):
    root: List[TooltipItem] = Field(..., max_length=100)


class TopBottomFilter(BaseModel):
    AggregationSortConfigurations: AggregationSortConfigurationList
    Column: ColumnIdentifier
    FilterId: ShortRestrictiveResourceId
    Limit: Optional[Integer] = None
    ParameterName_1: Optional[ParameterName] = Field(None, alias='ParameterName')
    TimeGranularity_1: Optional[TimeGranularity] = Field(None, alias='TimeGranularity')


class TreeMapSortConfiguration(BaseModel):
    TreeMapGroupItemsLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    TreeMapSort: Optional[FieldSortOptionsList] = None


class UpdateDataSetRequest(BaseModel):
    ColumnGroups: Optional[ColumnGroupList] = None
    ColumnLevelPermissionRules: Optional[ColumnLevelPermissionRuleList] = None
    DataSetUsageConfiguration_1: Optional[DataSetUsageConfiguration] = Field(
        None, alias='DataSetUsageConfiguration'
    )
    FieldFolders: Optional[FieldFolderMap] = None
    ImportMode: DataSetImportMode
    LogicalTableMap_1: Optional[LogicalTableMap] = Field(None, alias='LogicalTableMap')
    Name: ResourceName
    PhysicalTableMap_1: PhysicalTableMap = Field(..., alias='PhysicalTableMap')
    RowLevelPermissionDataSet_1: Optional[RowLevelPermissionDataSet] = Field(
        None, alias='RowLevelPermissionDataSet'
    )
    RowLevelPermissionTagConfiguration_1: Optional[
        RowLevelPermissionTagConfiguration
    ] = Field(None, alias='RowLevelPermissionTagConfiguration')


class UpdateDataSourceRequest(BaseModel):
    Credentials: Optional[DataSourceCredentials] = None
    DataSourceParameters_1: Optional[DataSourceParameters] = Field(
        None, alias='DataSourceParameters'
    )
    Name: ResourceName
    SslProperties_1: Optional[SslProperties] = Field(None, alias='SslProperties')
    VpcConnectionProperties_1: Optional[VpcConnectionProperties] = Field(
        None, alias='VpcConnectionProperties'
    )


class VisualCustomActionOperation(BaseModel):
    FilterOperation: Optional[CustomActionFilterOperation] = None
    NavigationOperation: Optional[CustomActionNavigationOperation] = None
    SetParametersOperation: Optional[CustomActionSetParametersOperation] = None
    URLOperation: Optional[CustomActionURLOperation] = None


class VisualCustomActionOperationList(RootModel[List[VisualCustomActionOperation]]):
    root: List[VisualCustomActionOperation] = Field(..., max_length=2, min_length=1)


class WaterfallChartSortConfiguration(BaseModel):
    BreakdownItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None


class WordCloudSortConfiguration(BaseModel):
    CategoryItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None


class AccountsAwsAccountIdDataSetsPostRequest(BaseModel):
    ColumnGroups: Optional[List[ColumnGroup]] = Field(
        None,
        description='Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.',
        max_length=8,
        min_length=1,
    )
    ColumnLevelPermissionRules: Optional[List[ColumnLevelPermissionRule]] = Field(
        None,
        description='A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.',
        min_length=1,
    )
    DataSetId: str = Field(
        ...,
        description='An ID for the dataset that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.',
    )
    DataSetUsageConfiguration_1: Optional[DataSetUsageConfiguration] = Field(
        None,
        alias='DataSetUsageConfiguration',
        description='The usage configuration to apply to child datasets that reference this dataset as a source.',
    )
    FieldFolders: Optional[Dict[str, FieldFolder]] = Field(
        None,
        description='The folder that contains fields and nested subfolders for your dataset.',
    )
    ImportMode_1: ImportMode = Field(
        ...,
        alias='ImportMode',
        description='Indicates whether you want to import the data into SPICE.',
    )
    LogicalTableMap: Optional[Dict[str, LogicalTable]] = Field(
        None,
        description='Configures the combination and transformation of the data from the physical tables.',
    )
    Name: constr(min_length=1, max_length=128) = Field(
        ..., description='The display name for the dataset.'
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions on the dataset.',
        max_length=64,
        min_length=1,
    )
    PhysicalTableMap: Dict[str, PhysicalTable] = Field(
        ...,
        description='Declares the physical tables that are available in the underlying data sources.',
    )
    RowLevelPermissionDataSet: Optional[RowLevelPermissionDataSet1] = Field(
        None,
        description='<p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p>',
    )
    RowLevelPermissionTagConfiguration: Optional[
        RowLevelPermissionTagConfiguration1
    ] = Field(
        None,
        description='The configuration of tags on a dataset to set row-level security. ',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Contains a map of the key-value pairs for the resource tag or tags assigned to the dataset.',
        max_length=200,
        min_length=1,
    )


class AccountsAwsAccountIdDataSetsDataSetIdPutRequest(BaseModel):
    ColumnGroups: Optional[List[ColumnGroup]] = Field(
        None,
        description='Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.',
        max_length=8,
        min_length=1,
    )
    ColumnLevelPermissionRules: Optional[List[ColumnLevelPermissionRule]] = Field(
        None,
        description='A set of one or more definitions of a <code> <a href="https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html">ColumnLevelPermissionRule</a> </code>.',
        min_length=1,
    )
    DataSetUsageConfiguration_1: Optional[DataSetUsageConfiguration] = Field(
        None,
        alias='DataSetUsageConfiguration',
        description='The usage configuration to apply to child datasets that reference this dataset as a source.',
    )
    FieldFolders: Optional[Dict[str, FieldFolder]] = Field(
        None,
        description='The folder that contains fields and nested subfolders for your dataset.',
    )
    ImportMode_1: ImportMode = Field(
        ...,
        alias='ImportMode',
        description='Indicates whether you want to import the data into SPICE.',
    )
    LogicalTableMap: Optional[Dict[str, LogicalTable]] = Field(
        None,
        description='Configures the combination and transformation of the data from the physical tables.',
    )
    Name: constr(min_length=1, max_length=128) = Field(
        ..., description='The display name for the dataset.'
    )
    PhysicalTableMap: Dict[str, PhysicalTable] = Field(
        ...,
        description='Declares the physical tables that are available in the underlying data sources.',
    )
    RowLevelPermissionDataSet: Optional[RowLevelPermissionDataSet1] = Field(
        None,
        description='<p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href="https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p>',
    )
    RowLevelPermissionTagConfiguration: Optional[
        RowLevelPermissionTagConfiguration1
    ] = Field(
        None,
        description='The configuration of tags on a dataset to set row-level security. ',
    )


class Credentials(BaseModel):
    CopySourceArn_1: Optional[CopySourceArn] = Field(None, alias='CopySourceArn')
    CredentialPair_1: Optional[CredentialPair] = Field(None, alias='CredentialPair')
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')


class AccountsAwsAccountIdDataSourcesPostRequest(BaseModel):
    Credentials_1: Optional[Credentials] = Field(
        None,
        alias='Credentials',
        description='Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.',
    )
    DataSourceId: str = Field(
        ...,
        description='An ID for the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. ',
    )
    DataSourceParameters_1: Optional[DataSourceParameters] = Field(
        None,
        alias='DataSourceParameters',
        description='The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.',
    )
    Name: constr(min_length=1, max_length=128) = Field(
        ..., description='A display name for the data source.'
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions on the data source.',
        max_length=64,
        min_length=1,
    )
    SslProperties_1: Optional[SslProperties] = Field(
        None,
        alias='SslProperties',
        description='Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.',
        max_length=200,
        min_length=1,
    )
    Type_1: Type = Field(
        ...,
        alias='Type',
        description='<p>The type of the data source. To return a list of all data sources, use <code>ListDataSources</code>.</p> <p>Use <code>AMAZON_ELASTICSEARCH</code> for Amazon OpenSearch Service.</p>',
    )
    VpcConnectionProperties: Optional[VpcConnectionProperties1] = Field(
        None, description='VPC connection properties.'
    )


class AccountsAwsAccountIdDataSourcesDataSourceIdPutRequest(BaseModel):
    Credentials_1: Optional[Credentials] = Field(
        None,
        alias='Credentials',
        description='Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.',
    )
    DataSourceParameters_1: Optional[DataSourceParameters] = Field(
        None,
        alias='DataSourceParameters',
        description='The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.',
    )
    Name: constr(min_length=1, max_length=128) = Field(
        ..., description='A display name for the data source.'
    )
    SslProperties_1: Optional[SslProperties] = Field(
        None,
        alias='SslProperties',
        description='Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source.',
    )
    VpcConnectionProperties: Optional[VpcConnectionProperties1] = Field(
        None, description='VPC connection properties.'
    )


class AxisDisplayOptions(BaseModel):
    AxisLineVisibility: Optional[Visibility] = None
    AxisOffset: Optional[PixelLength] = None
    DataOptions: Optional[AxisDataOptions] = None
    GridLineVisibility: Optional[Visibility] = None
    ScrollbarOptions: Optional[ScrollBarOptions] = None
    TickLabelOptions: Optional[AxisTickLabelOptions] = None


class BarChartSortConfiguration(BaseModel):
    CategoryItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None
    ColorItemsLimit: Optional[ItemsLimitConfiguration] = None
    ColorSort: Optional[FieldSortOptionsList] = None
    SmallMultiplesLimitConfiguration: Optional[ItemsLimitConfiguration] = None
    SmallMultiplesSort: Optional[FieldSortOptionsList] = None


class BodySectionContent(BaseModel):
    Layout: Optional[SectionLayoutConfiguration] = None


class BoxPlotSortConfiguration(BaseModel):
    CategorySort: Optional[FieldSortOptionsList] = None
    PaginationConfiguration_1: Optional[PaginationConfiguration] = Field(
        None, alias='PaginationConfiguration'
    )


class CategoricalDimensionField(BaseModel):
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration: Optional[StringFormatConfiguration] = None
    HierarchyId_1: Optional[HierarchyId] = Field(None, alias='HierarchyId')


class CategoricalMeasureField(BaseModel):
    AggregationFunction: Optional[CategoricalAggregationFunction] = None
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration: Optional[StringFormatConfiguration] = None


class ColumnHierarchy(BaseModel):
    DateTimeHierarchy_1: Optional[DateTimeHierarchy] = Field(
        None, alias='DateTimeHierarchy'
    )
    ExplicitHierarchy_1: Optional[ExplicitHierarchy] = Field(
        None, alias='ExplicitHierarchy'
    )
    PredefinedHierarchy_1: Optional[PredefinedHierarchy] = Field(
        None, alias='PredefinedHierarchy'
    )


class ColumnHierarchyList(RootModel[List[ColumnHierarchy]]):
    root: List[ColumnHierarchy] = Field(..., max_length=2)


class ComboChartSortConfiguration(BaseModel):
    CategoryItemsLimit: Optional[ItemsLimitConfiguration] = None
    CategorySort: Optional[FieldSortOptionsList] = None
    ColorItemsLimit: Optional[ItemsLimitConfiguration] = None
    ColorSort: Optional[FieldSortOptionsList] = None


class ComparisonFormatConfiguration(BaseModel):
    NumberDisplayFormatConfiguration_1: Optional[NumberDisplayFormatConfiguration] = (
        Field(None, alias='NumberDisplayFormatConfiguration')
    )
    PercentageDisplayFormatConfiguration_1: Optional[
        PercentageDisplayFormatConfiguration
    ] = Field(None, alias='PercentageDisplayFormatConfiguration')


class ConditionalFormattingColor(BaseModel):
    Gradient: Optional[ConditionalFormattingGradientColor] = None
    Solid: Optional[ConditionalFormattingSolidColor] = None


class CreateDataSetRequest(BaseModel):
    ColumnGroups: Optional[ColumnGroupList] = None
    ColumnLevelPermissionRules: Optional[ColumnLevelPermissionRuleList] = None
    DataSetId: ResourceId
    DataSetUsageConfiguration_1: Optional[DataSetUsageConfiguration] = Field(
        None, alias='DataSetUsageConfiguration'
    )
    FieldFolders: Optional[FieldFolderMap] = None
    ImportMode: DataSetImportMode
    LogicalTableMap_1: Optional[LogicalTableMap] = Field(None, alias='LogicalTableMap')
    Name: ResourceName
    Permissions: Optional[ResourcePermissionList] = None
    PhysicalTableMap_1: PhysicalTableMap = Field(..., alias='PhysicalTableMap')
    RowLevelPermissionDataSet_1: Optional[RowLevelPermissionDataSet] = Field(
        None, alias='RowLevelPermissionDataSet'
    )
    RowLevelPermissionTagConfiguration_1: Optional[
        RowLevelPermissionTagConfiguration
    ] = Field(None, alias='RowLevelPermissionTagConfiguration')
    Tags: Optional[TagList] = None


class CreateDataSourceRequest(BaseModel):
    Credentials: Optional[DataSourceCredentials] = None
    DataSourceId: ResourceId
    DataSourceParameters_1: Optional[DataSourceParameters] = Field(
        None, alias='DataSourceParameters'
    )
    Name: ResourceName
    Permissions: Optional[ResourcePermissionList] = None
    SslProperties_1: Optional[SslProperties] = Field(None, alias='SslProperties')
    Tags: Optional[TagList] = None
    Type: DataSourceType
    VpcConnectionProperties_1: Optional[VpcConnectionProperties] = Field(
        None, alias='VpcConnectionProperties'
    )


class DataSet(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    ColumnGroups: Optional[ColumnGroupList] = None
    ColumnLevelPermissionRules: Optional[ColumnLevelPermissionRuleList] = None
    ConsumedSpiceCapacityInBytes: Optional[Long] = None
    CreatedTime: Optional[Timestamp] = None
    DataSetId: Optional[ResourceId] = None
    DataSetUsageConfiguration_1: Optional[DataSetUsageConfiguration] = Field(
        None, alias='DataSetUsageConfiguration'
    )
    FieldFolders: Optional[FieldFolderMap] = None
    ImportMode: Optional[DataSetImportMode] = None
    LastUpdatedTime: Optional[Timestamp] = None
    LogicalTableMap_1: Optional[LogicalTableMap] = Field(None, alias='LogicalTableMap')
    Name: Optional[ResourceName] = None
    OutputColumns: Optional[OutputColumnList] = None
    PhysicalTableMap_1: Optional[PhysicalTableMap] = Field(
        None, alias='PhysicalTableMap'
    )
    RowLevelPermissionDataSet_1: Optional[RowLevelPermissionDataSet] = Field(
        None, alias='RowLevelPermissionDataSet'
    )
    RowLevelPermissionTagConfiguration_1: Optional[
        RowLevelPermissionTagConfiguration
    ] = Field(None, alias='RowLevelPermissionTagConfiguration')


class DateTimeFormatConfiguration(BaseModel):
    DateTimeFormat_1: Optional[DateTimeFormat] = Field(None, alias='DateTimeFormat')
    NullValueFormatConfiguration_1: Optional[NullValueFormatConfiguration] = Field(
        None, alias='NullValueFormatConfiguration'
    )
    NumericFormatConfiguration_1: Optional[NumericFormatConfiguration] = Field(
        None, alias='NumericFormatConfiguration'
    )


class DefaultPaginatedLayoutConfiguration(BaseModel):
    SectionBased: Optional[DefaultSectionBasedLayoutConfiguration] = None


class DescribeDataSetResponse(BaseModel):
    DataSet_1: Optional[DataSet] = Field(None, alias='DataSet')
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None


class DescribeTemplateResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    Template_1: Optional[Template] = Field(None, alias='Template')


class DescribeThemeResponse(BaseModel):
    RequestId: Optional[String] = None
    Status: Optional[StatusCode] = None
    Theme_1: Optional[Theme] = Field(None, alias='Theme')


class FieldBasedTooltip(BaseModel):
    AggregationVisibility: Optional[Visibility] = None
    TooltipFields: Optional[TooltipItemList] = None
    TooltipTitleType_1: Optional[TooltipTitleType] = Field(
        None, alias='TooltipTitleType'
    )


class Filter(BaseModel):
    CategoryFilter_1: Optional[CategoryFilter] = Field(None, alias='CategoryFilter')
    NumericEqualityFilter_1: Optional[NumericEqualityFilter] = Field(
        None, alias='NumericEqualityFilter'
    )
    NumericRangeFilter_1: Optional[NumericRangeFilter] = Field(
        None, alias='NumericRangeFilter'
    )
    RelativeDatesFilter_1: Optional[RelativeDatesFilter] = Field(
        None, alias='RelativeDatesFilter'
    )
    TimeEqualityFilter_1: Optional[TimeEqualityFilter] = Field(
        None, alias='TimeEqualityFilter'
    )
    TimeRangeFilter_1: Optional[TimeRangeFilter] = Field(None, alias='TimeRangeFilter')
    TopBottomFilter_1: Optional[TopBottomFilter] = Field(None, alias='TopBottomFilter')


class FilterControl(BaseModel):
    DateTimePicker: Optional[FilterDateTimePickerControl] = None
    Dropdown: Optional[FilterDropDownControl] = None
    List: Optional[FilterListControl] = None
    RelativeDateTime: Optional[FilterRelativeDateTimeControl] = None
    Slider: Optional[FilterSliderControl] = None
    TextArea: Optional[FilterTextAreaControl] = None
    TextField: Optional[FilterTextFieldControl] = None


class FilterControlList(RootModel[List[FilterControl]]):
    root: List[FilterControl] = Field(..., max_length=200)


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., max_length=20)


class GaugeChartArcConditionalFormatting(BaseModel):
    ForegroundColor: Optional[ConditionalFormattingColor] = None


class GaugeChartPrimaryValueConditionalFormatting(BaseModel):
    Icon: Optional[ConditionalFormattingIcon] = None
    TextColor: Optional[ConditionalFormattingColor] = None


class HeaderFooterSectionConfiguration(BaseModel):
    Layout: SectionLayoutConfiguration
    SectionId: ShortRestrictiveResourceId
    Style: Optional[SectionStyle] = None


class HeaderFooterSectionConfigurationList(
    RootModel[List[HeaderFooterSectionConfiguration]]
):
    root: List[HeaderFooterSectionConfiguration] = Field(..., max_length=1)


class KPIPrimaryValueConditionalFormatting(BaseModel):
    Icon: Optional[ConditionalFormattingIcon] = None
    TextColor: Optional[ConditionalFormattingColor] = None


class KPIProgressBarConditionalFormatting(BaseModel):
    ForegroundColor: Optional[ConditionalFormattingColor] = None


class LineSeriesAxisDisplayOptions(BaseModel):
    AxisOptions: Optional[AxisDisplayOptions] = None
    MissingDataConfigurations: Optional[MissingDataConfigurationList] = None


class NumberFormatConfiguration(BaseModel):
    FormatConfiguration: Optional[NumericFormatConfiguration] = None


class NumericalDimensionField(BaseModel):
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration: Optional[NumberFormatConfiguration] = None
    HierarchyId_1: Optional[HierarchyId] = Field(None, alias='HierarchyId')


class NumericalMeasureField(BaseModel):
    AggregationFunction: Optional[NumericalAggregationFunction] = None
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration: Optional[NumberFormatConfiguration] = None


class ParameterControl(BaseModel):
    DateTimePicker: Optional[ParameterDateTimePickerControl] = None
    Dropdown: Optional[ParameterDropDownControl] = None
    List: Optional[ParameterListControl] = None
    Slider: Optional[ParameterSliderControl] = None
    TextArea: Optional[ParameterTextAreaControl] = None
    TextField: Optional[ParameterTextFieldControl] = None


class ParameterControlList(RootModel[List[ParameterControl]]):
    root: List[ParameterControl] = Field(..., max_length=200)


class PivotFieldSortOptions(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    SortBy: PivotTableSortBy


class PivotFieldSortOptionsList(RootModel[List[PivotFieldSortOptions]]):
    root: List[PivotFieldSortOptions] = Field(..., max_length=200)


class PivotTableSortConfiguration(BaseModel):
    FieldSortOptions: Optional[PivotFieldSortOptionsList] = None


class PivotTableTotalOptions(BaseModel):
    ColumnSubtotalOptions: Optional[SubtotalOptions] = None
    ColumnTotalOptions: Optional[PivotTotalOptions] = None
    RowSubtotalOptions: Optional[SubtotalOptions] = None
    RowTotalOptions: Optional[PivotTotalOptions] = None


class ReferenceLineDataConfiguration(BaseModel):
    AxisBinding_1: Optional[AxisBinding] = Field(None, alias='AxisBinding')
    DynamicConfiguration: Optional[ReferenceLineDynamicDataConfiguration] = None
    StaticConfiguration: Optional[ReferenceLineStaticDataConfiguration] = None


class ReferenceLineLabelConfiguration(BaseModel):
    CustomLabelConfiguration: Optional[ReferenceLineCustomLabelConfiguration] = None
    FontColor: Optional[HexColor] = None
    FontConfiguration_1: Optional[FontConfiguration] = Field(
        None, alias='FontConfiguration'
    )
    HorizontalPosition: Optional[ReferenceLineLabelHorizontalPosition] = None
    ValueLabelConfiguration: Optional[ReferenceLineValueLabelConfiguration] = None
    VerticalPosition: Optional[ReferenceLineLabelVerticalPosition] = None


class ShapeConditionalFormat(BaseModel):
    BackgroundColor: ConditionalFormattingColor


class TableFieldOption(BaseModel):
    CustomLabel_1: Optional[CustomLabel] = Field(None, alias='CustomLabel')
    FieldId_1: FieldId = Field(..., alias='FieldId')
    URLStyling: Optional[TableFieldURLConfiguration] = None
    Visibility_1: Optional[Visibility] = Field(None, alias='Visibility')
    Width: Optional[PixelLength] = None


class TableFieldOptionList(RootModel[List[TableFieldOption]]):
    root: List[TableFieldOption] = Field(..., max_length=100)


class TableFieldOptions(BaseModel):
    Order: Optional[FieldOrderList] = None
    SelectedFieldOptions: Optional[TableFieldOptionList] = None


class TableRowConditionalFormatting(BaseModel):
    BackgroundColor: Optional[ConditionalFormattingColor] = None
    TextColor: Optional[ConditionalFormattingColor] = None


class TextConditionalFormat(BaseModel):
    BackgroundColor: Optional[ConditionalFormattingColor] = None
    Icon: Optional[ConditionalFormattingIcon] = None
    TextColor: Optional[ConditionalFormattingColor] = None


class TooltipOptions(BaseModel):
    FieldBasedTooltip_1: Optional[FieldBasedTooltip] = Field(
        None, alias='FieldBasedTooltip'
    )
    SelectedTooltipType_1: Optional[SelectedTooltipType] = Field(
        None, alias='SelectedTooltipType'
    )
    TooltipVisibility: Optional[Visibility] = None


class VisualCustomAction(BaseModel):
    ActionOperations: VisualCustomActionOperationList
    CustomActionId: ShortRestrictiveResourceId
    Name: VisualCustomActionName
    Status: Optional[WidgetStatus] = None
    Trigger: VisualCustomActionTrigger


class VisualCustomActionList(RootModel[List[VisualCustomAction]]):
    root: List[VisualCustomAction] = Field(..., max_length=10)


class BodySectionConfiguration(BaseModel):
    Content: BodySectionContent
    PageBreakConfiguration: Optional[SectionPageBreakConfiguration] = None
    SectionId: ShortRestrictiveResourceId
    Style: Optional[SectionStyle] = None


class BodySectionConfigurationList(RootModel[List[BodySectionConfiguration]]):
    root: List[BodySectionConfiguration] = Field(..., max_length=28)


class ComparisonConfiguration(BaseModel):
    ComparisonFormat: Optional[ComparisonFormatConfiguration] = None
    ComparisonMethod_1: Optional[ComparisonMethod] = Field(
        None, alias='ComparisonMethod'
    )


class CustomContentVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[CustomContentConfiguration] = None
    DataSetIdentifier_1: DataSetIdentifier = Field(..., alias='DataSetIdentifier')
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class DateDimensionField(BaseModel):
    Column: ColumnIdentifier
    DateGranularity: Optional[TimeGranularity] = None
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration: Optional[DateTimeFormatConfiguration] = None
    HierarchyId_1: Optional[HierarchyId] = Field(None, alias='HierarchyId')


class DateMeasureField(BaseModel):
    AggregationFunction: Optional[DateAggregationFunction] = None
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration: Optional[DateTimeFormatConfiguration] = None


class DefaultNewSheetConfiguration(BaseModel):
    InteractiveLayoutConfiguration: Optional[DefaultInteractiveLayoutConfiguration] = (
        None
    )
    PaginatedLayoutConfiguration: Optional[DefaultPaginatedLayoutConfiguration] = None
    SheetContentType_1: Optional[SheetContentType] = Field(
        None, alias='SheetContentType'
    )


class DimensionField(BaseModel):
    CategoricalDimensionField_1: Optional[CategoricalDimensionField] = Field(
        None, alias='CategoricalDimensionField'
    )
    DateDimensionField_1: Optional[DateDimensionField] = Field(
        None, alias='DateDimensionField'
    )
    NumericalDimensionField_1: Optional[NumericalDimensionField] = Field(
        None, alias='NumericalDimensionField'
    )


class DimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=200)


class EmptyVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    DataSetIdentifier_1: DataSetIdentifier = Field(..., alias='DataSetIdentifier')
    VisualId: ShortRestrictiveResourceId


class FilledMapDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class FilledMapShapeConditionalFormatting(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    Format: Optional[ShapeConditionalFormat] = None


class FilterGroup(BaseModel):
    CrossDataset: CrossDatasetTypes
    FilterGroupId: ShortRestrictiveResourceId
    Filters: FilterList
    ScopeConfiguration: FilterScopeConfiguration
    Status: Optional[WidgetStatus] = None


class FilterGroupList(RootModel[List[FilterGroup]]):
    root: List[FilterGroup] = Field(..., max_length=2000)


class FormatConfiguration(BaseModel):
    DateTimeFormatConfiguration_1: Optional[DateTimeFormatConfiguration] = Field(
        None, alias='DateTimeFormatConfiguration'
    )
    NumberFormatConfiguration_1: Optional[NumberFormatConfiguration] = Field(
        None, alias='NumberFormatConfiguration'
    )
    StringFormatConfiguration_1: Optional[StringFormatConfiguration] = Field(
        None, alias='StringFormatConfiguration'
    )


class FunnelChartDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class GaugeChartConditionalFormattingOption(BaseModel):
    Arc: Optional[GaugeChartArcConditionalFormatting] = None
    PrimaryValue: Optional[GaugeChartPrimaryValueConditionalFormatting] = None


class GaugeChartConditionalFormattingOptionList(
    RootModel[List[GaugeChartConditionalFormattingOption]]
):
    root: List[GaugeChartConditionalFormattingOption] = Field(..., max_length=100)


class GaugeChartOptions(BaseModel):
    Arc: Optional[ArcConfiguration] = None
    ArcAxis: Optional[ArcAxisConfiguration] = None
    Comparison: Optional[ComparisonConfiguration] = None
    PrimaryValueDisplayType_1: Optional[PrimaryValueDisplayType] = Field(
        None, alias='PrimaryValueDisplayType'
    )
    PrimaryValueFontConfiguration: Optional[FontConfiguration] = None


class HeatMapDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class KPIConditionalFormattingOption(BaseModel):
    PrimaryValue: Optional[KPIPrimaryValueConditionalFormatting] = None
    ProgressBar: Optional[KPIProgressBarConditionalFormatting] = None


class KPIConditionalFormattingOptionList(
    RootModel[List[KPIConditionalFormattingOption]]
):
    root: List[KPIConditionalFormattingOption] = Field(..., max_length=100)


class KPIOptions(BaseModel):
    Comparison: Optional[ComparisonConfiguration] = None
    PrimaryValueDisplayType_1: Optional[PrimaryValueDisplayType] = Field(
        None, alias='PrimaryValueDisplayType'
    )
    PrimaryValueFontConfiguration: Optional[FontConfiguration] = None
    ProgressBar: Optional[ProgressBarOptions] = None
    SecondaryValue: Optional[SecondaryValueOptions] = None
    SecondaryValueFontConfiguration: Optional[FontConfiguration] = None
    TrendArrows: Optional[TrendArrowOptions] = None


class MeasureField(BaseModel):
    CalculatedMeasureField_1: Optional[CalculatedMeasureField] = Field(
        None, alias='CalculatedMeasureField'
    )
    CategoricalMeasureField_1: Optional[CategoricalMeasureField] = Field(
        None, alias='CategoricalMeasureField'
    )
    DateMeasureField_1: Optional[DateMeasureField] = Field(
        None, alias='DateMeasureField'
    )
    NumericalMeasureField_1: Optional[NumericalMeasureField] = Field(
        None, alias='NumericalMeasureField'
    )


class MeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=200)


class MetricComparisonComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    FromValue: MeasureField
    Name: Optional[String] = None
    TargetValue: MeasureField
    Time: DimensionField


class PeriodOverPeriodComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None
    Time: DimensionField
    Value: Optional[MeasureField] = None


class PeriodToDateComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None
    PeriodTimeGranularity: Optional[TimeGranularity] = None
    Time: DimensionField
    Value: Optional[MeasureField] = None


class PivotMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=40)


class PivotTableCellConditionalFormatting(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    Scope: Optional[PivotTableConditionalFormattingScope] = None
    TextFormat: Optional[TextConditionalFormat] = None


class PivotTableConditionalFormattingOption(BaseModel):
    Cell: Optional[PivotTableCellConditionalFormatting] = None


class PivotTableConditionalFormattingOptionList(
    RootModel[List[PivotTableConditionalFormattingOption]]
):
    root: List[PivotTableConditionalFormattingOption] = Field(..., max_length=100)


class PivotTableDimensionList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=40)


class RadarChartCategoryFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class RadarChartColorFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class RadarChartValuesFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=20)


class ReferenceLine(BaseModel):
    DataConfiguration: ReferenceLineDataConfiguration
    LabelConfiguration: Optional[ReferenceLineLabelConfiguration] = None
    Status: Optional[WidgetStatus] = None
    StyleConfiguration: Optional[ReferenceLineStyleConfiguration] = None


class ReferenceLineList(RootModel[List[ReferenceLine]]):
    root: List[ReferenceLine] = Field(..., max_length=20)


class SankeyDiagramAggregatedFieldWells(BaseModel):
    Destination: Optional[DimensionFieldList] = None
    Source: Optional[DimensionFieldList] = None
    Weight: Optional[MeasureFieldList] = None


class SankeyDiagramFieldWells(BaseModel):
    SankeyDiagramAggregatedFieldWells_1: Optional[SankeyDiagramAggregatedFieldWells] = (
        Field(None, alias='SankeyDiagramAggregatedFieldWells')
    )


class ScatterPlotCategoricallyAggregatedFieldWells(BaseModel):
    Category: Optional[DimensionFieldList] = None
    Size: Optional[MeasureFieldList] = None
    XAxis: Optional[MeasureFieldList] = None
    YAxis: Optional[MeasureFieldList] = None


class ScatterPlotUnaggregatedFieldWells(BaseModel):
    Size: Optional[MeasureFieldList] = None
    XAxis: Optional[DimensionFieldList] = None
    YAxis: Optional[DimensionFieldList] = None


class SectionBasedLayoutConfiguration(BaseModel):
    BodySections: BodySectionConfigurationList
    CanvasSizeOptions: SectionBasedLayoutCanvasSizeOptions
    FooterSections: HeaderFooterSectionConfigurationList
    HeaderSections: HeaderFooterSectionConfigurationList


class SmallMultiplesDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class TableAggregatedFieldWells(BaseModel):
    GroupBy: Optional[DimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class TableCellConditionalFormatting(BaseModel):
    FieldId_1: FieldId = Field(..., alias='FieldId')
    TextFormat: Optional[TextConditionalFormat] = None


class TableConditionalFormattingOption(BaseModel):
    Cell: Optional[TableCellConditionalFormatting] = None
    Row: Optional[TableRowConditionalFormatting] = None


class TableConditionalFormattingOptionList(
    RootModel[List[TableConditionalFormattingOption]]
):
    root: List[TableConditionalFormattingOption] = Field(..., max_length=100)


class TopBottomMoversComputation(BaseModel):
    Category: DimensionField
    ComputationId: ShortRestrictiveResourceId
    MoverSize: Optional[TopBottomMoversComputationMoverSize] = None
    Name: Optional[String] = None
    SortOrder: Optional[TopBottomSortOrder] = None
    Time: DimensionField
    Type: TopBottomComputationType
    Value: Optional[MeasureField] = None


class TopBottomRankedComputation(BaseModel):
    Category: DimensionField
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None
    ResultSize: Optional[TopBottomRankedComputationResultSize] = None
    Type: TopBottomComputationType
    Value: Optional[MeasureField] = None


class TotalAggregationComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None
    Value: MeasureField


class TreeMapDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class TreeMapMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=1)


class UnaggregatedField(BaseModel):
    Column: ColumnIdentifier
    FieldId_1: FieldId = Field(..., alias='FieldId')
    FormatConfiguration_1: Optional[FormatConfiguration] = Field(
        None, alias='FormatConfiguration'
    )


class UnaggregatedFieldList(RootModel[List[UnaggregatedField]]):
    root: List[UnaggregatedField] = Field(..., max_length=200)


class UniqueValuesComputation(BaseModel):
    Category: DimensionField
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None


class WaterfallChartAggregatedFieldWells(BaseModel):
    Breakdowns: Optional[DimensionFieldList] = None
    Categories: Optional[DimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class WaterfallChartFieldWells(BaseModel):
    WaterfallChartAggregatedFieldWells_1: Optional[
        WaterfallChartAggregatedFieldWells
    ] = Field(None, alias='WaterfallChartAggregatedFieldWells')


class WordCloudDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=10)


class WordCloudMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=1)


class AnalysisDefaults(BaseModel):
    DefaultNewSheetConfiguration_1: DefaultNewSheetConfiguration = Field(
        ..., alias='DefaultNewSheetConfiguration'
    )


class BarChartAggregatedFieldWells(BaseModel):
    Category: Optional[DimensionFieldList] = None
    Colors: Optional[DimensionFieldList] = None
    SmallMultiples: Optional[SmallMultiplesDimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class BarChartFieldWells(BaseModel):
    BarChartAggregatedFieldWells_1: Optional[BarChartAggregatedFieldWells] = Field(
        None, alias='BarChartAggregatedFieldWells'
    )


class BoxPlotDimensionFieldList(RootModel[List[DimensionField]]):
    root: List[DimensionField] = Field(..., max_length=1)


class BoxPlotMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=5)


class ColumnConfiguration(BaseModel):
    Column: ColumnIdentifier
    FormatConfiguration_1: Optional[FormatConfiguration] = Field(
        None, alias='FormatConfiguration'
    )
    Role: Optional[ColumnRole] = None


class ColumnConfigurationList(RootModel[List[ColumnConfiguration]]):
    root: List[ColumnConfiguration] = Field(..., max_length=200)


class ComboChartAggregatedFieldWells(BaseModel):
    BarValues: Optional[MeasureFieldList] = None
    Category: Optional[DimensionFieldList] = None
    Colors: Optional[DimensionFieldList] = None
    LineValues: Optional[MeasureFieldList] = None


class ComboChartFieldWells(BaseModel):
    ComboChartAggregatedFieldWells_1: Optional[ComboChartAggregatedFieldWells] = Field(
        None, alias='ComboChartAggregatedFieldWells'
    )


class FilledMapConditionalFormattingOption(BaseModel):
    Shape: FilledMapShapeConditionalFormatting


class FilledMapConditionalFormattingOptionList(
    RootModel[List[FilledMapConditionalFormattingOption]]
):
    root: List[FilledMapConditionalFormattingOption] = Field(..., max_length=200)


class FilledMapMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=1)


class ForecastComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    CustomSeasonalityValue: Optional[ForecastComputationCustomSeasonalityValue] = None
    LowerBoundary: Optional[Double] = None
    Name: Optional[String] = None
    PeriodsBackward_1: Optional[PeriodsBackward] = Field(None, alias='PeriodsBackward')
    PeriodsForward_1: Optional[PeriodsForward] = Field(None, alias='PeriodsForward')
    PredictionInterval_1: Optional[PredictionInterval] = Field(
        None, alias='PredictionInterval'
    )
    Seasonality: Optional[ForecastComputationSeasonality] = None
    Time: DimensionField
    UpperBoundary: Optional[Double] = None
    Value: Optional[MeasureField] = None


class FunnelChartMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=1)


class GaugeChartConditionalFormatting(BaseModel):
    ConditionalFormattingOptions: Optional[
        GaugeChartConditionalFormattingOptionList
    ] = None


class GaugeChartFieldWells(BaseModel):
    TargetValues: Optional[MeasureFieldList] = None
    Values: Optional[MeasureFieldList] = None


class GeospatialMapAggregatedFieldWells(BaseModel):
    Colors: Optional[DimensionFieldList] = None
    Geospatial: Optional[DimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class GeospatialMapFieldWells(BaseModel):
    GeospatialMapAggregatedFieldWells_1: Optional[GeospatialMapAggregatedFieldWells] = (
        Field(None, alias='GeospatialMapAggregatedFieldWells')
    )


class GrowthRateComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None
    PeriodSize: Optional[GrowthRatePeriodSize] = None
    Time: DimensionField
    Value: Optional[MeasureField] = None


class HeatMapMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=1)


class HistogramMeasureFieldList(RootModel[List[MeasureField]]):
    root: List[MeasureField] = Field(..., max_length=1)


class KPIConditionalFormatting(BaseModel):
    ConditionalFormattingOptions: Optional[KPIConditionalFormattingOptionList] = None


class KPIFieldWells(BaseModel):
    TargetValues: Optional[MeasureFieldList] = None
    TrendGroups: Optional[DimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class LayoutConfiguration(BaseModel):
    FreeFormLayout: Optional[FreeFormLayoutConfiguration] = None
    GridLayout: Optional[GridLayoutConfiguration] = None
    SectionBasedLayout: Optional[SectionBasedLayoutConfiguration] = None


class LineChartAggregatedFieldWells(BaseModel):
    Category: Optional[DimensionFieldList] = None
    Colors: Optional[DimensionFieldList] = None
    SmallMultiples: Optional[SmallMultiplesDimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class LineChartFieldWells(BaseModel):
    LineChartAggregatedFieldWells_1: Optional[LineChartAggregatedFieldWells] = Field(
        None, alias='LineChartAggregatedFieldWells'
    )


class MaximumMinimumComputation(BaseModel):
    ComputationId: ShortRestrictiveResourceId
    Name: Optional[String] = None
    Time: DimensionField
    Type: MaximumMinimumComputationType
    Value: Optional[MeasureField] = None


class PieChartAggregatedFieldWells(BaseModel):
    Category: Optional[DimensionFieldList] = None
    SmallMultiples: Optional[SmallMultiplesDimensionFieldList] = None
    Values: Optional[MeasureFieldList] = None


class PieChartFieldWells(BaseModel):
    PieChartAggregatedFieldWells_1: Optional[PieChartAggregatedFieldWells] = Field(
        None, alias='PieChartAggregatedFieldWells'
    )


class PivotTableAggregatedFieldWells(BaseModel):
    Columns: Optional[PivotTableDimensionList] = None
    Rows: Optional[PivotTableDimensionList] = None
    Values: Optional[PivotMeasureFieldList] = None


class PivotTableConditionalFormatting(BaseModel):
    ConditionalFormattingOptions: Optional[
        PivotTableConditionalFormattingOptionList
    ] = None


class PivotTableFieldWells(BaseModel):
    PivotTableAggregatedFieldWells_1: Optional[PivotTableAggregatedFieldWells] = Field(
        None, alias='PivotTableAggregatedFieldWells'
    )


class RadarChartAggregatedFieldWells(BaseModel):
    Category: Optional[RadarChartCategoryFieldList] = None
    Color: Optional[RadarChartColorFieldList] = None
    Values: Optional[RadarChartValuesFieldList] = None


class RadarChartFieldWells(BaseModel):
    RadarChartAggregatedFieldWells_1: Optional[RadarChartAggregatedFieldWells] = Field(
        None, alias='RadarChartAggregatedFieldWells'
    )


class SankeyDiagramChartConfiguration(BaseModel):
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[SankeyDiagramFieldWells] = None
    SortConfiguration: Optional[SankeyDiagramSortConfiguration] = None


class SankeyDiagramVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[SankeyDiagramChartConfiguration] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class ScatterPlotFieldWells(BaseModel):
    ScatterPlotCategoricallyAggregatedFieldWells_1: Optional[
        ScatterPlotCategoricallyAggregatedFieldWells
    ] = Field(None, alias='ScatterPlotCategoricallyAggregatedFieldWells')
    ScatterPlotUnaggregatedFieldWells_1: Optional[ScatterPlotUnaggregatedFieldWells] = (
        Field(None, alias='ScatterPlotUnaggregatedFieldWells')
    )


class TableConditionalFormatting(BaseModel):
    ConditionalFormattingOptions: Optional[TableConditionalFormattingOptionList] = None


class TableUnaggregatedFieldWells(BaseModel):
    Values: Optional[UnaggregatedFieldList] = None


class TreeMapAggregatedFieldWells(BaseModel):
    Colors: Optional[TreeMapMeasureFieldList] = None
    Groups: Optional[TreeMapDimensionFieldList] = None
    Sizes: Optional[TreeMapMeasureFieldList] = None


class TreeMapFieldWells(BaseModel):
    TreeMapAggregatedFieldWells_1: Optional[TreeMapAggregatedFieldWells] = Field(
        None, alias='TreeMapAggregatedFieldWells'
    )


class WaterfallChartConfiguration(BaseModel):
    CategoryAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    CategoryAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[WaterfallChartFieldWells] = None
    Legend: Optional[LegendOptions] = None
    PrimaryYAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    PrimaryYAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    SortConfiguration: Optional[WaterfallChartSortConfiguration] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')
    WaterfallChartOptions_1: Optional[WaterfallChartOptions] = Field(
        None, alias='WaterfallChartOptions'
    )


class WaterfallVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[WaterfallChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class WordCloudAggregatedFieldWells(BaseModel):
    GroupBy: Optional[WordCloudDimensionFieldList] = None
    Size: Optional[WordCloudMeasureFieldList] = None


class WordCloudFieldWells(BaseModel):
    WordCloudAggregatedFieldWells_1: Optional[WordCloudAggregatedFieldWells] = Field(
        None, alias='WordCloudAggregatedFieldWells'
    )


class BarChartConfiguration(BaseModel):
    BarsArrangement_1: Optional[BarsArrangement] = Field(None, alias='BarsArrangement')
    CategoryAxis: Optional[AxisDisplayOptions] = None
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    ColorLabelOptions: Optional[ChartAxisLabelOptions] = None
    ContributionAnalysisDefaults: Optional[ContributionAnalysisDefaultList] = None
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[BarChartFieldWells] = None
    Legend: Optional[LegendOptions] = None
    Orientation: Optional[BarChartOrientation] = None
    ReferenceLines: Optional[ReferenceLineList] = None
    SmallMultiplesOptions_1: Optional[SmallMultiplesOptions] = Field(
        None, alias='SmallMultiplesOptions'
    )
    SortConfiguration: Optional[BarChartSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    ValueAxis: Optional[AxisDisplayOptions] = None
    ValueLabelOptions: Optional[ChartAxisLabelOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class BarChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[BarChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class BoxPlotAggregatedFieldWells(BaseModel):
    GroupBy: Optional[BoxPlotDimensionFieldList] = None
    Values: Optional[BoxPlotMeasureFieldList] = None


class BoxPlotFieldWells(BaseModel):
    BoxPlotAggregatedFieldWells_1: Optional[BoxPlotAggregatedFieldWells] = Field(
        None, alias='BoxPlotAggregatedFieldWells'
    )


class ComboChartConfiguration(BaseModel):
    BarDataLabels: Optional[DataLabelOptions] = None
    BarsArrangement_1: Optional[BarsArrangement] = Field(None, alias='BarsArrangement')
    CategoryAxis: Optional[AxisDisplayOptions] = None
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    ColorLabelOptions: Optional[ChartAxisLabelOptions] = None
    FieldWells: Optional[ComboChartFieldWells] = None
    Legend: Optional[LegendOptions] = None
    LineDataLabels: Optional[DataLabelOptions] = None
    PrimaryYAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    PrimaryYAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    ReferenceLines: Optional[ReferenceLineList] = None
    SecondaryYAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    SecondaryYAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    SortConfiguration: Optional[ComboChartSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class ComboChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[ComboChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class Computation(BaseModel):
    Forecast: Optional[ForecastComputation] = None
    GrowthRate: Optional[GrowthRateComputation] = None
    MaximumMinimum: Optional[MaximumMinimumComputation] = None
    MetricComparison: Optional[MetricComparisonComputation] = None
    PeriodOverPeriod: Optional[PeriodOverPeriodComputation] = None
    PeriodToDate: Optional[PeriodToDateComputation] = None
    TopBottomMovers: Optional[TopBottomMoversComputation] = None
    TopBottomRanked: Optional[TopBottomRankedComputation] = None
    TotalAggregation: Optional[TotalAggregationComputation] = None
    UniqueValues: Optional[UniqueValuesComputation] = None


class ComputationList(RootModel[List[Computation]]):
    root: List[Computation] = Field(..., max_length=100)


class FilledMapAggregatedFieldWells(BaseModel):
    Geospatial: Optional[FilledMapDimensionFieldList] = None
    Values: Optional[FilledMapMeasureFieldList] = None


class FilledMapConditionalFormatting(BaseModel):
    ConditionalFormattingOptions: FilledMapConditionalFormattingOptionList


class FilledMapFieldWells(BaseModel):
    FilledMapAggregatedFieldWells_1: Optional[FilledMapAggregatedFieldWells] = Field(
        None, alias='FilledMapAggregatedFieldWells'
    )


class FunnelChartAggregatedFieldWells(BaseModel):
    Category: Optional[FunnelChartDimensionFieldList] = None
    Values: Optional[FunnelChartMeasureFieldList] = None


class FunnelChartFieldWells(BaseModel):
    FunnelChartAggregatedFieldWells_1: Optional[FunnelChartAggregatedFieldWells] = (
        Field(None, alias='FunnelChartAggregatedFieldWells')
    )


class GaugeChartConfiguration(BaseModel):
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[GaugeChartFieldWells] = None
    GaugeChartOptions_1: Optional[GaugeChartOptions] = Field(
        None, alias='GaugeChartOptions'
    )
    TooltipOptions_1: Optional[TooltipOptions] = Field(None, alias='TooltipOptions')
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class GaugeChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[GaugeChartConfiguration] = None
    ConditionalFormatting: Optional[GaugeChartConditionalFormatting] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class GeospatialMapConfiguration(BaseModel):
    FieldWells: Optional[GeospatialMapFieldWells] = None
    Legend: Optional[LegendOptions] = None
    MapStyleOptions: Optional[GeospatialMapStyleOptions] = None
    PointStyleOptions: Optional[GeospatialPointStyleOptions] = None
    Tooltip: Optional[TooltipOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')
    WindowOptions: Optional[GeospatialWindowOptions] = None


class GeospatialMapVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[GeospatialMapConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class HeatMapAggregatedFieldWells(BaseModel):
    Columns: Optional[HeatMapDimensionFieldList] = None
    Rows: Optional[HeatMapDimensionFieldList] = None
    Values: Optional[HeatMapMeasureFieldList] = None


class HeatMapFieldWells(BaseModel):
    HeatMapAggregatedFieldWells_1: Optional[HeatMapAggregatedFieldWells] = Field(
        None, alias='HeatMapAggregatedFieldWells'
    )


class HistogramAggregatedFieldWells(BaseModel):
    Values: Optional[HistogramMeasureFieldList] = None


class HistogramFieldWells(BaseModel):
    HistogramAggregatedFieldWells_1: Optional[HistogramAggregatedFieldWells] = Field(
        None, alias='HistogramAggregatedFieldWells'
    )


class InsightConfiguration(BaseModel):
    Computations: Optional[ComputationList] = None
    CustomNarrative: Optional[CustomNarrativeOptions] = None


class InsightVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    DataSetIdentifier_1: DataSetIdentifier = Field(..., alias='DataSetIdentifier')
    InsightConfiguration_1: Optional[InsightConfiguration] = Field(
        None, alias='InsightConfiguration'
    )
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class KPIConfiguration(BaseModel):
    FieldWells: Optional[KPIFieldWells] = None
    KPIOptions_1: Optional[KPIOptions] = Field(None, alias='KPIOptions')
    SortConfiguration: Optional[KPISortConfiguration] = None


class KPIVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[KPIConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    ConditionalFormatting: Optional[KPIConditionalFormatting] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class Layout(BaseModel):
    Configuration: LayoutConfiguration


class LayoutList(RootModel[List[Layout]]):
    root: List[Layout] = Field(..., max_length=1, min_length=1)


class LineChartConfiguration(BaseModel):
    ContributionAnalysisDefaults: Optional[ContributionAnalysisDefaultList] = None
    DataLabels: Optional[DataLabelOptions] = None
    DefaultSeriesSettings: Optional[LineChartDefaultSeriesSettings] = None
    FieldWells: Optional[LineChartFieldWells] = None
    ForecastConfigurations: Optional[ForecastConfigurationList] = None
    Legend: Optional[LegendOptions] = None
    PrimaryYAxisDisplayOptions: Optional[LineSeriesAxisDisplayOptions] = None
    PrimaryYAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    ReferenceLines: Optional[ReferenceLineList] = None
    SecondaryYAxisDisplayOptions: Optional[LineSeriesAxisDisplayOptions] = None
    SecondaryYAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    Series: Optional[SeriesItemList] = None
    SmallMultiplesOptions_1: Optional[SmallMultiplesOptions] = Field(
        None, alias='SmallMultiplesOptions'
    )
    SortConfiguration: Optional[LineChartSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    Type: Optional[LineChartType] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')
    XAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    XAxisLabelOptions: Optional[ChartAxisLabelOptions] = None


class LineChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[LineChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class PieChartConfiguration(BaseModel):
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    ContributionAnalysisDefaults: Optional[ContributionAnalysisDefaultList] = None
    DataLabels: Optional[DataLabelOptions] = None
    DonutOptions_1: Optional[DonutOptions] = Field(None, alias='DonutOptions')
    FieldWells: Optional[PieChartFieldWells] = None
    Legend: Optional[LegendOptions] = None
    SmallMultiplesOptions_1: Optional[SmallMultiplesOptions] = Field(
        None, alias='SmallMultiplesOptions'
    )
    SortConfiguration: Optional[PieChartSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    ValueLabelOptions: Optional[ChartAxisLabelOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class PieChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[PieChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class PivotTableConfiguration(BaseModel):
    FieldOptions: Optional[PivotTableFieldOptions] = None
    FieldWells: Optional[PivotTableFieldWells] = None
    PaginatedReportOptions: Optional[PivotTablePaginatedReportOptions] = None
    SortConfiguration: Optional[PivotTableSortConfiguration] = None
    TableOptions: Optional[PivotTableOptions] = None
    TotalOptions: Optional[PivotTableTotalOptions] = None


class PivotTableVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[PivotTableConfiguration] = None
    ConditionalFormatting: Optional[PivotTableConditionalFormatting] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class RadarChartConfiguration(BaseModel):
    AlternateBandColorsVisibility: Optional[Visibility] = None
    AlternateBandEvenColor: Optional[HexColor] = None
    AlternateBandOddColor: Optional[HexColor] = None
    BaseSeriesSettings: Optional[RadarChartSeriesSettings] = None
    CategoryAxis: Optional[AxisDisplayOptions] = None
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    ColorAxis: Optional[AxisDisplayOptions] = None
    ColorLabelOptions: Optional[ChartAxisLabelOptions] = None
    FieldWells: Optional[RadarChartFieldWells] = None
    Legend: Optional[LegendOptions] = None
    Shape: Optional[RadarChartShape] = None
    SortConfiguration: Optional[RadarChartSortConfiguration] = None
    StartAngle: Optional[RadarChartStartAngle] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class RadarChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[RadarChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class ScatterPlotConfiguration(BaseModel):
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[ScatterPlotFieldWells] = None
    Legend: Optional[LegendOptions] = None
    Tooltip: Optional[TooltipOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')
    XAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    XAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    YAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    YAxisLabelOptions: Optional[ChartAxisLabelOptions] = None


class ScatterPlotVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[ScatterPlotConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class TableFieldWells(BaseModel):
    TableAggregatedFieldWells_1: Optional[TableAggregatedFieldWells] = Field(
        None, alias='TableAggregatedFieldWells'
    )
    TableUnaggregatedFieldWells_1: Optional[TableUnaggregatedFieldWells] = Field(
        None, alias='TableUnaggregatedFieldWells'
    )


class TreeMapConfiguration(BaseModel):
    ColorLabelOptions: Optional[ChartAxisLabelOptions] = None
    ColorScale_1: Optional[ColorScale] = Field(None, alias='ColorScale')
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[TreeMapFieldWells] = None
    GroupLabelOptions: Optional[ChartAxisLabelOptions] = None
    Legend: Optional[LegendOptions] = None
    SizeLabelOptions: Optional[ChartAxisLabelOptions] = None
    SortConfiguration: Optional[TreeMapSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None


class TreeMapVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[TreeMapConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class WordCloudChartConfiguration(BaseModel):
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    FieldWells: Optional[WordCloudFieldWells] = None
    SortConfiguration: Optional[WordCloudSortConfiguration] = None
    WordCloudOptions_1: Optional[WordCloudOptions] = Field(
        None, alias='WordCloudOptions'
    )


class WordCloudVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[WordCloudChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class BoxPlotChartConfiguration(BaseModel):
    BoxPlotOptions_1: Optional[BoxPlotOptions] = Field(None, alias='BoxPlotOptions')
    CategoryAxis: Optional[AxisDisplayOptions] = None
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    FieldWells: Optional[BoxPlotFieldWells] = None
    Legend: Optional[LegendOptions] = None
    PrimaryYAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    PrimaryYAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    ReferenceLines: Optional[ReferenceLineList] = None
    SortConfiguration: Optional[BoxPlotSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class BoxPlotVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[BoxPlotChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class FilledMapConfiguration(BaseModel):
    FieldWells: Optional[FilledMapFieldWells] = None
    Legend: Optional[LegendOptions] = None
    MapStyleOptions: Optional[GeospatialMapStyleOptions] = None
    SortConfiguration: Optional[FilledMapSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    WindowOptions: Optional[GeospatialWindowOptions] = None


class FilledMapVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[FilledMapConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    ConditionalFormatting: Optional[FilledMapConditionalFormatting] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class FunnelChartConfiguration(BaseModel):
    CategoryLabelOptions: Optional[ChartAxisLabelOptions] = None
    DataLabelOptions: Optional[FunnelChartDataLabelOptions] = None
    FieldWells: Optional[FunnelChartFieldWells] = None
    SortConfiguration: Optional[FunnelChartSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None
    ValueLabelOptions: Optional[ChartAxisLabelOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')


class FunnelChartVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[FunnelChartConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class HeatMapConfiguration(BaseModel):
    ColorScale_1: Optional[ColorScale] = Field(None, alias='ColorScale')
    ColumnLabelOptions: Optional[ChartAxisLabelOptions] = None
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[HeatMapFieldWells] = None
    Legend: Optional[LegendOptions] = None
    RowLabelOptions: Optional[ChartAxisLabelOptions] = None
    SortConfiguration: Optional[HeatMapSortConfiguration] = None
    Tooltip: Optional[TooltipOptions] = None


class HeatMapVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[HeatMapConfiguration] = None
    ColumnHierarchies: Optional[ColumnHierarchyList] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class HistogramConfiguration(BaseModel):
    BinOptions: Optional[HistogramBinOptions] = None
    DataLabels: Optional[DataLabelOptions] = None
    FieldWells: Optional[HistogramFieldWells] = None
    Tooltip: Optional[TooltipOptions] = None
    VisualPalette_1: Optional[VisualPalette] = Field(None, alias='VisualPalette')
    XAxisDisplayOptions: Optional[AxisDisplayOptions] = None
    XAxisLabelOptions: Optional[ChartAxisLabelOptions] = None
    YAxisDisplayOptions: Optional[AxisDisplayOptions] = None


class HistogramVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[HistogramConfiguration] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class TableConfiguration(BaseModel):
    FieldOptions: Optional[TableFieldOptions] = None
    FieldWells: Optional[TableFieldWells] = None
    PaginatedReportOptions: Optional[TablePaginatedReportOptions] = None
    SortConfiguration: Optional[TableSortConfiguration] = None
    TableInlineVisualizations: Optional[TableInlineVisualizationList] = None
    TableOptions_1: Optional[TableOptions] = Field(None, alias='TableOptions')
    TotalOptions_1: Optional[TotalOptions] = Field(None, alias='TotalOptions')


class TableVisual(BaseModel):
    Actions: Optional[VisualCustomActionList] = None
    ChartConfiguration: Optional[TableConfiguration] = None
    ConditionalFormatting: Optional[TableConditionalFormatting] = None
    Subtitle: Optional[VisualSubtitleLabelOptions] = None
    Title: Optional[VisualTitleLabelOptions] = None
    VisualId: ShortRestrictiveResourceId


class Visual(BaseModel):
    BarChartVisual_1: Optional[BarChartVisual] = Field(None, alias='BarChartVisual')
    BoxPlotVisual_1: Optional[BoxPlotVisual] = Field(None, alias='BoxPlotVisual')
    ComboChartVisual_1: Optional[ComboChartVisual] = Field(
        None, alias='ComboChartVisual'
    )
    CustomContentVisual_1: Optional[CustomContentVisual] = Field(
        None, alias='CustomContentVisual'
    )
    EmptyVisual_1: Optional[EmptyVisual] = Field(None, alias='EmptyVisual')
    FilledMapVisual_1: Optional[FilledMapVisual] = Field(None, alias='FilledMapVisual')
    FunnelChartVisual_1: Optional[FunnelChartVisual] = Field(
        None, alias='FunnelChartVisual'
    )
    GaugeChartVisual_1: Optional[GaugeChartVisual] = Field(
        None, alias='GaugeChartVisual'
    )
    GeospatialMapVisual_1: Optional[GeospatialMapVisual] = Field(
        None, alias='GeospatialMapVisual'
    )
    HeatMapVisual_1: Optional[HeatMapVisual] = Field(None, alias='HeatMapVisual')
    HistogramVisual_1: Optional[HistogramVisual] = Field(None, alias='HistogramVisual')
    InsightVisual_1: Optional[InsightVisual] = Field(None, alias='InsightVisual')
    KPIVisual_1: Optional[KPIVisual] = Field(None, alias='KPIVisual')
    LineChartVisual_1: Optional[LineChartVisual] = Field(None, alias='LineChartVisual')
    PieChartVisual_1: Optional[PieChartVisual] = Field(None, alias='PieChartVisual')
    PivotTableVisual_1: Optional[PivotTableVisual] = Field(
        None, alias='PivotTableVisual'
    )
    RadarChartVisual_1: Optional[RadarChartVisual] = Field(
        None, alias='RadarChartVisual'
    )
    SankeyDiagramVisual_1: Optional[SankeyDiagramVisual] = Field(
        None, alias='SankeyDiagramVisual'
    )
    ScatterPlotVisual_1: Optional[ScatterPlotVisual] = Field(
        None, alias='ScatterPlotVisual'
    )
    TableVisual_1: Optional[TableVisual] = Field(None, alias='TableVisual')
    TreeMapVisual_1: Optional[TreeMapVisual] = Field(None, alias='TreeMapVisual')
    WaterfallVisual_1: Optional[WaterfallVisual] = Field(None, alias='WaterfallVisual')
    WordCloudVisual_1: Optional[WordCloudVisual] = Field(None, alias='WordCloudVisual')


class VisualList(RootModel[List[Visual]]):
    root: List[Visual] = Field(..., max_length=30)


class SheetDefinition(BaseModel):
    ContentType: Optional[SheetContentType] = None
    Description: Optional[SheetDescription] = None
    FilterControls: Optional[FilterControlList] = None
    Layouts: Optional[LayoutList] = None
    Name: Optional[SheetName] = None
    ParameterControls: Optional[ParameterControlList] = None
    SheetControlLayouts: Optional[SheetControlLayoutList] = None
    SheetId: ShortRestrictiveResourceId
    TextBoxes: Optional[SheetTextBoxList] = None
    Title: Optional[SheetTitle] = None
    Visuals: Optional[VisualList] = None


class SheetDefinitionList(RootModel[List[SheetDefinition]]):
    root: List[SheetDefinition] = Field(..., max_length=20)


class TemplateVersionDefinition(BaseModel):
    AnalysisDefaults_1: Optional[AnalysisDefaults] = Field(
        None, alias='AnalysisDefaults'
    )
    CalculatedFields_1: Optional[CalculatedFields] = Field(
        None, alias='CalculatedFields'
    )
    ColumnConfigurations: Optional[ColumnConfigurationList] = None
    DataSetConfigurations: DataSetConfigurationList
    FilterGroups: Optional[FilterGroupList] = None
    ParameterDeclarations: Optional[ParameterDeclarationList] = None
    Sheets: Optional[SheetDefinitionList] = None


class UpdateTemplateRequest(BaseModel):
    Definition: Optional[TemplateVersionDefinition] = None
    Name: Optional[TemplateName] = None
    SourceEntity: Optional[TemplateSourceEntity] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class Definition(BaseModel):
    AnalysisDefaults_1: Optional[AnalysisDefaults] = Field(
        None, alias='AnalysisDefaults'
    )
    CalculatedFields_1: Optional[CalculatedFields] = Field(
        None, alias='CalculatedFields'
    )
    ColumnConfigurations: Optional[ColumnConfigurationList] = None
    DataSetIdentifierDeclarations: Optional[DataSetIdentifierDeclarationList] = None
    FilterGroups: Optional[FilterGroupList] = None
    ParameterDeclarations: Optional[ParameterDeclarationList] = None
    Sheets: Optional[SheetDefinitionList] = None


class AccountsAwsAccountIdAnalysesAnalysisIdPostRequest(BaseModel):
    Definition_1: Optional[Definition] = Field(
        None, alias='Definition', description='The definition of an analysis.'
    )
    Name: constr(min_length=1, max_length=2048) = Field(
        ...,
        description="A descriptive name for the analysis that you're creating. This name displays for the analysis in the Amazon QuickSight console. ",
    )
    Parameters_1: Optional[Parameters] = Field(
        None,
        alias='Parameters',
        description="A list of Amazon QuickSight parameters and the list's override values.",
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='<p>A structure that describes the principals and the resource-level permissions on an analysis. You can use the <code>Permissions</code> structure to grant permissions by providing a list of Identity and Access Management (IAM) action information for each principal listed by Amazon Resource Name (ARN). </p> <p>To specify no permissions, omit <code>Permissions</code>.</p>',
        max_length=64,
        min_length=1,
    )
    SourceEntity_1: Optional[SourceEntity] = Field(
        None, alias='SourceEntity', description='The source entity of an analysis.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Contains a map of the key-value pairs for the resource tag or tags assigned to the analysis.',
        max_length=200,
        min_length=1,
    )
    ThemeArn: Optional[str] = Field(
        None,
        description="The ARN for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it.",
    )


class AccountsAwsAccountIdAnalysesAnalysisIdPutRequest(BaseModel):
    Definition_1: Optional[Definition] = Field(
        None, alias='Definition', description='The definition of an analysis.'
    )
    Name: constr(min_length=1, max_length=2048) = Field(
        ...,
        description="A descriptive name for the analysis that you're updating. This name displays for the analysis in the Amazon QuickSight console.",
    )
    Parameters_1: Optional[Parameters] = Field(
        None,
        alias='Parameters',
        description="A list of Amazon QuickSight parameters and the list's override values.",
    )
    SourceEntity_1: Optional[SourceEntity] = Field(
        None, alias='SourceEntity', description='The source entity of an analysis.'
    )
    ThemeArn: Optional[str] = Field(
        None,
        description="The Amazon Resource Name (ARN) for the theme to apply to the analysis that you're creating. To see the theme in the Amazon QuickSight console, make sure that you have access to it.",
    )


class AccountsAwsAccountIdDashboardsDashboardIdPostRequest(BaseModel):
    DashboardPublishOptions_1: Optional[DashboardPublishOptions] = Field(
        None, alias='DashboardPublishOptions', description='Dashboard publish options.'
    )
    Definition_1: Optional[Definition] = Field(
        None, alias='Definition', description='The contents of a dashboard.'
    )
    Name: constr(min_length=1, max_length=2048) = Field(
        ..., description='The display name of the dashboard.'
    )
    Parameters_1: Optional[Parameters] = Field(
        None,
        alias='Parameters',
        description="A list of Amazon QuickSight parameters and the list's override values.",
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='<p>A structure that contains the permissions of the dashboard. You can use this structure for granting permissions by providing a list of IAM action information for each principal ARN. </p> <p>To specify no permissions, omit the permissions list.</p>',
        max_length=64,
        min_length=1,
    )
    SourceEntity: Optional[SourceEntity2] = Field(
        None, description='Dashboard source entity.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Contains a map of the key-value pairs for the resource tag or tags assigned to the dashboard.',
        max_length=200,
        min_length=1,
    )
    ThemeArn: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that is used in the source entity. The theme ARN must exist in the same Amazon Web Services account where you create the dashboard.',
    )
    VersionDescription: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description='A description for the first version of the dashboard being created.',
    )


class AccountsAwsAccountIdDashboardsDashboardIdPutRequest(BaseModel):
    DashboardPublishOptions_1: Optional[DashboardPublishOptions] = Field(
        None, alias='DashboardPublishOptions', description='Dashboard publish options.'
    )
    Definition_1: Optional[Definition] = Field(
        None, alias='Definition', description='The contents of a dashboard.'
    )
    Name: constr(min_length=1, max_length=2048) = Field(
        ..., description='The display name of the dashboard.'
    )
    Parameters_1: Optional[Parameters] = Field(
        None,
        alias='Parameters',
        description="A list of Amazon QuickSight parameters and the list's override values.",
    )
    SourceEntity: Optional[SourceEntity2] = Field(
        None, description='Dashboard source entity.'
    )
    ThemeArn: Optional[str] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the theme that is being used for this dashboard. If you add a value for this field, it overrides the value that was originally associated with the entity. The theme ARN must exist in the same Amazon Web Services account where you create the dashboard.',
    )
    VersionDescription: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description='A description for the first version of the dashboard being created.',
    )


class Definition4(BaseModel):
    AnalysisDefaults_1: Optional[AnalysisDefaults] = Field(
        None, alias='AnalysisDefaults'
    )
    CalculatedFields_1: Optional[CalculatedFields] = Field(
        None, alias='CalculatedFields'
    )
    ColumnConfigurations: Optional[ColumnConfigurationList] = None
    DataSetConfigurations: Optional[DataSetConfigurationList] = None
    FilterGroups: Optional[FilterGroupList] = None
    ParameterDeclarations: Optional[ParameterDeclarationList] = None
    Sheets: Optional[SheetDefinitionList] = None


class AccountsAwsAccountIdTemplatesTemplateIdPostRequest(BaseModel):
    Definition: Optional[Definition4] = Field(
        None, description='The detailed definition of a template.'
    )
    Name: Optional[constr(min_length=1, max_length=2048)] = Field(
        None, description='A display name for the template.'
    )
    Permissions: Optional[List[ResourcePermission]] = Field(
        None,
        description='A list of resource permissions to be set on the template. ',
        max_length=64,
        min_length=1,
    )
    SourceEntity: Optional[SourceEntity4] = Field(
        None, description='The source entity of the template.'
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='Contains a map of the key-value pairs for the resource tag or tags assigned to the resource.',
        max_length=200,
        min_length=1,
    )
    VersionDescription: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description='A description of the current template version being created. This API operation creates the first version of the template. Every time <code>UpdateTemplate</code> is called, a new version is created. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.',
    )


class AccountsAwsAccountIdTemplatesTemplateIdPutRequest(BaseModel):
    Definition: Optional[Definition4] = Field(
        None, description='The detailed definition of a template.'
    )
    Name: Optional[constr(min_length=1, max_length=2048)] = Field(
        None, description='The name for the template.'
    )
    SourceEntity: Optional[SourceEntity4] = Field(
        None, description='The source entity of the template.'
    )
    VersionDescription: Optional[constr(min_length=1, max_length=512)] = Field(
        None,
        description='A description of the current template version that is being updated. Every time you call <code>UpdateTemplate</code>, you create a new version of the template. Each version of the template maintains a description of the version in the <code>VersionDescription</code> field.',
    )


class AnalysisDefinition(BaseModel):
    AnalysisDefaults_1: Optional[AnalysisDefaults] = Field(
        None, alias='AnalysisDefaults'
    )
    CalculatedFields_1: Optional[CalculatedFields] = Field(
        None, alias='CalculatedFields'
    )
    ColumnConfigurations: Optional[ColumnConfigurationList] = None
    DataSetIdentifierDeclarations: DataSetIdentifierDeclarationList
    FilterGroups: Optional[FilterGroupList] = None
    ParameterDeclarations: Optional[ParameterDeclarationList] = None
    Sheets: Optional[SheetDefinitionList] = None


class CreateAnalysisRequest(BaseModel):
    Definition: Optional[AnalysisDefinition] = None
    Name: AnalysisName
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    Permissions: Optional[ResourcePermissionList] = None
    SourceEntity: Optional[AnalysisSourceEntity] = None
    Tags: Optional[TagList] = None
    ThemeArn: Optional[Arn] = None


class CreateTemplateRequest(BaseModel):
    Definition: Optional[TemplateVersionDefinition] = None
    Name: Optional[TemplateName] = None
    Permissions: Optional[ResourcePermissionList] = None
    SourceEntity: Optional[TemplateSourceEntity] = None
    Tags: Optional[TagList] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class DashboardVersionDefinition(BaseModel):
    AnalysisDefaults_1: Optional[AnalysisDefaults] = Field(
        None, alias='AnalysisDefaults'
    )
    CalculatedFields_1: Optional[CalculatedFields] = Field(
        None, alias='CalculatedFields'
    )
    ColumnConfigurations: Optional[ColumnConfigurationList] = None
    DataSetIdentifierDeclarations: DataSetIdentifierDeclarationList
    FilterGroups: Optional[FilterGroupList] = None
    ParameterDeclarations: Optional[ParameterDeclarationList] = None
    Sheets: Optional[SheetDefinitionList] = None


class DescribeAnalysisDefinitionResponse(BaseModel):
    AnalysisId: Optional[ShortRestrictiveResourceId] = None
    Definition: Optional[AnalysisDefinition] = None
    Errors: Optional[AnalysisErrorList] = None
    Name: Optional[AnalysisName] = None
    RequestId: Optional[String] = None
    ResourceStatus_1: Optional[ResourceStatus] = Field(None, alias='ResourceStatus')
    Status: Optional[StatusCode] = None
    ThemeArn: Optional[Arn] = None


class DescribeDashboardDefinitionResponse(BaseModel):
    DashboardId: Optional[ShortRestrictiveResourceId] = None
    DashboardPublishOptions_1: Optional[DashboardPublishOptions] = Field(
        None, alias='DashboardPublishOptions'
    )
    Definition: Optional[DashboardVersionDefinition] = None
    Errors: Optional[DashboardErrorList] = None
    Name: Optional[DashboardName] = None
    RequestId: Optional[String] = None
    ResourceStatus_1: Optional[ResourceStatus] = Field(None, alias='ResourceStatus')
    Status: Optional[StatusCode] = None
    ThemeArn: Optional[Arn] = None


class DescribeTemplateDefinitionResponse(BaseModel):
    Definition: Optional[TemplateVersionDefinition] = None
    Errors: Optional[TemplateErrorList] = None
    Name: Optional[TemplateName] = None
    RequestId: Optional[String] = None
    ResourceStatus_1: Optional[ResourceStatus] = Field(None, alias='ResourceStatus')
    Status: Optional[StatusCode] = None
    TemplateId: Optional[ShortRestrictiveResourceId] = None
    ThemeArn: Optional[Arn] = None


class UpdateAnalysisRequest(BaseModel):
    Definition: Optional[AnalysisDefinition] = None
    Name: AnalysisName
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    SourceEntity: Optional[AnalysisSourceEntity] = None
    ThemeArn: Optional[Arn] = None


class UpdateDashboardRequest(BaseModel):
    DashboardPublishOptions_1: Optional[DashboardPublishOptions] = Field(
        None, alias='DashboardPublishOptions'
    )
    Definition: Optional[DashboardVersionDefinition] = None
    Name: DashboardName
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    SourceEntity: Optional[DashboardSourceEntity] = None
    ThemeArn: Optional[Arn] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )


class CreateDashboardRequest(BaseModel):
    DashboardPublishOptions_1: Optional[DashboardPublishOptions] = Field(
        None, alias='DashboardPublishOptions'
    )
    Definition: Optional[DashboardVersionDefinition] = None
    Name: DashboardName
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    Permissions: Optional[ResourcePermissionList] = None
    SourceEntity: Optional[DashboardSourceEntity] = None
    Tags: Optional[TagList] = None
    ThemeArn: Optional[Arn] = None
    VersionDescription_1: Optional[VersionDescription] = Field(
        None, alias='VersionDescription'
    )
